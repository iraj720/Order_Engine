// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wallet/services.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	SelectConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	UpdateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	DeleteConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	//   --------------------------------------------
	//   Sanity
	//  --------------------------------------------
	DepositSanityCheck(ctx context.Context, in *DepositSanityRequest, opts ...grpc.CallOption) (*DepositSanityResponse, error)
	WithdrawSanityCheck(ctx context.Context, in *WithdrawSanityRequest, opts ...grpc.CallOption) (*WithdrawSanityResponse, error)
	//--------------------------------------------
	// Asset
	//--------------------------------------------
	AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*AddAssetResponse, error)
	UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*UpdateAssetResponse, error)
	ListAsset(ctx context.Context, in *ListAssetRequest, opts ...grpc.CallOption) (*ListAssetResponse, error)
	ListUserAsset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserAssetResponse, error)
	ListTinyAsset(ctx context.Context, in *ListTinyAssetRequest, opts ...grpc.CallOption) (*ListTinyAssetResponse, error)
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error)
	UpdateAssetOrder(ctx context.Context, in *UpdateOrderAssetRequest, opts ...grpc.CallOption) (*UpdateOrderAssetResponse, error)
	GetAllAsset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllAssetResponse, error)
	//--------------------------------------------
	// Network
	//--------------------------------------------
	AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkResponse, error)
	UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error)
	ListNetwork(ctx context.Context, in *ListNetworkRequest, opts ...grpc.CallOption) (*ListNetworkResponse, error)
	ListTinyNetwork(ctx context.Context, in *ListTinyNetworkRequest, opts ...grpc.CallOption) (*ListTinyNetworkResponse, error)
	GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error)
	// ------------------------------------------------------------
	// AssetNetwork
	// ------------------------------------------------------------
	AddAssetNetwork(ctx context.Context, in *AddAssetNetworkRequest, opts ...grpc.CallOption) (*AddAssetNetworkResponse, error)
	UpdateAssetNetwork(ctx context.Context, in *UpdateAssetNetworkRequest, opts ...grpc.CallOption) (*UpdateAssetNetworkResponse, error)
	ListAssetNetwork(ctx context.Context, in *ListAssetNetworkRequest, opts ...grpc.CallOption) (*ListAssetNetworkResponse, error)
	GetAssetNetwork(ctx context.Context, in *GetAssetNetworkRequest, opts ...grpc.CallOption) (*GetAssetNetworkResponseList, error)
	FilterAssetNetwork(ctx context.Context, in *FilterAssetNetworkRequest, opts ...grpc.CallOption) (*FilterAssetNetworkResponse, error)
	FilterAssetNetworkUser(ctx context.Context, in *FilterAssetNetworkRequest, opts ...grpc.CallOption) (*FilterAssetNetworkUserResponse, error)
	GetAssetNetworkDepositMode(ctx context.Context, in *GetAssetNetworkDepositModeRequest, opts ...grpc.CallOption) (*GetAssetNetworkDepositModeResponse, error)
	GetFullNodeAssetNetworkList(ctx context.Context, in *GetFullNodeAssetNetworkListRequest, opts ...grpc.CallOption) (*GetFullNodeAssetNetworkListResponse, error)
	CheckAssetNetworkFeeFairness(ctx context.Context, in *CheckAssetNetworkFeeFairnessRequest, opts ...grpc.CallOption) (*CheckAssetNetworkFeeFairnessResponse, error)
	// ------------------------------------------------------------
	// Blacklist
	// ------------------------------------------------------------
	AddBlacklist(ctx context.Context, in *AddBlacklistRequest, opts ...grpc.CallOption) (*AddBlacklistResponse, error)
	UpdateBlacklist(ctx context.Context, in *UpdateBlacklistRequest, opts ...grpc.CallOption) (*UpdateBlacklistResponse, error)
	ListBlacklist(ctx context.Context, in *ListBlacklistRequest, opts ...grpc.CallOption) (*ListBlacklistResponse, error)
	GetBlacklist(ctx context.Context, in *GetBlacklistRequest, opts ...grpc.CallOption) (*GetBlacklistResponse, error)
	GetAssetNetworkSelectors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetNetworkSelectors, error)
	UpdateAssetNetworkSelector(ctx context.Context, in *UpdateAssetNetworkSelectorRequest, opts ...grpc.CallOption) (*AssetNetworkSelectors, error)
	UpdateTokenStandardSelector(ctx context.Context, in *UpdateTokenStandardSelectorRequest, opts ...grpc.CallOption) (*AssetNetworkSelectors, error)
	WatchAssets(ctx context.Context, in *WatchAssetsRequest, opts ...grpc.CallOption) (*WatchAssetsResponse, error)
	FilterExternalExchangeSetting(ctx context.Context, in *ExternalExchangeSettingFilter, opts ...grpc.CallOption) (*ExternalExchangeSettingsResponse, error)
	NewExternalExchangeSetting(ctx context.Context, in *ExternalExchangeSetting, opts ...grpc.CallOption) (*ExternalExchangeSettingsResponse, error)
	UpdateExternalExchangeSetting(ctx context.Context, in *ExternalExchangeUpdateSettingRequest, opts ...grpc.CallOption) (*ExternalExchangeSettingResponse, error)
	UpdateAssetSetting(ctx context.Context, in *UpdateAssetSettingRequest, opts ...grpc.CallOption) (*UpdateAssetSettingResponse, error)
	AssetSetting(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetSettingResponse, error)
	// --------------------------------------------------
	// Treasury
	// --------------------------------------------------
	AddTreasury(ctx context.Context, in *AddTreasuryRequest, opts ...grpc.CallOption) (*AddTreasuryResponse, error)
	GetTreasuryById(ctx context.Context, in *GetTreasuryByIdRequest, opts ...grpc.CallOption) (*GetTreasuryByIdResponse, error)
	DeleteTreasury(ctx context.Context, in *DeleteTreasuryRequest, opts ...grpc.CallOption) (*DeleteTreasuryResponse, error)
	UpdateTreasury(ctx context.Context, in *UpdateTreasuryRequest, opts ...grpc.CallOption) (*UpdateTreasuryResponse, error)
	ListTreasury(ctx context.Context, in *ListTreasuryRequest, opts ...grpc.CallOption) (*ListTreasuryResponse, error)
	UpdateExternalExchangeSettingByCSV(ctx context.Context, in *UpdateExternalExchangeSettingByCSVRequest, opts ...grpc.CallOption) (*ExternalExchangeSettingsResponse, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) SelectConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/SelectConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeleteConfig(ctx context.Context, in *Config, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/DeleteConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DepositSanityCheck(ctx context.Context, in *DepositSanityRequest, opts ...grpc.CallOption) (*DepositSanityResponse, error) {
	out := new(DepositSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/DepositSanityCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawSanityCheck(ctx context.Context, in *WithdrawSanityRequest, opts ...grpc.CallOption) (*WithdrawSanityResponse, error) {
	out := new(WithdrawSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/WithdrawSanityCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddAsset(ctx context.Context, in *AddAssetRequest, opts ...grpc.CallOption) (*AddAssetResponse, error) {
	out := new(AddAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset(ctx context.Context, in *UpdateAssetRequest, opts ...grpc.CallOption) (*UpdateAssetResponse, error) {
	out := new(UpdateAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListAsset(ctx context.Context, in *ListAssetRequest, opts ...grpc.CallOption) (*ListAssetResponse, error) {
	out := new(ListAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListUserAsset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListUserAssetResponse, error) {
	out := new(ListUserAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListUserAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListTinyAsset(ctx context.Context, in *ListTinyAssetRequest, opts ...grpc.CallOption) (*ListTinyAssetResponse, error) {
	out := new(ListTinyAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListTinyAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error) {
	out := new(GetAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAssetOrder(ctx context.Context, in *UpdateOrderAssetRequest, opts ...grpc.CallOption) (*UpdateOrderAssetResponse, error) {
	out := new(UpdateOrderAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateAssetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAllAsset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllAssetResponse, error) {
	out := new(GetAllAssetResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetAllAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddNetwork(ctx context.Context, in *AddNetworkRequest, opts ...grpc.CallOption) (*AddNetworkResponse, error) {
	out := new(AddNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateNetwork(ctx context.Context, in *UpdateNetworkRequest, opts ...grpc.CallOption) (*UpdateNetworkResponse, error) {
	out := new(UpdateNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNetwork(ctx context.Context, in *ListNetworkRequest, opts ...grpc.CallOption) (*ListNetworkResponse, error) {
	out := new(ListNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListTinyNetwork(ctx context.Context, in *ListTinyNetworkRequest, opts ...grpc.CallOption) (*ListTinyNetworkResponse, error) {
	out := new(ListTinyNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListTinyNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNetwork(ctx context.Context, in *GetNetworkRequest, opts ...grpc.CallOption) (*GetNetworkResponse, error) {
	out := new(GetNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddAssetNetwork(ctx context.Context, in *AddAssetNetworkRequest, opts ...grpc.CallOption) (*AddAssetNetworkResponse, error) {
	out := new(AddAssetNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/AddAssetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAssetNetwork(ctx context.Context, in *UpdateAssetNetworkRequest, opts ...grpc.CallOption) (*UpdateAssetNetworkResponse, error) {
	out := new(UpdateAssetNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateAssetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListAssetNetwork(ctx context.Context, in *ListAssetNetworkRequest, opts ...grpc.CallOption) (*ListAssetNetworkResponse, error) {
	out := new(ListAssetNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListAssetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetNetwork(ctx context.Context, in *GetAssetNetworkRequest, opts ...grpc.CallOption) (*GetAssetNetworkResponseList, error) {
	out := new(GetAssetNetworkResponseList)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetAssetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FilterAssetNetwork(ctx context.Context, in *FilterAssetNetworkRequest, opts ...grpc.CallOption) (*FilterAssetNetworkResponse, error) {
	out := new(FilterAssetNetworkResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/FilterAssetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FilterAssetNetworkUser(ctx context.Context, in *FilterAssetNetworkRequest, opts ...grpc.CallOption) (*FilterAssetNetworkUserResponse, error) {
	out := new(FilterAssetNetworkUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/FilterAssetNetworkUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetNetworkDepositMode(ctx context.Context, in *GetAssetNetworkDepositModeRequest, opts ...grpc.CallOption) (*GetAssetNetworkDepositModeResponse, error) {
	out := new(GetAssetNetworkDepositModeResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetAssetNetworkDepositMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetFullNodeAssetNetworkList(ctx context.Context, in *GetFullNodeAssetNetworkListRequest, opts ...grpc.CallOption) (*GetFullNodeAssetNetworkListResponse, error) {
	out := new(GetFullNodeAssetNetworkListResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetFullNodeAssetNetworkList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CheckAssetNetworkFeeFairness(ctx context.Context, in *CheckAssetNetworkFeeFairnessRequest, opts ...grpc.CallOption) (*CheckAssetNetworkFeeFairnessResponse, error) {
	out := new(CheckAssetNetworkFeeFairnessResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/CheckAssetNetworkFeeFairness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddBlacklist(ctx context.Context, in *AddBlacklistRequest, opts ...grpc.CallOption) (*AddBlacklistResponse, error) {
	out := new(AddBlacklistResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/AddBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateBlacklist(ctx context.Context, in *UpdateBlacklistRequest, opts ...grpc.CallOption) (*UpdateBlacklistResponse, error) {
	out := new(UpdateBlacklistResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListBlacklist(ctx context.Context, in *ListBlacklistRequest, opts ...grpc.CallOption) (*ListBlacklistResponse, error) {
	out := new(ListBlacklistResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlacklist(ctx context.Context, in *GetBlacklistRequest, opts ...grpc.CallOption) (*GetBlacklistResponse, error) {
	out := new(GetBlacklistResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetNetworkSelectors(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetNetworkSelectors, error) {
	out := new(AssetNetworkSelectors)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetAssetNetworkSelectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAssetNetworkSelector(ctx context.Context, in *UpdateAssetNetworkSelectorRequest, opts ...grpc.CallOption) (*AssetNetworkSelectors, error) {
	out := new(AssetNetworkSelectors)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateAssetNetworkSelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateTokenStandardSelector(ctx context.Context, in *UpdateTokenStandardSelectorRequest, opts ...grpc.CallOption) (*AssetNetworkSelectors, error) {
	out := new(AssetNetworkSelectors)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateTokenStandardSelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WatchAssets(ctx context.Context, in *WatchAssetsRequest, opts ...grpc.CallOption) (*WatchAssetsResponse, error) {
	out := new(WatchAssetsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/WatchAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FilterExternalExchangeSetting(ctx context.Context, in *ExternalExchangeSettingFilter, opts ...grpc.CallOption) (*ExternalExchangeSettingsResponse, error) {
	out := new(ExternalExchangeSettingsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/FilterExternalExchangeSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) NewExternalExchangeSetting(ctx context.Context, in *ExternalExchangeSetting, opts ...grpc.CallOption) (*ExternalExchangeSettingsResponse, error) {
	out := new(ExternalExchangeSettingsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/NewExternalExchangeSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateExternalExchangeSetting(ctx context.Context, in *ExternalExchangeUpdateSettingRequest, opts ...grpc.CallOption) (*ExternalExchangeSettingResponse, error) {
	out := new(ExternalExchangeSettingResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateExternalExchangeSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAssetSetting(ctx context.Context, in *UpdateAssetSettingRequest, opts ...grpc.CallOption) (*UpdateAssetSettingResponse, error) {
	out := new(UpdateAssetSettingResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateAssetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AssetSetting(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AssetSettingResponse, error) {
	out := new(AssetSettingResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/AssetSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddTreasury(ctx context.Context, in *AddTreasuryRequest, opts ...grpc.CallOption) (*AddTreasuryResponse, error) {
	out := new(AddTreasuryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/AddTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTreasuryById(ctx context.Context, in *GetTreasuryByIdRequest, opts ...grpc.CallOption) (*GetTreasuryByIdResponse, error) {
	out := new(GetTreasuryByIdResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/GetTreasuryById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeleteTreasury(ctx context.Context, in *DeleteTreasuryRequest, opts ...grpc.CallOption) (*DeleteTreasuryResponse, error) {
	out := new(DeleteTreasuryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/DeleteTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateTreasury(ctx context.Context, in *UpdateTreasuryRequest, opts ...grpc.CallOption) (*UpdateTreasuryResponse, error) {
	out := new(UpdateTreasuryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListTreasury(ctx context.Context, in *ListTreasuryRequest, opts ...grpc.CallOption) (*ListTreasuryResponse, error) {
	out := new(ListTreasuryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/ListTreasury", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateExternalExchangeSettingByCSV(ctx context.Context, in *UpdateExternalExchangeSettingByCSVRequest, opts ...grpc.CallOption) (*ExternalExchangeSettingsResponse, error) {
	out := new(ExternalExchangeSettingsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet.Wallet/UpdateExternalExchangeSettingByCSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility
type WalletServer interface {
	SelectConfig(context.Context, *emptypb.Empty) (*CreateConfigResponse, error)
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	UpdateConfig(context.Context, *Config) (*CreateConfigResponse, error)
	DeleteConfig(context.Context, *Config) (*CreateConfigResponse, error)
	//   --------------------------------------------
	//   Sanity
	//  --------------------------------------------
	DepositSanityCheck(context.Context, *DepositSanityRequest) (*DepositSanityResponse, error)
	WithdrawSanityCheck(context.Context, *WithdrawSanityRequest) (*WithdrawSanityResponse, error)
	//--------------------------------------------
	// Asset
	//--------------------------------------------
	AddAsset(context.Context, *AddAssetRequest) (*AddAssetResponse, error)
	UpdateAsset(context.Context, *UpdateAssetRequest) (*UpdateAssetResponse, error)
	ListAsset(context.Context, *ListAssetRequest) (*ListAssetResponse, error)
	ListUserAsset(context.Context, *emptypb.Empty) (*ListUserAssetResponse, error)
	ListTinyAsset(context.Context, *ListTinyAssetRequest) (*ListTinyAssetResponse, error)
	GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error)
	UpdateAssetOrder(context.Context, *UpdateOrderAssetRequest) (*UpdateOrderAssetResponse, error)
	GetAllAsset(context.Context, *emptypb.Empty) (*GetAllAssetResponse, error)
	//--------------------------------------------
	// Network
	//--------------------------------------------
	AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkResponse, error)
	UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error)
	ListNetwork(context.Context, *ListNetworkRequest) (*ListNetworkResponse, error)
	ListTinyNetwork(context.Context, *ListTinyNetworkRequest) (*ListTinyNetworkResponse, error)
	GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error)
	// ------------------------------------------------------------
	// AssetNetwork
	// ------------------------------------------------------------
	AddAssetNetwork(context.Context, *AddAssetNetworkRequest) (*AddAssetNetworkResponse, error)
	UpdateAssetNetwork(context.Context, *UpdateAssetNetworkRequest) (*UpdateAssetNetworkResponse, error)
	ListAssetNetwork(context.Context, *ListAssetNetworkRequest) (*ListAssetNetworkResponse, error)
	GetAssetNetwork(context.Context, *GetAssetNetworkRequest) (*GetAssetNetworkResponseList, error)
	FilterAssetNetwork(context.Context, *FilterAssetNetworkRequest) (*FilterAssetNetworkResponse, error)
	FilterAssetNetworkUser(context.Context, *FilterAssetNetworkRequest) (*FilterAssetNetworkUserResponse, error)
	GetAssetNetworkDepositMode(context.Context, *GetAssetNetworkDepositModeRequest) (*GetAssetNetworkDepositModeResponse, error)
	GetFullNodeAssetNetworkList(context.Context, *GetFullNodeAssetNetworkListRequest) (*GetFullNodeAssetNetworkListResponse, error)
	CheckAssetNetworkFeeFairness(context.Context, *CheckAssetNetworkFeeFairnessRequest) (*CheckAssetNetworkFeeFairnessResponse, error)
	// ------------------------------------------------------------
	// Blacklist
	// ------------------------------------------------------------
	AddBlacklist(context.Context, *AddBlacklistRequest) (*AddBlacklistResponse, error)
	UpdateBlacklist(context.Context, *UpdateBlacklistRequest) (*UpdateBlacklistResponse, error)
	ListBlacklist(context.Context, *ListBlacklistRequest) (*ListBlacklistResponse, error)
	GetBlacklist(context.Context, *GetBlacklistRequest) (*GetBlacklistResponse, error)
	GetAssetNetworkSelectors(context.Context, *emptypb.Empty) (*AssetNetworkSelectors, error)
	UpdateAssetNetworkSelector(context.Context, *UpdateAssetNetworkSelectorRequest) (*AssetNetworkSelectors, error)
	UpdateTokenStandardSelector(context.Context, *UpdateTokenStandardSelectorRequest) (*AssetNetworkSelectors, error)
	WatchAssets(context.Context, *WatchAssetsRequest) (*WatchAssetsResponse, error)
	FilterExternalExchangeSetting(context.Context, *ExternalExchangeSettingFilter) (*ExternalExchangeSettingsResponse, error)
	NewExternalExchangeSetting(context.Context, *ExternalExchangeSetting) (*ExternalExchangeSettingsResponse, error)
	UpdateExternalExchangeSetting(context.Context, *ExternalExchangeUpdateSettingRequest) (*ExternalExchangeSettingResponse, error)
	UpdateAssetSetting(context.Context, *UpdateAssetSettingRequest) (*UpdateAssetSettingResponse, error)
	AssetSetting(context.Context, *emptypb.Empty) (*AssetSettingResponse, error)
	// --------------------------------------------------
	// Treasury
	// --------------------------------------------------
	AddTreasury(context.Context, *AddTreasuryRequest) (*AddTreasuryResponse, error)
	GetTreasuryById(context.Context, *GetTreasuryByIdRequest) (*GetTreasuryByIdResponse, error)
	DeleteTreasury(context.Context, *DeleteTreasuryRequest) (*DeleteTreasuryResponse, error)
	UpdateTreasury(context.Context, *UpdateTreasuryRequest) (*UpdateTreasuryResponse, error)
	ListTreasury(context.Context, *ListTreasuryRequest) (*ListTreasuryResponse, error)
	UpdateExternalExchangeSettingByCSV(context.Context, *UpdateExternalExchangeSettingByCSVRequest) (*ExternalExchangeSettingsResponse, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (UnimplementedWalletServer) SelectConfig(context.Context, *emptypb.Empty) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectConfig not implemented")
}
func (UnimplementedWalletServer) CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedWalletServer) UpdateConfig(context.Context, *Config) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedWalletServer) DeleteConfig(context.Context, *Config) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfig not implemented")
}
func (UnimplementedWalletServer) DepositSanityCheck(context.Context, *DepositSanityRequest) (*DepositSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositSanityCheck not implemented")
}
func (UnimplementedWalletServer) WithdrawSanityCheck(context.Context, *WithdrawSanityRequest) (*WithdrawSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawSanityCheck not implemented")
}
func (UnimplementedWalletServer) AddAsset(context.Context, *AddAssetRequest) (*AddAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedWalletServer) UpdateAsset(context.Context, *UpdateAssetRequest) (*UpdateAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (UnimplementedWalletServer) ListAsset(context.Context, *ListAssetRequest) (*ListAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAsset not implemented")
}
func (UnimplementedWalletServer) ListUserAsset(context.Context, *emptypb.Empty) (*ListUserAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserAsset not implemented")
}
func (UnimplementedWalletServer) ListTinyAsset(context.Context, *ListTinyAssetRequest) (*ListTinyAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTinyAsset not implemented")
}
func (UnimplementedWalletServer) GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedWalletServer) UpdateAssetOrder(context.Context, *UpdateOrderAssetRequest) (*UpdateOrderAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetOrder not implemented")
}
func (UnimplementedWalletServer) GetAllAsset(context.Context, *emptypb.Empty) (*GetAllAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAsset not implemented")
}
func (UnimplementedWalletServer) AddNetwork(context.Context, *AddNetworkRequest) (*AddNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetwork not implemented")
}
func (UnimplementedWalletServer) UpdateNetwork(context.Context, *UpdateNetworkRequest) (*UpdateNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedWalletServer) ListNetwork(context.Context, *ListNetworkRequest) (*ListNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNetwork not implemented")
}
func (UnimplementedWalletServer) ListTinyNetwork(context.Context, *ListTinyNetworkRequest) (*ListTinyNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTinyNetwork not implemented")
}
func (UnimplementedWalletServer) GetNetwork(context.Context, *GetNetworkRequest) (*GetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedWalletServer) AddAssetNetwork(context.Context, *AddAssetNetworkRequest) (*AddAssetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetNetwork not implemented")
}
func (UnimplementedWalletServer) UpdateAssetNetwork(context.Context, *UpdateAssetNetworkRequest) (*UpdateAssetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetNetwork not implemented")
}
func (UnimplementedWalletServer) ListAssetNetwork(context.Context, *ListAssetNetworkRequest) (*ListAssetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssetNetwork not implemented")
}
func (UnimplementedWalletServer) GetAssetNetwork(context.Context, *GetAssetNetworkRequest) (*GetAssetNetworkResponseList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetNetwork not implemented")
}
func (UnimplementedWalletServer) FilterAssetNetwork(context.Context, *FilterAssetNetworkRequest) (*FilterAssetNetworkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAssetNetwork not implemented")
}
func (UnimplementedWalletServer) FilterAssetNetworkUser(context.Context, *FilterAssetNetworkRequest) (*FilterAssetNetworkUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterAssetNetworkUser not implemented")
}
func (UnimplementedWalletServer) GetAssetNetworkDepositMode(context.Context, *GetAssetNetworkDepositModeRequest) (*GetAssetNetworkDepositModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetNetworkDepositMode not implemented")
}
func (UnimplementedWalletServer) GetFullNodeAssetNetworkList(context.Context, *GetFullNodeAssetNetworkListRequest) (*GetFullNodeAssetNetworkListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullNodeAssetNetworkList not implemented")
}
func (UnimplementedWalletServer) CheckAssetNetworkFeeFairness(context.Context, *CheckAssetNetworkFeeFairnessRequest) (*CheckAssetNetworkFeeFairnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAssetNetworkFeeFairness not implemented")
}
func (UnimplementedWalletServer) AddBlacklist(context.Context, *AddBlacklistRequest) (*AddBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlacklist not implemented")
}
func (UnimplementedWalletServer) UpdateBlacklist(context.Context, *UpdateBlacklistRequest) (*UpdateBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBlacklist not implemented")
}
func (UnimplementedWalletServer) ListBlacklist(context.Context, *ListBlacklistRequest) (*ListBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlacklist not implemented")
}
func (UnimplementedWalletServer) GetBlacklist(context.Context, *GetBlacklistRequest) (*GetBlacklistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlacklist not implemented")
}
func (UnimplementedWalletServer) GetAssetNetworkSelectors(context.Context, *emptypb.Empty) (*AssetNetworkSelectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetNetworkSelectors not implemented")
}
func (UnimplementedWalletServer) UpdateAssetNetworkSelector(context.Context, *UpdateAssetNetworkSelectorRequest) (*AssetNetworkSelectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetNetworkSelector not implemented")
}
func (UnimplementedWalletServer) UpdateTokenStandardSelector(context.Context, *UpdateTokenStandardSelectorRequest) (*AssetNetworkSelectors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenStandardSelector not implemented")
}
func (UnimplementedWalletServer) WatchAssets(context.Context, *WatchAssetsRequest) (*WatchAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WatchAssets not implemented")
}
func (UnimplementedWalletServer) FilterExternalExchangeSetting(context.Context, *ExternalExchangeSettingFilter) (*ExternalExchangeSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterExternalExchangeSetting not implemented")
}
func (UnimplementedWalletServer) NewExternalExchangeSetting(context.Context, *ExternalExchangeSetting) (*ExternalExchangeSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewExternalExchangeSetting not implemented")
}
func (UnimplementedWalletServer) UpdateExternalExchangeSetting(context.Context, *ExternalExchangeUpdateSettingRequest) (*ExternalExchangeSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalExchangeSetting not implemented")
}
func (UnimplementedWalletServer) UpdateAssetSetting(context.Context, *UpdateAssetSettingRequest) (*UpdateAssetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssetSetting not implemented")
}
func (UnimplementedWalletServer) AssetSetting(context.Context, *emptypb.Empty) (*AssetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetSetting not implemented")
}
func (UnimplementedWalletServer) AddTreasury(context.Context, *AddTreasuryRequest) (*AddTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTreasury not implemented")
}
func (UnimplementedWalletServer) GetTreasuryById(context.Context, *GetTreasuryByIdRequest) (*GetTreasuryByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreasuryById not implemented")
}
func (UnimplementedWalletServer) DeleteTreasury(context.Context, *DeleteTreasuryRequest) (*DeleteTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTreasury not implemented")
}
func (UnimplementedWalletServer) UpdateTreasury(context.Context, *UpdateTreasuryRequest) (*UpdateTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTreasury not implemented")
}
func (UnimplementedWalletServer) ListTreasury(context.Context, *ListTreasuryRequest) (*ListTreasuryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTreasury not implemented")
}
func (UnimplementedWalletServer) UpdateExternalExchangeSettingByCSV(context.Context, *UpdateExternalExchangeSettingByCSVRequest) (*ExternalExchangeSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalExchangeSettingByCSV not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_SelectConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SelectConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/SelectConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SelectConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeleteConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Config)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeleteConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/DeleteConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeleteConfig(ctx, req.(*Config))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DepositSanityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DepositSanityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/DepositSanityCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DepositSanityCheck(ctx, req.(*DepositSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawSanityCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawSanityCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/WithdrawSanityCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawSanityCheck(ctx, req.(*WithdrawSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddAsset(ctx, req.(*AddAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset(ctx, req.(*UpdateAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListAsset(ctx, req.(*ListAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListUserAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListUserAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListUserAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListUserAsset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListTinyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTinyAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListTinyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListTinyAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListTinyAsset(ctx, req.(*ListTinyAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAssetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAssetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateAssetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAssetOrder(ctx, req.(*UpdateOrderAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAllAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAllAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetAllAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAllAsset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddNetwork(ctx, req.(*AddNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateNetwork(ctx, req.(*UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNetwork(ctx, req.(*ListNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListTinyNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTinyNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListTinyNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListTinyNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListTinyNetwork(ctx, req.(*ListTinyNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNetwork(ctx, req.(*GetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddAssetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAssetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddAssetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/AddAssetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddAssetNetwork(ctx, req.(*AddAssetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAssetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAssetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateAssetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAssetNetwork(ctx, req.(*UpdateAssetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListAssetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAssetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListAssetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListAssetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListAssetNetwork(ctx, req.(*ListAssetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetAssetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetNetwork(ctx, req.(*GetAssetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FilterAssetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAssetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FilterAssetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/FilterAssetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FilterAssetNetwork(ctx, req.(*FilterAssetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FilterAssetNetworkUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterAssetNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FilterAssetNetworkUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/FilterAssetNetworkUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FilterAssetNetworkUser(ctx, req.(*FilterAssetNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetNetworkDepositMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetNetworkDepositModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetNetworkDepositMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetAssetNetworkDepositMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetNetworkDepositMode(ctx, req.(*GetAssetNetworkDepositModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetFullNodeAssetNetworkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullNodeAssetNetworkListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetFullNodeAssetNetworkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetFullNodeAssetNetworkList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetFullNodeAssetNetworkList(ctx, req.(*GetFullNodeAssetNetworkListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CheckAssetNetworkFeeFairness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAssetNetworkFeeFairnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CheckAssetNetworkFeeFairness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/CheckAssetNetworkFeeFairness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CheckAssetNetworkFeeFairness(ctx, req.(*CheckAssetNetworkFeeFairnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/AddBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddBlacklist(ctx, req.(*AddBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateBlacklist(ctx, req.(*UpdateBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListBlacklist(ctx, req.(*ListBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlacklist(ctx, req.(*GetBlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetNetworkSelectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetNetworkSelectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetAssetNetworkSelectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetNetworkSelectors(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAssetNetworkSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetNetworkSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAssetNetworkSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateAssetNetworkSelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAssetNetworkSelector(ctx, req.(*UpdateAssetNetworkSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateTokenStandardSelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTokenStandardSelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateTokenStandardSelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateTokenStandardSelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateTokenStandardSelector(ctx, req.(*UpdateTokenStandardSelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WatchAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WatchAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WatchAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/WatchAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WatchAssets(ctx, req.(*WatchAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FilterExternalExchangeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalExchangeSettingFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FilterExternalExchangeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/FilterExternalExchangeSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FilterExternalExchangeSetting(ctx, req.(*ExternalExchangeSettingFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_NewExternalExchangeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalExchangeSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).NewExternalExchangeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/NewExternalExchangeSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).NewExternalExchangeSetting(ctx, req.(*ExternalExchangeSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateExternalExchangeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalExchangeUpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateExternalExchangeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateExternalExchangeSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateExternalExchangeSetting(ctx, req.(*ExternalExchangeUpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAssetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAssetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateAssetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAssetSetting(ctx, req.(*UpdateAssetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AssetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AssetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/AssetSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AssetSetting(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/AddTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddTreasury(ctx, req.(*AddTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTreasuryById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTreasuryByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTreasuryById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/GetTreasuryById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTreasuryById(ctx, req.(*GetTreasuryByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeleteTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeleteTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/DeleteTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeleteTreasury(ctx, req.(*DeleteTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateTreasury(ctx, req.(*UpdateTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListTreasury_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTreasuryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListTreasury(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/ListTreasury",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListTreasury(ctx, req.(*ListTreasuryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateExternalExchangeSettingByCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalExchangeSettingByCSVRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateExternalExchangeSettingByCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet.Wallet/UpdateExternalExchangeSettingByCSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateExternalExchangeSettingByCSV(ctx, req.(*UpdateExternalExchangeSettingByCSVRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.wallet.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectConfig",
			Handler:    _Wallet_SelectConfig_Handler,
		},
		{
			MethodName: "CreateConfig",
			Handler:    _Wallet_CreateConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _Wallet_UpdateConfig_Handler,
		},
		{
			MethodName: "DeleteConfig",
			Handler:    _Wallet_DeleteConfig_Handler,
		},
		{
			MethodName: "DepositSanityCheck",
			Handler:    _Wallet_DepositSanityCheck_Handler,
		},
		{
			MethodName: "WithdrawSanityCheck",
			Handler:    _Wallet_WithdrawSanityCheck_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _Wallet_AddAsset_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Wallet_UpdateAsset_Handler,
		},
		{
			MethodName: "ListAsset",
			Handler:    _Wallet_ListAsset_Handler,
		},
		{
			MethodName: "ListUserAsset",
			Handler:    _Wallet_ListUserAsset_Handler,
		},
		{
			MethodName: "ListTinyAsset",
			Handler:    _Wallet_ListTinyAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _Wallet_GetAsset_Handler,
		},
		{
			MethodName: "UpdateAssetOrder",
			Handler:    _Wallet_UpdateAssetOrder_Handler,
		},
		{
			MethodName: "GetAllAsset",
			Handler:    _Wallet_GetAllAsset_Handler,
		},
		{
			MethodName: "AddNetwork",
			Handler:    _Wallet_AddNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _Wallet_UpdateNetwork_Handler,
		},
		{
			MethodName: "ListNetwork",
			Handler:    _Wallet_ListNetwork_Handler,
		},
		{
			MethodName: "ListTinyNetwork",
			Handler:    _Wallet_ListTinyNetwork_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _Wallet_GetNetwork_Handler,
		},
		{
			MethodName: "AddAssetNetwork",
			Handler:    _Wallet_AddAssetNetwork_Handler,
		},
		{
			MethodName: "UpdateAssetNetwork",
			Handler:    _Wallet_UpdateAssetNetwork_Handler,
		},
		{
			MethodName: "ListAssetNetwork",
			Handler:    _Wallet_ListAssetNetwork_Handler,
		},
		{
			MethodName: "GetAssetNetwork",
			Handler:    _Wallet_GetAssetNetwork_Handler,
		},
		{
			MethodName: "FilterAssetNetwork",
			Handler:    _Wallet_FilterAssetNetwork_Handler,
		},
		{
			MethodName: "FilterAssetNetworkUser",
			Handler:    _Wallet_FilterAssetNetworkUser_Handler,
		},
		{
			MethodName: "GetAssetNetworkDepositMode",
			Handler:    _Wallet_GetAssetNetworkDepositMode_Handler,
		},
		{
			MethodName: "GetFullNodeAssetNetworkList",
			Handler:    _Wallet_GetFullNodeAssetNetworkList_Handler,
		},
		{
			MethodName: "CheckAssetNetworkFeeFairness",
			Handler:    _Wallet_CheckAssetNetworkFeeFairness_Handler,
		},
		{
			MethodName: "AddBlacklist",
			Handler:    _Wallet_AddBlacklist_Handler,
		},
		{
			MethodName: "UpdateBlacklist",
			Handler:    _Wallet_UpdateBlacklist_Handler,
		},
		{
			MethodName: "ListBlacklist",
			Handler:    _Wallet_ListBlacklist_Handler,
		},
		{
			MethodName: "GetBlacklist",
			Handler:    _Wallet_GetBlacklist_Handler,
		},
		{
			MethodName: "GetAssetNetworkSelectors",
			Handler:    _Wallet_GetAssetNetworkSelectors_Handler,
		},
		{
			MethodName: "UpdateAssetNetworkSelector",
			Handler:    _Wallet_UpdateAssetNetworkSelector_Handler,
		},
		{
			MethodName: "UpdateTokenStandardSelector",
			Handler:    _Wallet_UpdateTokenStandardSelector_Handler,
		},
		{
			MethodName: "WatchAssets",
			Handler:    _Wallet_WatchAssets_Handler,
		},
		{
			MethodName: "FilterExternalExchangeSetting",
			Handler:    _Wallet_FilterExternalExchangeSetting_Handler,
		},
		{
			MethodName: "NewExternalExchangeSetting",
			Handler:    _Wallet_NewExternalExchangeSetting_Handler,
		},
		{
			MethodName: "UpdateExternalExchangeSetting",
			Handler:    _Wallet_UpdateExternalExchangeSetting_Handler,
		},
		{
			MethodName: "UpdateAssetSetting",
			Handler:    _Wallet_UpdateAssetSetting_Handler,
		},
		{
			MethodName: "AssetSetting",
			Handler:    _Wallet_AssetSetting_Handler,
		},
		{
			MethodName: "AddTreasury",
			Handler:    _Wallet_AddTreasury_Handler,
		},
		{
			MethodName: "GetTreasuryById",
			Handler:    _Wallet_GetTreasuryById_Handler,
		},
		{
			MethodName: "DeleteTreasury",
			Handler:    _Wallet_DeleteTreasury_Handler,
		},
		{
			MethodName: "UpdateTreasury",
			Handler:    _Wallet_UpdateTreasury_Handler,
		},
		{
			MethodName: "ListTreasury",
			Handler:    _Wallet_ListTreasury_Handler,
		},
		{
			MethodName: "UpdateExternalExchangeSettingByCSV",
			Handler:    _Wallet_UpdateExternalExchangeSettingByCSV_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet/services.proto",
}
