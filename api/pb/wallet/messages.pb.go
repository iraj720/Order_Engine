// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: wallet/messages.proto

package wallet

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "rabex/api/pb/commons"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DepositSanity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWaitingForAdmin   bool                    `protobuf:"varint,2,opt,name=is_waiting_for_admin,json=isWaitingForAdmin,proto3" json:"is_waiting_for_admin,omitempty"`
	TreasuryId          string                  `protobuf:"bytes,3,opt,name=treasury_id,json=treasuryId,proto3" json:"treasury_id,omitempty"`
	ChannelId           string                  `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Asset               string                  `protobuf:"bytes,6,opt,name=asset,proto3" json:"asset,omitempty"`
	Network             string                  `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Type                TreasuryType            `protobuf:"varint,9,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
	DepositAddressIndex string                  `protobuf:"bytes,10,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
	Mode                AssetNetworkDepositMode `protobuf:"varint,11,opt,name=mode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"mode,omitempty"`
}

func (x *DepositSanity) Reset() {
	*x = DepositSanity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositSanity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSanity) ProtoMessage() {}

func (x *DepositSanity) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSanity.ProtoReflect.Descriptor instead.
func (*DepositSanity) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{0}
}

func (x *DepositSanity) GetIsWaitingForAdmin() bool {
	if x != nil {
		return x.IsWaitingForAdmin
	}
	return false
}

func (x *DepositSanity) GetTreasuryId() string {
	if x != nil {
		return x.TreasuryId
	}
	return ""
}

func (x *DepositSanity) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *DepositSanity) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *DepositSanity) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DepositSanity) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

func (x *DepositSanity) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

func (x *DepositSanity) GetMode() AssetNetworkDepositMode {
	if x != nil {
		return x.Mode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

type DepositSanityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Network  string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Memo     string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	Quantity string `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *DepositSanityRequest) Reset() {
	*x = DepositSanityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositSanityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSanityRequest) ProtoMessage() {}

func (x *DepositSanityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSanityRequest.ProtoReflect.Descriptor instead.
func (*DepositSanityRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{1}
}

func (x *DepositSanityRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *DepositSanityRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *DepositSanityRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *DepositSanityRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *DepositSanityRequest) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

type DepositSanityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *DepositSanity `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DepositSanityResponse) Reset() {
	*x = DepositSanityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositSanityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositSanityResponse) ProtoMessage() {}

func (x *DepositSanityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositSanityResponse.ProtoReflect.Descriptor instead.
func (*DepositSanityResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{2}
}

func (x *DepositSanityResponse) GetData() *DepositSanity {
	if x != nil {
		return x.Data
	}
	return nil
}

type WithdrawSanity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsWaitingForAdmin    bool                     `protobuf:"varint,2,opt,name=is_waiting_for_admin,json=isWaitingForAdmin,proto3" json:"is_waiting_for_admin,omitempty"`
	TreasuryId           string                   `protobuf:"bytes,3,opt,name=treasury_id,json=treasuryId,proto3" json:"treasury_id,omitempty"`
	ChannelId            string                   `protobuf:"bytes,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	WithdrawFee          string                   `protobuf:"bytes,5,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	Asset                string                   `protobuf:"bytes,6,opt,name=asset,proto3" json:"asset,omitempty"`
	Network              string                   `protobuf:"bytes,7,opt,name=network,proto3" json:"network,omitempty"`
	Type                 TreasuryType             `protobuf:"varint,9,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
	Mode                 AssetNetworkWithdrawMode `protobuf:"varint,10,opt,name=mode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"mode,omitempty"`
	WithdrawAddressIndex string                   `protobuf:"bytes,11,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
}

func (x *WithdrawSanity) Reset() {
	*x = WithdrawSanity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawSanity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSanity) ProtoMessage() {}

func (x *WithdrawSanity) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSanity.ProtoReflect.Descriptor instead.
func (*WithdrawSanity) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{3}
}

func (x *WithdrawSanity) GetIsWaitingForAdmin() bool {
	if x != nil {
		return x.IsWaitingForAdmin
	}
	return false
}

func (x *WithdrawSanity) GetTreasuryId() string {
	if x != nil {
		return x.TreasuryId
	}
	return ""
}

func (x *WithdrawSanity) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *WithdrawSanity) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *WithdrawSanity) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *WithdrawSanity) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *WithdrawSanity) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

func (x *WithdrawSanity) GetMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.Mode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *WithdrawSanity) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

type WithdrawSanityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset    string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Network  string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	Address  string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Memo     string `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
	Quantity string `protobuf:"bytes,5,opt,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *WithdrawSanityRequest) Reset() {
	*x = WithdrawSanityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawSanityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSanityRequest) ProtoMessage() {}

func (x *WithdrawSanityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSanityRequest.ProtoReflect.Descriptor instead.
func (*WithdrawSanityRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{4}
}

func (x *WithdrawSanityRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *WithdrawSanityRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *WithdrawSanityRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WithdrawSanityRequest) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *WithdrawSanityRequest) GetQuantity() string {
	if x != nil {
		return x.Quantity
	}
	return ""
}

type WithdrawSanityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *WithdrawSanity `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *WithdrawSanityResponse) Reset() {
	*x = WithdrawSanityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawSanityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawSanityResponse) ProtoMessage() {}

func (x *WithdrawSanityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawSanityResponse.ProtoReflect.Descriptor instead.
func (*WithdrawSanityResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{5}
}

func (x *WithdrawSanityResponse) GetData() *WithdrawSanity {
	if x != nil {
		return x.Data
	}
	return nil
}

type SimpleSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Base    string `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Quote   string `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
}

func (x *SimpleSelector) Reset() {
	*x = SimpleSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSelector) ProtoMessage() {}

func (x *SimpleSelector) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSelector.ProtoReflect.Descriptor instead.
func (*SimpleSelector) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{6}
}

func (x *SimpleSelector) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SimpleSelector) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *SimpleSelector) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *SimpleSelector) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type FiatSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     // Bitcoin
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // BTC
}

func (x *FiatSelector) Reset() {
	*x = FiatSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatSelector) ProtoMessage() {}

func (x *FiatSelector) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatSelector.ProtoReflect.Descriptor instead.
func (*FiatSelector) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{7}
}

func (x *FiatSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FiatSelector) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // Bitcoin
	FromSymbol  string         `protobuf:"bytes,2,opt,name=from_symbol,json=fromSymbol,proto3" json:"from_symbol,omitempty"` // BTC
	LogoUrl     string         `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	SubSelector []*SubSelector `protobuf:"bytes,4,rep,name=sub_selector,json=subSelector,proto3" json:"sub_selector,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{8}
}

func (x *Selector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Selector) GetFromSymbol() string {
	if x != nil {
		return x.FromSymbol
	}
	return ""
}

func (x *Selector) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Selector) GetSubSelector() []*SubSelector {
	if x != nil {
		return x.SubSelector
	}
	return nil
}

type SubSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // Bitcoin
	ToSymbol string `protobuf:"bytes,2,opt,name=to_symbol,json=toSymbol,proto3" json:"to_symbol,omitempty"` // BTC
	LogoUrl  string `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	BuyDesc  string `protobuf:"bytes,7,opt,name=buy_desc,json=buyDesc,proto3" json:"buy_desc,omitempty"`
	SellDesc string `protobuf:"bytes,8,opt,name=sell_desc,json=sellDesc,proto3" json:"sell_desc,omitempty"`
	MinSell  string `protobuf:"bytes,9,opt,name=min_sell,json=minSell,proto3" json:"min_sell,omitempty"`
	MaxSell  string `protobuf:"bytes,10,opt,name=max_sell,json=maxSell,proto3" json:"max_sell,omitempty"`
	MinBuy   string `protobuf:"bytes,11,opt,name=min_buy,json=minBuy,proto3" json:"min_buy,omitempty"`
	MaxBuy   string `protobuf:"bytes,12,opt,name=max_buy,json=maxBuy,proto3" json:"max_buy,omitempty"`
}

func (x *SubSelector) Reset() {
	*x = SubSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSelector) ProtoMessage() {}

func (x *SubSelector) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSelector.ProtoReflect.Descriptor instead.
func (*SubSelector) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{9}
}

func (x *SubSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubSelector) GetToSymbol() string {
	if x != nil {
		return x.ToSymbol
	}
	return ""
}

func (x *SubSelector) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *SubSelector) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *SubSelector) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *SubSelector) GetMinSell() string {
	if x != nil {
		return x.MinSell
	}
	return ""
}

func (x *SubSelector) GetMaxSell() string {
	if x != nil {
		return x.MaxSell
	}
	return ""
}

func (x *SubSelector) GetMinBuy() string {
	if x != nil {
		return x.MinBuy
	}
	return ""
}

func (x *SubSelector) GetMaxBuy() string {
	if x != nil {
		return x.MaxBuy
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Desc   bool  `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"` // descending
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{10}
}

func (x *Pagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

type AddNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameEn              string      `protobuf:"bytes,1,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa              string      `protobuf:"bytes,2,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol              Symbol      `protobuf:"varint,3,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard       string      `protobuf:"bytes,4,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus       GrpcBoolean `protobuf:"varint,5,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	WithdrawStatus      GrpcBoolean `protobuf:"varint,6,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	WalletRegex         string      `protobuf:"bytes,7,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer            string      `protobuf:"bytes,8,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo                GrpcBoolean `protobuf:"varint,9,opt,name=memo,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"memo,omitempty"`
	MemoRegex           string      `protobuf:"bytes,10,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips         string      `protobuf:"bytes,11,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc         string      `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc        string      `protobuf:"bytes,13,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips        string      `protobuf:"bytes,14,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation     string      `protobuf:"bytes,15,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	DepositAddressIndex string      `protobuf:"bytes,16,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *AddNetworkRequest) Reset() {
	*x = AddNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkRequest) ProtoMessage() {}

func (x *AddNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkRequest.ProtoReflect.Descriptor instead.
func (*AddNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{11}
}

func (x *AddNetworkRequest) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *AddNetworkRequest) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *AddNetworkRequest) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AddNetworkRequest) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *AddNetworkRequest) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddNetworkRequest) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddNetworkRequest) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *AddNetworkRequest) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *AddNetworkRequest) GetMemo() GrpcBoolean {
	if x != nil {
		return x.Memo
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddNetworkRequest) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *AddNetworkRequest) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *AddNetworkRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddNetworkRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddNetworkRequest) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *AddNetworkRequest) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *AddNetworkRequest) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type AddNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AddNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddNetworkResponse) Reset() {
	*x = AddNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkResponse) ProtoMessage() {}

func (x *AddNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkResponse.ProtoReflect.Descriptor instead.
func (*AddNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{12}
}

func (x *AddNetworkResponse) GetData() *AddNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //required
	NameEn              string      `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa              string      `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	DepositStatus       GrpcBoolean `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	WithdrawStatus      GrpcBoolean `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	WalletRegex         string      `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer            string      `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo                GrpcBoolean `protobuf:"varint,10,opt,name=memo,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"memo,omitempty"`
	MemoRegex           string      `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips         string      `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc         string      `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc        string      `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips        string      `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation     string      `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	DepositAddressIndex string      `protobuf:"bytes,17,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *UpdateNetworkRequest) Reset() {
	*x = UpdateNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkRequest) ProtoMessage() {}

func (x *UpdateNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateNetworkRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNetworkRequest) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateNetworkRequest) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *UpdateNetworkRequest) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateNetworkRequest) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateNetworkRequest) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *UpdateNetworkRequest) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *UpdateNetworkRequest) GetMemo() GrpcBoolean {
	if x != nil {
		return x.Memo
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateNetworkRequest) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *UpdateNetworkRequest) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *UpdateNetworkRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateNetworkRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateNetworkRequest) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *UpdateNetworkRequest) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *UpdateNetworkRequest) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type UpdateNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UpdateNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateNetworkResponse) Reset() {
	*x = UpdateNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkResponse) ProtoMessage() {}

func (x *UpdateNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkResponse.ProtoReflect.Descriptor instead.
func (*UpdateNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateNetworkResponse) GetData() *UpdateNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TokenStandard string      `protobuf:"bytes,2,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	Pagination    *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WithCsv       bool        `protobuf:"varint,4,opt,name=with_csv,json=withCsv,proto3" json:"with_csv,omitempty"`
}

func (x *ListNetworkRequest) Reset() {
	*x = ListNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkRequest) ProtoMessage() {}

func (x *ListNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkRequest.ProtoReflect.Descriptor instead.
func (*ListNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{15}
}

func (x *ListNetworkRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListNetworkRequest) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *ListNetworkRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListNetworkRequest) GetWithCsv() bool {
	if x != nil {
		return x.WithCsv
	}
	return false
}

type ListNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListNetworkResponse) Reset() {
	*x = ListNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkResponse) ProtoMessage() {}

func (x *ListNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkResponse.ProtoReflect.Descriptor instead.
func (*ListNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{16}
}

func (x *ListNetworkResponse) GetData() *ListNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetNetworkRequest) Reset() {
	*x = GetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkRequest) ProtoMessage() {}

func (x *GetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{17}
}

func (x *GetNetworkRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetNetworkResponse) Reset() {
	*x = GetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkResponse) ProtoMessage() {}

func (x *GetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{18}
}

func (x *GetNetworkResponse) GetData() *GetNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameEn             string      `protobuf:"bytes,1,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa             string      `protobuf:"bytes,2,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol             Symbol      `protobuf:"varint,3,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	Logo               string      `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus      GrpcBoolean `protobuf:"varint,5,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	WithdrawStatus     GrpcBoolean `protobuf:"varint,6,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	DepositDesc        string      `protobuf:"bytes,7,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc       string      `protobuf:"bytes,8,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	ExchangeTreasuryId string      `protobuf:"bytes,9,opt,name=exchange_treasury_id,json=exchangeTreasuryId,proto3" json:"exchange_treasury_id,omitempty"` // required
	ExchangeChannel    string      `protobuf:"bytes,10,opt,name=exchange_channel,json=exchangeChannel,proto3" json:"exchange_channel,omitempty"`
	BalanceUpperLimit  string      `protobuf:"bytes,11,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit  string      `protobuf:"bytes,12,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
}

func (x *AddAssetRequest) Reset() {
	*x = AddAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetRequest) ProtoMessage() {}

func (x *AddAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetRequest.ProtoReflect.Descriptor instead.
func (*AddAssetRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{19}
}

func (x *AddAssetRequest) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *AddAssetRequest) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *AddAssetRequest) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AddAssetRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AddAssetRequest) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetRequest) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddAssetRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddAssetRequest) GetExchangeTreasuryId() string {
	if x != nil {
		return x.ExchangeTreasuryId
	}
	return ""
}

func (x *AddAssetRequest) GetExchangeChannel() string {
	if x != nil {
		return x.ExchangeChannel
	}
	return ""
}

func (x *AddAssetRequest) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *AddAssetRequest) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

type AddAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AddAssetResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddAssetResponse) Reset() {
	*x = AddAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetResponse) ProtoMessage() {}

func (x *AddAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetResponse.ProtoReflect.Descriptor instead.
func (*AddAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{20}
}

func (x *AddAssetResponse) GetData() *AddAssetResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` //required
	NameEn             string      `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa             string      `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Logo               string      `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus      GrpcBoolean `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	WithdrawStatus     GrpcBoolean `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	DepositDesc        string      `protobuf:"bytes,8,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc       string      `protobuf:"bytes,9,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	ExchangeTreasuryId string      `protobuf:"bytes,10,opt,name=exchange_treasury_id,json=exchangeTreasuryId,proto3" json:"exchange_treasury_id,omitempty"` //required
	ExchangeChannel    string      `protobuf:"bytes,11,opt,name=exchange_channel,json=exchangeChannel,proto3" json:"exchange_channel,omitempty"`
	BalanceUpperLimit  string      `protobuf:"bytes,12,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit  string      `protobuf:"bytes,13,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
}

func (x *UpdateAssetRequest) Reset() {
	*x = UpdateAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetRequest) ProtoMessage() {}

func (x *UpdateAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateAssetRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssetRequest) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateAssetRequest) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *UpdateAssetRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdateAssetRequest) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetRequest) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateAssetRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateAssetRequest) GetExchangeTreasuryId() string {
	if x != nil {
		return x.ExchangeTreasuryId
	}
	return ""
}

func (x *UpdateAssetRequest) GetExchangeChannel() string {
	if x != nil {
		return x.ExchangeChannel
	}
	return ""
}

func (x *UpdateAssetRequest) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *UpdateAssetRequest) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

type UpdateAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UpdateAssetResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateAssetResponse) Reset() {
	*x = UpdateAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetResponse) ProtoMessage() {}

func (x *UpdateAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetResponse.ProtoReflect.Descriptor instead.
func (*UpdateAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateAssetResponse) GetData() *UpdateAssetResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *Pagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WithCsv    bool        `protobuf:"varint,3,opt,name=with_csv,json=withCsv,proto3" json:"with_csv,omitempty"`
}

func (x *ListAssetRequest) Reset() {
	*x = ListAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetRequest) ProtoMessage() {}

func (x *ListAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetRequest.ProtoReflect.Descriptor instead.
func (*ListAssetRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{23}
}

func (x *ListAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListAssetRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListAssetRequest) GetWithCsv() bool {
	if x != nil {
		return x.WithCsv
	}
	return false
}

type ListAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListAssetResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListAssetResponse) Reset() {
	*x = ListAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetResponse) ProtoMessage() {}

func (x *ListAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetResponse.ProtoReflect.Descriptor instead.
func (*ListAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{24}
}

func (x *ListAssetResponse) GetData() *ListAssetResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type FilterAssetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetSymbol string `protobuf:"bytes,1,opt,name=asset_symbol,json=assetSymbol,proto3" json:"asset_symbol,omitempty"`
}

func (x *FilterAssetNetworkRequest) Reset() {
	*x = FilterAssetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkRequest) ProtoMessage() {}

func (x *FilterAssetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkRequest.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{25}
}

func (x *FilterAssetNetworkRequest) GetAssetSymbol() string {
	if x != nil {
		return x.AssetSymbol
	}
	return ""
}

type FilterAssetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FilterAssetNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FilterAssetNetworkResponse) Reset() {
	*x = FilterAssetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkResponse) ProtoMessage() {}

func (x *FilterAssetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkResponse.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{26}
}

func (x *FilterAssetNetworkResponse) GetData() *FilterAssetNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type FilterAssetNetworkUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *FilterAssetNetworkUserResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FilterAssetNetworkUserResponse) Reset() {
	*x = FilterAssetNetworkUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkUserResponse) ProtoMessage() {}

func (x *FilterAssetNetworkUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkUserResponse.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkUserResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{27}
}

func (x *FilterAssetNetworkUserResponse) GetData() *FilterAssetNetworkUserResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateOrderAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*UpdateOrderAssetRequest_UpdateAsset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *UpdateOrderAssetRequest) Reset() {
	*x = UpdateOrderAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderAssetRequest) ProtoMessage() {}

func (x *UpdateOrderAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderAssetRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderAssetRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateOrderAssetRequest) GetAssets() []*UpdateOrderAssetRequest_UpdateAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type UpdateOrderAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*UpdateOrderAssetResponse_UpdatedAsset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *UpdateOrderAssetResponse) Reset() {
	*x = UpdateOrderAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderAssetResponse) ProtoMessage() {}

func (x *UpdateOrderAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderAssetResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateOrderAssetResponse) GetAssets() []*UpdateOrderAssetResponse_UpdatedAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type GetAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssetRequest) Reset() {
	*x = GetAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetRequest) ProtoMessage() {}

func (x *GetAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetRequest.ProtoReflect.Descriptor instead.
func (*GetAssetRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{30}
}

func (x *GetAssetRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type WatchAssetsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []string `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *WatchAssetsRequest) Reset() {
	*x = WatchAssetsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAssetsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAssetsRequest) ProtoMessage() {}

func (x *WatchAssetsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAssetsRequest.ProtoReflect.Descriptor instead.
func (*WatchAssetsRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{31}
}

func (x *WatchAssetsRequest) GetAssets() []string {
	if x != nil {
		return x.Assets
	}
	return nil
}

type WatchAssetsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WatchAssetsResponse) Reset() {
	*x = WatchAssetsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchAssetsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchAssetsResponse) ProtoMessage() {}

func (x *WatchAssetsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchAssetsResponse.ProtoReflect.Descriptor instead.
func (*WatchAssetsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{32}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalExchangeTicker uint64 `protobuf:"varint,2,opt,name=external_exchange_ticker,json=externalExchangeTicker,proto3" json:"external_exchange_ticker,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{33}
}

func (x *Config) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Config) GetExternalExchangeTicker() uint64 {
	if x != nil {
		return x.ExternalExchangeTicker
	}
	return 0
}

type CreateConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExternalExchangeTicker uint64 `protobuf:"varint,2,opt,name=external_exchange_ticker,json=externalExchangeTicker,proto3" json:"external_exchange_ticker,omitempty"`
}

func (x *CreateConfigRequest) Reset() {
	*x = CreateConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigRequest) ProtoMessage() {}

func (x *CreateConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateConfigRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{34}
}

func (x *CreateConfigRequest) GetExternalExchangeTicker() uint64 {
	if x != nil {
		return x.ExternalExchangeTicker
	}
	return 0
}

type CreateConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Config `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateConfigResponse) Reset() {
	*x = CreateConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateConfigResponse) ProtoMessage() {}

func (x *CreateConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateConfigResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{35}
}

func (x *CreateConfigResponse) GetData() *Config {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetAssetResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAssetResponse) Reset() {
	*x = GetAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetResponse) ProtoMessage() {}

func (x *GetAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetResponse.ProtoReflect.Descriptor instead.
func (*GetAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{36}
}

func (x *GetAssetResponse) GetData() *GetAssetResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddAssetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithdrawDesc              string                   `protobuf:"bytes,1,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	AssetId                   uint64                   `protobuf:"varint,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	NetworkId                 uint64                   `protobuf:"varint,3,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	DepositStatus             GrpcBoolean              `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	MinDeposit                string                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            GrpcBoolean              `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	MinWithdraw               string                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawSpecialTips       string                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	WithdrawSoftTips          string                   `protobuf:"bytes,20,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	FeeMultiplier             string                   `protobuf:"bytes,21,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 GrpcBoolean              `protobuf:"varint,22,opt,name=is_default,json=isDefault,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"is_default,omitempty"`
	WithdrawAddressId         string                   `protobuf:"bytes,23,opt,name=withdraw_address_id,json=withdrawAddressId,proto3" json:"withdraw_address_id,omitempty"`
	DepositAddressId          string                   `protobuf:"bytes,24,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	BalanceUpperLimit         string                   `protobuf:"bytes,26,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                   `protobuf:"bytes,27,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawPrecision         int32                    `protobuf:"varint,28,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                    `protobuf:"varint,29,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawChannelId         string                   `protobuf:"bytes,30,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"`
	DepositMode               AssetNetworkDepositMode  `protobuf:"varint,31,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode `protobuf:"varint,32,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawAddressIndex      string                   `protobuf:"bytes,33,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	WithdrawFullNodeSupported GrpcBoolean              `protobuf:"varint,34,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  GrpcBoolean              `protobuf:"varint,35,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                   `protobuf:"bytes,36,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                   `protobuf:"bytes,37,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
}

func (x *AddAssetNetworkRequest) Reset() {
	*x = AddAssetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetNetworkRequest) ProtoMessage() {}

func (x *AddAssetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetNetworkRequest.ProtoReflect.Descriptor instead.
func (*AddAssetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{37}
}

func (x *AddAssetNetworkRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *AddAssetNetworkRequest) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *AddAssetNetworkRequest) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetIsDefault() GrpcBoolean {
	if x != nil {
		return x.IsDefault
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetWithdrawAddressId() string {
	if x != nil {
		return x.WithdrawAddressId
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetDepositAddressId() string {
	if x != nil {
		return x.DepositAddressId
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *AddAssetNetworkRequest) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *AddAssetNetworkRequest) GetWithdrawChannelId() string {
	if x != nil {
		return x.WithdrawChannelId
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetWithdrawFullNodeSupported() GrpcBoolean {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetDepositFullNodeSupported() GrpcBoolean {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AddAssetNetworkRequest) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *AddAssetNetworkRequest) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

type AddAssetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AddAssetNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddAssetNetworkResponse) Reset() {
	*x = AddAssetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetNetworkResponse) ProtoMessage() {}

func (x *AddAssetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetNetworkResponse.ProtoReflect.Descriptor instead.
func (*AddAssetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{38}
}

func (x *AddAssetNetworkResponse) GetData() *AddAssetNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAssetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WithdrawSoftTips          string                   `protobuf:"bytes,2,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	WithdrawDesc              string                   `protobuf:"bytes,3,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	DepositStatus             GrpcBoolean              `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	MinDeposit                string                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            GrpcBoolean              `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	MinWithdraw               string                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawChannel           string                   `protobuf:"bytes,18,opt,name=withdraw_channel,json=withdrawChannel,proto3" json:"withdraw_channel,omitempty"`
	WithdrawSpecialTips       string                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	FeeMultiplier             string                   `protobuf:"bytes,22,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 GrpcBoolean              `protobuf:"varint,23,opt,name=is_default,json=isDefault,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"is_default,omitempty"`
	WithdrawAddressId         string                   `protobuf:"bytes,24,opt,name=withdraw_address_id,json=withdrawAddressId,proto3" json:"withdraw_address_id,omitempty"`
	DepositAddressId          string                   `protobuf:"bytes,25,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	BalanceUpperLimit         string                   `protobuf:"bytes,27,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                   `protobuf:"bytes,28,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawPrecision         int32                    `protobuf:"varint,29,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                    `protobuf:"varint,30,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawChannelId         string                   `protobuf:"bytes,31,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"`
	DepositMode               AssetNetworkDepositMode  `protobuf:"varint,32,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode `protobuf:"varint,33,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawAddressIndex      string                   `protobuf:"bytes,34,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	WithdrawFullNodeSupported GrpcBoolean              `protobuf:"varint,35,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  GrpcBoolean              `protobuf:"varint,36,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                   `protobuf:"bytes,37,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                   `protobuf:"bytes,38,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
}

func (x *UpdateAssetNetworkRequest) Reset() {
	*x = UpdateAssetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetNetworkRequest) ProtoMessage() {}

func (x *UpdateAssetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetNetworkRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateAssetNetworkRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssetNetworkRequest) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawChannel() string {
	if x != nil {
		return x.WithdrawChannel
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetIsDefault() GrpcBoolean {
	if x != nil {
		return x.IsDefault
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetWithdrawAddressId() string {
	if x != nil {
		return x.WithdrawAddressId
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositAddressId() string {
	if x != nil {
		return x.DepositAddressId
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *UpdateAssetNetworkRequest) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *UpdateAssetNetworkRequest) GetWithdrawChannelId() string {
	if x != nil {
		return x.WithdrawChannelId
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetWithdrawFullNodeSupported() GrpcBoolean {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetDepositFullNodeSupported() GrpcBoolean {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *UpdateAssetNetworkRequest) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *UpdateAssetNetworkRequest) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

type UpdateAssetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UpdateAssetNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateAssetNetworkResponse) Reset() {
	*x = UpdateAssetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetNetworkResponse) ProtoMessage() {}

func (x *UpdateAssetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetNetworkResponse.ProtoReflect.Descriptor instead.
func (*UpdateAssetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{40}
}

func (x *UpdateAssetNetworkResponse) GetData() *UpdateAssetNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListAssetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetSymbol   string      `protobuf:"bytes,1,opt,name=asset_symbol,json=assetSymbol,proto3" json:"asset_symbol,omitempty"`
	TokenStandard string      `protobuf:"bytes,2,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	Pagination    *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WithCsv       bool        `protobuf:"varint,4,opt,name=with_csv,json=withCsv,proto3" json:"with_csv,omitempty"`
}

func (x *ListAssetNetworkRequest) Reset() {
	*x = ListAssetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetNetworkRequest) ProtoMessage() {}

func (x *ListAssetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetNetworkRequest.ProtoReflect.Descriptor instead.
func (*ListAssetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{41}
}

func (x *ListAssetNetworkRequest) GetAssetSymbol() string {
	if x != nil {
		return x.AssetSymbol
	}
	return ""
}

func (x *ListAssetNetworkRequest) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *ListAssetNetworkRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListAssetNetworkRequest) GetWithCsv() bool {
	if x != nil {
		return x.WithCsv
	}
	return false
}

type ListAssetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListAssetNetworkResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListAssetNetworkResponse) Reset() {
	*x = ListAssetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetNetworkResponse) ProtoMessage() {}

func (x *ListAssetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetNetworkResponse.ProtoReflect.Descriptor instead.
func (*ListAssetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{42}
}

func (x *ListAssetNetworkResponse) GetData() *ListAssetNetworkResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssetNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssetNetworkRequest) Reset() {
	*x = GetAssetNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetNetworkRequest) ProtoMessage() {}

func (x *GetAssetNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetNetworkRequest.ProtoReflect.Descriptor instead.
func (*GetAssetNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{43}
}

func (x *GetAssetNetworkRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAssetNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AssetNetwork `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAssetNetworkResponse) Reset() {
	*x = GetAssetNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetNetworkResponse) ProtoMessage() {}

func (x *GetAssetNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetNetworkResponse.ProtoReflect.Descriptor instead.
func (*GetAssetNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{44}
}

func (x *GetAssetNetworkResponse) GetData() *AssetNetwork {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssetNetworkResponseList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetNetworkList *AssetNetworkList `protobuf:"bytes,1,opt,name=asset_network_list,json=assetNetworkList,proto3" json:"asset_network_list,omitempty"`
}

func (x *GetAssetNetworkResponseList) Reset() {
	*x = GetAssetNetworkResponseList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetNetworkResponseList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetNetworkResponseList) ProtoMessage() {}

func (x *GetAssetNetworkResponseList) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetNetworkResponseList.ProtoReflect.Descriptor instead.
func (*GetAssetNetworkResponseList) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{45}
}

func (x *GetAssetNetworkResponseList) GetAssetNetworkList() *AssetNetworkList {
	if x != nil {
		return x.AssetNetworkList
	}
	return nil
}

type AssetNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AssetNetwork_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AssetNetwork) Reset() {
	*x = AssetNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNetwork) ProtoMessage() {}

func (x *AssetNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNetwork.ProtoReflect.Descriptor instead.
func (*AssetNetwork) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{46}
}

func (x *AssetNetwork) GetData() *AssetNetwork_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetFullNodeAssetNetworkListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFullNodeAssetNetworkListRequest) Reset() {
	*x = GetFullNodeAssetNetworkListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullNodeAssetNetworkListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullNodeAssetNetworkListRequest) ProtoMessage() {}

func (x *GetFullNodeAssetNetworkListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullNodeAssetNetworkListRequest.ProtoReflect.Descriptor instead.
func (*GetFullNodeAssetNetworkListRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{47}
}

type GetFullNodeAssetNetworkListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetFullNodeAssetNetworkListResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetFullNodeAssetNetworkListResponse) Reset() {
	*x = GetFullNodeAssetNetworkListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullNodeAssetNetworkListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullNodeAssetNetworkListResponse) ProtoMessage() {}

func (x *GetFullNodeAssetNetworkListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullNodeAssetNetworkListResponse.ProtoReflect.Descriptor instead.
func (*GetFullNodeAssetNetworkListResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{48}
}

func (x *GetFullNodeAssetNetworkListResponse) GetData() *GetFullNodeAssetNetworkListResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetNetworkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetSymbol               Symbol                   `protobuf:"varint,2,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	TokenStandard             string                   `protobuf:"bytes,3,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus             bool                     `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	MinDeposit                string                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            bool                     `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	MinWithdraw               string                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawSpecialTips       string                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	WithdrawSoftTips          string                   `protobuf:"bytes,20,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	WithdrawDesc              string                   `protobuf:"bytes,21,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	FeeMultiplier             string                   `protobuf:"bytes,22,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 bool                     `protobuf:"varint,23,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	WithdrawAddressId         string                   `protobuf:"bytes,25,opt,name=withdraw_address_id,json=withdrawAddressId,proto3" json:"withdraw_address_id,omitempty"`
	DepositAddressId          string                   `protobuf:"bytes,26,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	BalanceUpperLimit         string                   `protobuf:"bytes,27,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                   `protobuf:"bytes,28,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawFee               string                   `protobuf:"bytes,29,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	WithdrawPrecision         int32                    `protobuf:"varint,30,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                    `protobuf:"varint,31,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawChannelId         string                   `protobuf:"bytes,32,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"`
	DepositMode               AssetNetworkDepositMode  `protobuf:"varint,33,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode `protobuf:"varint,34,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawAddressIndex      string                   `protobuf:"bytes,35,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	WithdrawFullNodeSupported bool                     `protobuf:"varint,36,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  bool                     `protobuf:"varint,37,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                   `protobuf:"bytes,38,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                   `protobuf:"bytes,39,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
	NetworkSymbol             Symbol                   `protobuf:"varint,40,opt,name=network_symbol,json=networkSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"network_symbol,omitempty"`
}

func (x *AssetNetworkList) Reset() {
	*x = AssetNetworkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNetworkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNetworkList) ProtoMessage() {}

func (x *AssetNetworkList) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNetworkList.ProtoReflect.Descriptor instead.
func (*AssetNetworkList) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{49}
}

func (x *AssetNetworkList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssetNetworkList) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AssetNetworkList) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *AssetNetworkList) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *AssetNetworkList) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *AssetNetworkList) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *AssetNetworkList) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *AssetNetworkList) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *AssetNetworkList) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *AssetNetworkList) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *AssetNetworkList) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *AssetNetworkList) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AssetNetworkList) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *AssetNetworkList) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *AssetNetworkList) GetWithdrawAddressId() string {
	if x != nil {
		return x.WithdrawAddressId
	}
	return ""
}

func (x *AssetNetworkList) GetDepositAddressId() string {
	if x != nil {
		return x.DepositAddressId
	}
	return ""
}

func (x *AssetNetworkList) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *AssetNetworkList) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *AssetNetworkList) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *AssetNetworkList) GetWithdrawChannelId() string {
	if x != nil {
		return x.WithdrawChannelId
	}
	return ""
}

func (x *AssetNetworkList) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *AssetNetworkList) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *AssetNetworkList) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *AssetNetworkList) GetWithdrawFullNodeSupported() bool {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return false
}

func (x *AssetNetworkList) GetDepositFullNodeSupported() bool {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return false
}

func (x *AssetNetworkList) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *AssetNetworkList) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

func (x *AssetNetworkList) GetNetworkSymbol() Symbol {
	if x != nil {
		return x.NetworkSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

type AddBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BannedAddress  string `protobuf:"bytes,1,opt,name=banned_address,json=bannedAddress,proto3" json:"banned_address,omitempty"`
	DepositDesc    string `protobuf:"bytes,2,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	DepositStatus  bool   `protobuf:"varint,3,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus bool   `protobuf:"varint,4,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WithdrawDesc   string `protobuf:"bytes,5,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	NetworkId      uint64 `protobuf:"varint,6,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *AddBlacklistRequest) Reset() {
	*x = AddBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlacklistRequest) ProtoMessage() {}

func (x *AddBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlacklistRequest.ProtoReflect.Descriptor instead.
func (*AddBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{50}
}

func (x *AddBlacklistRequest) GetBannedAddress() string {
	if x != nil {
		return x.BannedAddress
	}
	return ""
}

func (x *AddBlacklistRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddBlacklistRequest) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *AddBlacklistRequest) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *AddBlacklistRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddBlacklistRequest) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

type AddBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Blacklist `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddBlacklistResponse) Reset() {
	*x = AddBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBlacklistResponse) ProtoMessage() {}

func (x *AddBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBlacklistResponse.ProtoReflect.Descriptor instead.
func (*AddBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{51}
}

func (x *AddBlacklistResponse) GetData() *Blacklist {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DepositDesc    string `protobuf:"bytes,2,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	DepositStatus  bool   `protobuf:"varint,3,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus bool   `protobuf:"varint,4,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WithdrawDesc   string `protobuf:"bytes,5,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	BannedAddress  string `protobuf:"bytes,6,opt,name=banned_address,json=bannedAddress,proto3" json:"banned_address,omitempty"`
	NetworkId      uint64 `protobuf:"varint,7,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *UpdateBlacklistRequest) Reset() {
	*x = UpdateBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlacklistRequest) ProtoMessage() {}

func (x *UpdateBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlacklistRequest.ProtoReflect.Descriptor instead.
func (*UpdateBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{52}
}

func (x *UpdateBlacklistRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBlacklistRequest) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateBlacklistRequest) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *UpdateBlacklistRequest) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *UpdateBlacklistRequest) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateBlacklistRequest) GetBannedAddress() string {
	if x != nil {
		return x.BannedAddress
	}
	return ""
}

func (x *UpdateBlacklistRequest) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

type UpdateBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Blacklist `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateBlacklistResponse) Reset() {
	*x = UpdateBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBlacklistResponse) ProtoMessage() {}

func (x *UpdateBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBlacklistResponse.ProtoReflect.Descriptor instead.
func (*UpdateBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{53}
}

func (x *UpdateBlacklistResponse) GetData() *Blacklist {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkName string      `protobuf:"bytes,1,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
	Address     string      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Pagination  *Pagination `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WithCsv     bool        `protobuf:"varint,4,opt,name=with_csv,json=withCsv,proto3" json:"with_csv,omitempty"`
}

func (x *ListBlacklistRequest) Reset() {
	*x = ListBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistRequest) ProtoMessage() {}

func (x *ListBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistRequest.ProtoReflect.Descriptor instead.
func (*ListBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{54}
}

func (x *ListBlacklistRequest) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

func (x *ListBlacklistRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ListBlacklistRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListBlacklistRequest) GetWithCsv() bool {
	if x != nil {
		return x.WithCsv
	}
	return false
}

type ListBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListBlacklistResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListBlacklistResponse) Reset() {
	*x = ListBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistResponse) ProtoMessage() {}

func (x *ListBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistResponse.ProtoReflect.Descriptor instead.
func (*ListBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{55}
}

func (x *ListBlacklistResponse) GetData() *ListBlacklistResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetBlacklistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetBlacklistRequest) Reset() {
	*x = GetBlacklistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlacklistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacklistRequest) ProtoMessage() {}

func (x *GetBlacklistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacklistRequest.ProtoReflect.Descriptor instead.
func (*GetBlacklistRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{56}
}

func (x *GetBlacklistRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBlacklistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Blacklist `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetBlacklistResponse) Reset() {
	*x = GetBlacklistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBlacklistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlacklistResponse) ProtoMessage() {}

func (x *GetBlacklistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlacklistResponse.ProtoReflect.Descriptor instead.
func (*GetBlacklistResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{57}
}

func (x *GetBlacklistResponse) GetData() *Blacklist {
	if x != nil {
		return x.Data
	}
	return nil
}

type Blacklist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DepositDesc    string `protobuf:"bytes,2,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	DepositStatus  bool   `protobuf:"varint,3,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus bool   `protobuf:"varint,4,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WithdrawDesc   string `protobuf:"bytes,5,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	BannedAddress  string `protobuf:"bytes,6,opt,name=banned_address,json=bannedAddress,proto3" json:"banned_address,omitempty"`
	NetworkId      uint64 `protobuf:"varint,7,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	NetworkName    string `protobuf:"bytes,8,opt,name=network_name,json=networkName,proto3" json:"network_name,omitempty"`
}

func (x *Blacklist) Reset() {
	*x = Blacklist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Blacklist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Blacklist) ProtoMessage() {}

func (x *Blacklist) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Blacklist.ProtoReflect.Descriptor instead.
func (*Blacklist) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{58}
}

func (x *Blacklist) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Blacklist) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *Blacklist) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *Blacklist) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *Blacklist) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *Blacklist) GetBannedAddress() string {
	if x != nil {
		return x.BannedAddress
	}
	return ""
}

func (x *Blacklist) GetNetworkId() uint64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *Blacklist) GetNetworkName() string {
	if x != nil {
		return x.NetworkName
	}
	return ""
}

type ListTinyNetworkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenStandard string `protobuf:"bytes,1,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
}

func (x *ListTinyNetworkRequest) Reset() {
	*x = ListTinyNetworkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTinyNetworkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTinyNetworkRequest) ProtoMessage() {}

func (x *ListTinyNetworkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTinyNetworkRequest.ProtoReflect.Descriptor instead.
func (*ListTinyNetworkRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{59}
}

func (x *ListTinyNetworkRequest) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

type ListTinyNetworkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ListTinyNetworkResponse_Networks `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTinyNetworkResponse) Reset() {
	*x = ListTinyNetworkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTinyNetworkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTinyNetworkResponse) ProtoMessage() {}

func (x *ListTinyNetworkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTinyNetworkResponse.ProtoReflect.Descriptor instead.
func (*ListTinyNetworkResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{60}
}

func (x *ListTinyNetworkResponse) GetData() []*ListTinyNetworkResponse_Networks {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTinyAssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ListTinyAssetRequest) Reset() {
	*x = ListTinyAssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTinyAssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTinyAssetRequest) ProtoMessage() {}

func (x *ListTinyAssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTinyAssetRequest.ProtoReflect.Descriptor instead.
func (*ListTinyAssetRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{61}
}

func (x *ListTinyAssetRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListTinyAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ListTinyAssetResponse_Assets `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTinyAssetResponse) Reset() {
	*x = ListTinyAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTinyAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTinyAssetResponse) ProtoMessage() {}

func (x *ListTinyAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTinyAssetResponse.ProtoReflect.Descriptor instead.
func (*ListTinyAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{62}
}

func (x *ListTinyAssetResponse) GetData() []*ListTinyAssetResponse_Assets {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AssetSettingResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AssetSettingResponse) Reset() {
	*x = AssetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSettingResponse) ProtoMessage() {}

func (x *AssetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSettingResponse.ProtoReflect.Descriptor instead.
func (*AssetSettingResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{63}
}

func (x *AssetSettingResponse) GetData() *AssetSettingResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAssetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetDepositDesc    string `protobuf:"bytes,1,opt,name=asset_deposit_desc,json=assetDepositDesc,proto3" json:"asset_deposit_desc,omitempty"`
	AssetWithdrawDesc   string `protobuf:"bytes,2,opt,name=asset_withdraw_desc,json=assetWithdrawDesc,proto3" json:"asset_withdraw_desc,omitempty"`
	AssetDepositStatus  bool   `protobuf:"varint,3,opt,name=asset_deposit_status,json=assetDepositStatus,proto3" json:"asset_deposit_status,omitempty"`
	AssetWithdrawStatus bool   `protobuf:"varint,4,opt,name=asset_withdraw_status,json=assetWithdrawStatus,proto3" json:"asset_withdraw_status,omitempty"`
}

func (x *UpdateAssetSettingRequest) Reset() {
	*x = UpdateAssetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetSettingRequest) ProtoMessage() {}

func (x *UpdateAssetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetSettingRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{64}
}

func (x *UpdateAssetSettingRequest) GetAssetDepositDesc() string {
	if x != nil {
		return x.AssetDepositDesc
	}
	return ""
}

func (x *UpdateAssetSettingRequest) GetAssetWithdrawDesc() string {
	if x != nil {
		return x.AssetWithdrawDesc
	}
	return ""
}

func (x *UpdateAssetSettingRequest) GetAssetDepositStatus() bool {
	if x != nil {
		return x.AssetDepositStatus
	}
	return false
}

func (x *UpdateAssetSettingRequest) GetAssetWithdrawStatus() bool {
	if x != nil {
		return x.AssetWithdrawStatus
	}
	return false
}

type UpdateAssetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UpdateAssetSettingResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateAssetSettingResponse) Reset() {
	*x = UpdateAssetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetSettingResponse) ProtoMessage() {}

func (x *UpdateAssetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateAssetSettingResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{65}
}

func (x *UpdateAssetSettingResponse) GetData() *UpdateAssetSettingResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateAssetNetworkSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Assets []*UpdateAssetNetworkSelectorRequest_Asset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *UpdateAssetNetworkSelectorRequest) Reset() {
	*x = UpdateAssetNetworkSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetNetworkSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetNetworkSelectorRequest) ProtoMessage() {}

func (x *UpdateAssetNetworkSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetNetworkSelectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateAssetNetworkSelectorRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{66}
}

func (x *UpdateAssetNetworkSelectorRequest) GetAssets() []*UpdateAssetNetworkSelectorRequest_Asset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type UpdateTokenStandardSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TokenStandards []*UpdateTokenStandardSelectorRequest_TokenStandard `protobuf:"bytes,1,rep,name=token_standards,json=tokenStandards,proto3" json:"token_standards,omitempty"`
}

func (x *UpdateTokenStandardSelectorRequest) Reset() {
	*x = UpdateTokenStandardSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenStandardSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenStandardSelectorRequest) ProtoMessage() {}

func (x *UpdateTokenStandardSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenStandardSelectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateTokenStandardSelectorRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{67}
}

func (x *UpdateTokenStandardSelectorRequest) GetTokenStandards() []*UpdateTokenStandardSelectorRequest_TokenStandard {
	if x != nil {
		return x.TokenStandards
	}
	return nil
}

type AssetNetworkSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*AssetNetworkSelectors_Asset `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *AssetNetworkSelectors) Reset() {
	*x = AssetNetworkSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNetworkSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNetworkSelectors) ProtoMessage() {}

func (x *AssetNetworkSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNetworkSelectors.ProtoReflect.Descriptor instead.
func (*AssetNetworkSelectors) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{68}
}

func (x *AssetNetworkSelectors) GetData() []*AssetNetworkSelectors_Asset {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetAssetInfoByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetAssetInfoByIdRequest) Reset() {
	*x = GetAssetInfoByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetInfoByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetInfoByIdRequest) ProtoMessage() {}

func (x *GetAssetInfoByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetInfoByIdRequest.ProtoReflect.Descriptor instead.
func (*GetAssetInfoByIdRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{69}
}

func (x *GetAssetInfoByIdRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetAssetInfoByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetInfo *AssetInfo `protobuf:"bytes,1,opt,name=asset_info,json=assetInfo,proto3" json:"asset_info,omitempty"`
}

func (x *GetAssetInfoByIdResponse) Reset() {
	*x = GetAssetInfoByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetInfoByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetInfoByIdResponse) ProtoMessage() {}

func (x *GetAssetInfoByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetInfoByIdResponse.ProtoReflect.Descriptor instead.
func (*GetAssetInfoByIdResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{70}
}

func (x *GetAssetInfoByIdResponse) GetAssetInfo() *AssetInfo {
	if x != nil {
		return x.AssetInfo
	}
	return nil
}

type GetAllAssetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetInfo []*AssetInfo `protobuf:"bytes,1,rep,name=asset_info,json=assetInfo,proto3" json:"asset_info,omitempty"`
}

func (x *GetAllAssetInfoResponse) Reset() {
	*x = GetAllAssetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssetInfoResponse) ProtoMessage() {}

func (x *GetAllAssetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssetInfoResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{71}
}

func (x *GetAllAssetInfoResponse) GetAssetInfo() []*AssetInfo {
	if x != nil {
		return x.AssetInfo
	}
	return nil
}

type AssetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol             Symbol               `protobuf:"varint,1,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	DepositAllEnabled  bool                 `protobuf:"varint,2,opt,name=deposit_all_enabled,json=depositAllEnabled,proto3" json:"deposit_all_enabled,omitempty"`
	WithdrawAllEnabled bool                 `protobuf:"varint,3,opt,name=withdraw_all_enabled,json=withdrawAllEnabled,proto3" json:"withdraw_all_enabled,omitempty"`
	Free               string               `protobuf:"bytes,4,opt,name=free,proto3" json:"free,omitempty"`
	Locked             string               `protobuf:"bytes,5,opt,name=locked,proto3" json:"locked,omitempty"`
	Freeze             string               `protobuf:"bytes,6,opt,name=freeze,proto3" json:"freeze,omitempty"`
	Buying             bool                 `protobuf:"varint,7,opt,name=buying,proto3" json:"buying,omitempty"`
	Selling            bool                 `protobuf:"varint,8,opt,name=selling,proto3" json:"selling,omitempty"`
	Trading            bool                 `protobuf:"varint,9,opt,name=trading,proto3" json:"trading,omitempty"`
	Logo               string               `protobuf:"bytes,10,opt,name=logo,proto3" json:"logo,omitempty"`
	Networks           []*AssetInfo_Network `protobuf:"bytes,11,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *AssetInfo) Reset() {
	*x = AssetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetInfo) ProtoMessage() {}

func (x *AssetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetInfo.ProtoReflect.Descriptor instead.
func (*AssetInfo) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{72}
}

func (x *AssetInfo) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AssetInfo) GetDepositAllEnabled() bool {
	if x != nil {
		return x.DepositAllEnabled
	}
	return false
}

func (x *AssetInfo) GetWithdrawAllEnabled() bool {
	if x != nil {
		return x.WithdrawAllEnabled
	}
	return false
}

func (x *AssetInfo) GetFree() string {
	if x != nil {
		return x.Free
	}
	return ""
}

func (x *AssetInfo) GetLocked() string {
	if x != nil {
		return x.Locked
	}
	return ""
}

func (x *AssetInfo) GetFreeze() string {
	if x != nil {
		return x.Freeze
	}
	return ""
}

func (x *AssetInfo) GetBuying() bool {
	if x != nil {
		return x.Buying
	}
	return false
}

func (x *AssetInfo) GetSelling() bool {
	if x != nil {
		return x.Selling
	}
	return false
}

func (x *AssetInfo) GetTrading() bool {
	if x != nil {
		return x.Trading
	}
	return false
}

func (x *AssetInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AssetInfo) GetNetworks() []*AssetInfo_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

type ExternalExchangeSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ExternalExchangeSetting `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ExternalExchangeSettingsResponse) Reset() {
	*x = ExternalExchangeSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalExchangeSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalExchangeSettingsResponse) ProtoMessage() {}

func (x *ExternalExchangeSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalExchangeSettingsResponse.ProtoReflect.Descriptor instead.
func (*ExternalExchangeSettingsResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{73}
}

func (x *ExternalExchangeSettingsResponse) GetData() []*ExternalExchangeSetting {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExternalExchangeSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ExternalExchangeSetting `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ExternalExchangeSettingResponse) Reset() {
	*x = ExternalExchangeSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalExchangeSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalExchangeSettingResponse) ProtoMessage() {}

func (x *ExternalExchangeSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalExchangeSettingResponse.ProtoReflect.Descriptor instead.
func (*ExternalExchangeSettingResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{74}
}

func (x *ExternalExchangeSettingResponse) GetData() *ExternalExchangeSetting {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExternalExchangeSettingFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserUUID        string  `protobuf:"bytes,2,opt,name=userUUID,proto3" json:"userUUID,omitempty"`
	UpperLine       float64 `protobuf:"fixed64,3,opt,name=upperLine,proto3" json:"upperLine,omitempty"`
	LowerLine       float64 `protobuf:"fixed64,4,opt,name=lowerLine,proto3" json:"lowerLine,omitempty"`
	InitialVal      float64 `protobuf:"fixed64,5,opt,name=initialVal,proto3" json:"initialVal,omitempty"`
	Base            string  `protobuf:"bytes,6,opt,name=base,proto3" json:"base,omitempty"`
	Quote           string  `protobuf:"bytes,7,opt,name=quote,proto3" json:"quote,omitempty"`
	Status          bool    `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`
	BrokerWarehouse string  `protobuf:"bytes,10,opt,name=brokerWarehouse,proto3" json:"brokerWarehouse,omitempty"`
	Asset           string  `protobuf:"bytes,11,opt,name=asset,proto3" json:"asset,omitempty"`
}

func (x *ExternalExchangeSettingFilter) Reset() {
	*x = ExternalExchangeSettingFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalExchangeSettingFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalExchangeSettingFilter) ProtoMessage() {}

func (x *ExternalExchangeSettingFilter) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalExchangeSettingFilter.ProtoReflect.Descriptor instead.
func (*ExternalExchangeSettingFilter) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{75}
}

func (x *ExternalExchangeSettingFilter) GetUserUUID() string {
	if x != nil {
		return x.UserUUID
	}
	return ""
}

func (x *ExternalExchangeSettingFilter) GetUpperLine() float64 {
	if x != nil {
		return x.UpperLine
	}
	return 0
}

func (x *ExternalExchangeSettingFilter) GetLowerLine() float64 {
	if x != nil {
		return x.LowerLine
	}
	return 0
}

func (x *ExternalExchangeSettingFilter) GetInitialVal() float64 {
	if x != nil {
		return x.InitialVal
	}
	return 0
}

func (x *ExternalExchangeSettingFilter) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *ExternalExchangeSettingFilter) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *ExternalExchangeSettingFilter) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ExternalExchangeSettingFilter) GetBrokerWarehouse() string {
	if x != nil {
		return x.BrokerWarehouse
	}
	return ""
}

func (x *ExternalExchangeSettingFilter) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

type ExternalExchangeSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpperLine       float64 `protobuf:"fixed64,2,opt,name=upperLine,proto3" json:"upperLine,omitempty"`
	LowerLine       float64 `protobuf:"fixed64,3,opt,name=lowerLine,proto3" json:"lowerLine,omitempty"`
	InitialVal      float64 `protobuf:"fixed64,4,opt,name=initialVal,proto3" json:"initialVal,omitempty"`
	Base            string  `protobuf:"bytes,5,opt,name=base,proto3" json:"base,omitempty"`
	Quote           string  `protobuf:"bytes,6,opt,name=quote,proto3" json:"quote,omitempty"`
	Status          bool    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	BrokerWarehouse string  `protobuf:"bytes,9,opt,name=brokerWarehouse,proto3" json:"brokerWarehouse,omitempty"`
	Asset           string  `protobuf:"bytes,10,opt,name=asset,proto3" json:"asset,omitempty"`
	BasePrecision   int32   `protobuf:"varint,11,opt,name=base_precision,json=basePrecision,proto3" json:"base_precision,omitempty"`
	QuotePrecision  int32   `protobuf:"varint,12,opt,name=quote_precision,json=quotePrecision,proto3" json:"quote_precision,omitempty"`
}

func (x *ExternalExchangeSetting) Reset() {
	*x = ExternalExchangeSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalExchangeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalExchangeSetting) ProtoMessage() {}

func (x *ExternalExchangeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalExchangeSetting.ProtoReflect.Descriptor instead.
func (*ExternalExchangeSetting) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{76}
}

func (x *ExternalExchangeSetting) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalExchangeSetting) GetUpperLine() float64 {
	if x != nil {
		return x.UpperLine
	}
	return 0
}

func (x *ExternalExchangeSetting) GetLowerLine() float64 {
	if x != nil {
		return x.LowerLine
	}
	return 0
}

func (x *ExternalExchangeSetting) GetInitialVal() float64 {
	if x != nil {
		return x.InitialVal
	}
	return 0
}

func (x *ExternalExchangeSetting) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *ExternalExchangeSetting) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *ExternalExchangeSetting) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ExternalExchangeSetting) GetBrokerWarehouse() string {
	if x != nil {
		return x.BrokerWarehouse
	}
	return ""
}

func (x *ExternalExchangeSetting) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *ExternalExchangeSetting) GetBasePrecision() int32 {
	if x != nil {
		return x.BasePrecision
	}
	return 0
}

func (x *ExternalExchangeSetting) GetQuotePrecision() int32 {
	if x != nil {
		return x.QuotePrecision
	}
	return 0
}

type ExternalExchangeUpdateSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpperLine       float64 `protobuf:"fixed64,2,opt,name=upperLine,proto3" json:"upperLine,omitempty"`
	LowerLine       float64 `protobuf:"fixed64,3,opt,name=lowerLine,proto3" json:"lowerLine,omitempty"`
	InitialVal      float64 `protobuf:"fixed64,4,opt,name=initialVal,proto3" json:"initialVal,omitempty"`
	Base            string  `protobuf:"bytes,5,opt,name=base,proto3" json:"base,omitempty"`
	Quote           string  `protobuf:"bytes,6,opt,name=quote,proto3" json:"quote,omitempty"`
	Status          bool    `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	BrokerWarehouse string  `protobuf:"bytes,9,opt,name=brokerWarehouse,proto3" json:"brokerWarehouse,omitempty"`
	Asset           string  `protobuf:"bytes,10,opt,name=asset,proto3" json:"asset,omitempty"`
	BasePrecision   int32   `protobuf:"varint,11,opt,name=base_precision,json=basePrecision,proto3" json:"base_precision,omitempty"`
	QuotePrecision  int32   `protobuf:"varint,12,opt,name=quote_precision,json=quotePrecision,proto3" json:"quote_precision,omitempty"`
}

func (x *ExternalExchangeUpdateSettingRequest) Reset() {
	*x = ExternalExchangeUpdateSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalExchangeUpdateSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalExchangeUpdateSettingRequest) ProtoMessage() {}

func (x *ExternalExchangeUpdateSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalExchangeUpdateSettingRequest.ProtoReflect.Descriptor instead.
func (*ExternalExchangeUpdateSettingRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{77}
}

func (x *ExternalExchangeUpdateSettingRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalExchangeUpdateSettingRequest) GetUpperLine() float64 {
	if x != nil {
		return x.UpperLine
	}
	return 0
}

func (x *ExternalExchangeUpdateSettingRequest) GetLowerLine() float64 {
	if x != nil {
		return x.LowerLine
	}
	return 0
}

func (x *ExternalExchangeUpdateSettingRequest) GetInitialVal() float64 {
	if x != nil {
		return x.InitialVal
	}
	return 0
}

func (x *ExternalExchangeUpdateSettingRequest) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *ExternalExchangeUpdateSettingRequest) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *ExternalExchangeUpdateSettingRequest) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ExternalExchangeUpdateSettingRequest) GetBrokerWarehouse() string {
	if x != nil {
		return x.BrokerWarehouse
	}
	return ""
}

func (x *ExternalExchangeUpdateSettingRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *ExternalExchangeUpdateSettingRequest) GetBasePrecision() int32 {
	if x != nil {
		return x.BasePrecision
	}
	return 0
}

func (x *ExternalExchangeUpdateSettingRequest) GetQuotePrecision() int32 {
	if x != nil {
		return x.QuotePrecision
	}
	return 0
}

type GetAllAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetAllAssetResponse_SymbolKey `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAllAssetResponse) Reset() {
	*x = GetAllAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssetResponse) ProtoMessage() {}

func (x *GetAllAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssetResponse.ProtoReflect.Descriptor instead.
func (*GetAllAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{78}
}

func (x *GetAllAssetResponse) GetData() []*GetAllAssetResponse_SymbolKey {
	if x != nil {
		return x.Data
	}
	return nil
}

type AssetData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameEn string `protobuf:"bytes,1,opt,name=NameEn,proto3" json:"NameEn,omitempty"`
	NameFa string `protobuf:"bytes,2,opt,name=NameFa,proto3" json:"NameFa,omitempty"`
	Logo   string `protobuf:"bytes,3,opt,name=Logo,proto3" json:"Logo,omitempty"`
}

func (x *AssetData) Reset() {
	*x = AssetData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetData) ProtoMessage() {}

func (x *AssetData) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetData.ProtoReflect.Descriptor instead.
func (*AssetData) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{79}
}

func (x *AssetData) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *AssetData) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *AssetData) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type AddTreasuryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Broker      string       `protobuf:"bytes,2,opt,name=broker,proto3" json:"broker,omitempty"`
	Description string       `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Provider    string       `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	Meta        string       `protobuf:"bytes,6,opt,name=meta,proto3" json:"meta,omitempty"`
	Type        TreasuryType `protobuf:"varint,7,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
	TreasuryID  string       `protobuf:"bytes,9,opt,name=treasuryID,proto3" json:"treasuryID,omitempty"`
}

func (x *AddTreasuryRequest) Reset() {
	*x = AddTreasuryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTreasuryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTreasuryRequest) ProtoMessage() {}

func (x *AddTreasuryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTreasuryRequest.ProtoReflect.Descriptor instead.
func (*AddTreasuryRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{80}
}

func (x *AddTreasuryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTreasuryRequest) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *AddTreasuryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddTreasuryRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddTreasuryRequest) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *AddTreasuryRequest) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

func (x *AddTreasuryRequest) GetTreasuryID() string {
	if x != nil {
		return x.TreasuryID
	}
	return ""
}

type AddTreasuryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AddTreasuryResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddTreasuryResponse) Reset() {
	*x = AddTreasuryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTreasuryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTreasuryResponse) ProtoMessage() {}

func (x *AddTreasuryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTreasuryResponse.ProtoReflect.Descriptor instead.
func (*AddTreasuryResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{81}
}

func (x *AddTreasuryResponse) GetData() *AddTreasuryResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetTreasuryByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetTreasuryByIdRequest) Reset() {
	*x = GetTreasuryByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreasuryByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreasuryByIdRequest) ProtoMessage() {}

func (x *GetTreasuryByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreasuryByIdRequest.ProtoReflect.Descriptor instead.
func (*GetTreasuryByIdRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{82}
}

func (x *GetTreasuryByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetTreasuryByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetTreasuryByIdResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetTreasuryByIdResponse) Reset() {
	*x = GetTreasuryByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreasuryByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreasuryByIdResponse) ProtoMessage() {}

func (x *GetTreasuryByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreasuryByIdResponse.ProtoReflect.Descriptor instead.
func (*GetTreasuryByIdResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{83}
}

func (x *GetTreasuryByIdResponse) GetData() *GetTreasuryByIdResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteTreasuryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTreasuryRequest) Reset() {
	*x = DeleteTreasuryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTreasuryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTreasuryRequest) ProtoMessage() {}

func (x *DeleteTreasuryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTreasuryRequest.ProtoReflect.Descriptor instead.
func (*DeleteTreasuryRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{84}
}

func (x *DeleteTreasuryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteTreasuryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DeleteTreasuryResponse) Reset() {
	*x = DeleteTreasuryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTreasuryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTreasuryResponse) ProtoMessage() {}

func (x *DeleteTreasuryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTreasuryResponse.ProtoReflect.Descriptor instead.
func (*DeleteTreasuryResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{85}
}

func (x *DeleteTreasuryResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type UpdateTreasuryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Broker      string       `protobuf:"bytes,3,opt,name=broker,proto3" json:"broker,omitempty"`
	Description string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Provider    string       `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Meta        string       `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	Type        TreasuryType `protobuf:"varint,8,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
}

func (x *UpdateTreasuryRequest) Reset() {
	*x = UpdateTreasuryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreasuryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreasuryRequest) ProtoMessage() {}

func (x *UpdateTreasuryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreasuryRequest.ProtoReflect.Descriptor instead.
func (*UpdateTreasuryRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{86}
}

func (x *UpdateTreasuryRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTreasuryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTreasuryRequest) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *UpdateTreasuryRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTreasuryRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateTreasuryRequest) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *UpdateTreasuryRequest) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

type UpdateTreasuryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UpdateTreasuryResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateTreasuryResponse) Reset() {
	*x = UpdateTreasuryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreasuryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreasuryResponse) ProtoMessage() {}

func (x *UpdateTreasuryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreasuryResponse.ProtoReflect.Descriptor instead.
func (*UpdateTreasuryResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{87}
}

func (x *UpdateTreasuryResponse) GetData() *UpdateTreasuryResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListTreasuryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Broker   string `protobuf:"bytes,2,opt,name=broker,proto3" json:"broker,omitempty"`
	Provider string `protobuf:"bytes,3,opt,name=provider,proto3" json:"provider,omitempty"`
	Address  string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *ListTreasuryRequest) Reset() {
	*x = ListTreasuryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreasuryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreasuryRequest) ProtoMessage() {}

func (x *ListTreasuryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreasuryRequest.ProtoReflect.Descriptor instead.
func (*ListTreasuryRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{88}
}

func (x *ListTreasuryRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ListTreasuryRequest) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *ListTreasuryRequest) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ListTreasuryRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ListTreasuryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*Treasury `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListTreasuryResponse) Reset() {
	*x = ListTreasuryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTreasuryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTreasuryResponse) ProtoMessage() {}

func (x *ListTreasuryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTreasuryResponse.ProtoReflect.Descriptor instead.
func (*ListTreasuryResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{89}
}

func (x *ListTreasuryResponse) GetData() []*Treasury {
	if x != nil {
		return x.Data
	}
	return nil
}

type Treasury struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Broker      string       `protobuf:"bytes,3,opt,name=broker,proto3" json:"broker,omitempty"`
	Description string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Provider    string       `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Address     string       `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Meta        string       `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	Type        TreasuryType `protobuf:"varint,8,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
	Memo        string       `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *Treasury) Reset() {
	*x = Treasury{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Treasury) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Treasury) ProtoMessage() {}

func (x *Treasury) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Treasury.ProtoReflect.Descriptor instead.
func (*Treasury) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{90}
}

func (x *Treasury) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Treasury) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Treasury) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *Treasury) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Treasury) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Treasury) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Treasury) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *Treasury) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

func (x *Treasury) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type ListUserAssetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListUserAssetResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListUserAssetResponse) Reset() {
	*x = ListUserAssetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserAssetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserAssetResponse) ProtoMessage() {}

func (x *ListUserAssetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserAssetResponse.ProtoReflect.Descriptor instead.
func (*ListUserAssetResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{91}
}

func (x *ListUserAssetResponse) GetData() *ListUserAssetResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UserAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn         string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa         string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol         string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo           string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus  bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	DepositDesc    string `protobuf:"bytes,8,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc   string `protobuf:"bytes,9,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	Order          int32  `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UserAsset) Reset() {
	*x = UserAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAsset) ProtoMessage() {}

func (x *UserAsset) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAsset.ProtoReflect.Descriptor instead.
func (*UserAsset) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{92}
}

func (x *UserAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserAsset) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UserAsset) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *UserAsset) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UserAsset) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UserAsset) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *UserAsset) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *UserAsset) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UserAsset) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UserAsset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateExternalExchangeSettingByCSVRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings []*UpdateExternalExchangeSettingByCSVRequestSetting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdateExternalExchangeSettingByCSVRequest) Reset() {
	*x = UpdateExternalExchangeSettingByCSVRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExternalExchangeSettingByCSVRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExternalExchangeSettingByCSVRequest) ProtoMessage() {}

func (x *UpdateExternalExchangeSettingByCSVRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExternalExchangeSettingByCSVRequest.ProtoReflect.Descriptor instead.
func (*UpdateExternalExchangeSettingByCSVRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{93}
}

func (x *UpdateExternalExchangeSettingByCSVRequest) GetSettings() []*UpdateExternalExchangeSettingByCSVRequestSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

type GetAssetNetworkDepositModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset   string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Network string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
}

func (x *GetAssetNetworkDepositModeRequest) Reset() {
	*x = GetAssetNetworkDepositModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetNetworkDepositModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetNetworkDepositModeRequest) ProtoMessage() {}

func (x *GetAssetNetworkDepositModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetNetworkDepositModeRequest.ProtoReflect.Descriptor instead.
func (*GetAssetNetworkDepositModeRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{94}
}

func (x *GetAssetNetworkDepositModeRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *GetAssetNetworkDepositModeRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

type GetAssetNetworkDepositModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetAssetNetworkDepositModeResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetAssetNetworkDepositModeResponse) Reset() {
	*x = GetAssetNetworkDepositModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetNetworkDepositModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetNetworkDepositModeResponse) ProtoMessage() {}

func (x *GetAssetNetworkDepositModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetNetworkDepositModeResponse.ProtoReflect.Descriptor instead.
func (*GetAssetNetworkDepositModeResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{95}
}

func (x *GetAssetNetworkDepositModeResponse) GetData() *GetAssetNetworkDepositModeResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type CheckAssetNetworkFeeFairnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Asset       string `protobuf:"bytes,1,opt,name=asset,proto3" json:"asset,omitempty"`
	Network     string `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	FeeQuantity string `protobuf:"bytes,3,opt,name=fee_quantity,json=feeQuantity,proto3" json:"fee_quantity,omitempty"`
	FeeAsset    string `protobuf:"bytes,4,opt,name=fee_asset,json=feeAsset,proto3" json:"fee_asset,omitempty"`
}

func (x *CheckAssetNetworkFeeFairnessRequest) Reset() {
	*x = CheckAssetNetworkFeeFairnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAssetNetworkFeeFairnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAssetNetworkFeeFairnessRequest) ProtoMessage() {}

func (x *CheckAssetNetworkFeeFairnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAssetNetworkFeeFairnessRequest.ProtoReflect.Descriptor instead.
func (*CheckAssetNetworkFeeFairnessRequest) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{96}
}

func (x *CheckAssetNetworkFeeFairnessRequest) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *CheckAssetNetworkFeeFairnessRequest) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *CheckAssetNetworkFeeFairnessRequest) GetFeeQuantity() string {
	if x != nil {
		return x.FeeQuantity
	}
	return ""
}

func (x *CheckAssetNetworkFeeFairnessRequest) GetFeeAsset() string {
	if x != nil {
		return x.FeeAsset
	}
	return ""
}

type CheckAssetNetworkFeeFairnessResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *CheckAssetNetworkFeeFairnessResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CheckAssetNetworkFeeFairnessResponse) Reset() {
	*x = CheckAssetNetworkFeeFairnessResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAssetNetworkFeeFairnessResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAssetNetworkFeeFairnessResponse) ProtoMessage() {}

func (x *CheckAssetNetworkFeeFairnessResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAssetNetworkFeeFairnessResponse.ProtoReflect.Descriptor instead.
func (*CheckAssetNetworkFeeFairnessResponse) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{97}
}

func (x *CheckAssetNetworkFeeFairnessResponse) GetData() *CheckAssetNetworkFeeFairnessResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn              string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa              string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol              Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard       string `protobuf:"bytes,5,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus       bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus      bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WalletRegex         string `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer            string `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo                bool   `protobuf:"varint,10,opt,name=memo,proto3" json:"memo,omitempty"`
	MemoRegex           string `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips         string `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc         string `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc        string `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips        string `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation     string `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	DepositAddressIndex string `protobuf:"bytes,17,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *AddNetworkResponse_Data) Reset() {
	*x = AddNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddNetworkResponse_Data) ProtoMessage() {}

func (x *AddNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*AddNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AddNetworkResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddNetworkResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AddNetworkResponse_Data) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *AddNetworkResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *AddNetworkResponse_Data) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetMemo() bool {
	if x != nil {
		return x.Memo
	}
	return false
}

func (x *AddNetworkResponse_Data) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *AddNetworkResponse_Data) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type UpdateNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn              string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa              string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol              Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard       string `protobuf:"bytes,5,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus       bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus      bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WalletRegex         string `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer            string `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo                bool   `protobuf:"varint,10,opt,name=memo,proto3" json:"memo,omitempty"`
	MemoRegex           string `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips         string `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc         string `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc        string `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips        string `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation     string `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	DepositAddressIndex string `protobuf:"bytes,17,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *UpdateNetworkResponse_Data) Reset() {
	*x = UpdateNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNetworkResponse_Data) ProtoMessage() {}

func (x *UpdateNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{14, 0}
}

func (x *UpdateNetworkResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateNetworkResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *UpdateNetworkResponse_Data) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *UpdateNetworkResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *UpdateNetworkResponse_Data) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetMemo() bool {
	if x != nil {
		return x.Memo
	}
	return false
}

func (x *UpdateNetworkResponse_Data) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *UpdateNetworkResponse_Data) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type ListNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    int32                                `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Networks []*ListNetworkResponse_Data_Networks `protobuf:"bytes,2,rep,name=networks,proto3" json:"networks,omitempty"`
	CsvName  string                               `protobuf:"bytes,3,opt,name=csv_name,json=csvName,proto3" json:"csv_name,omitempty"`
}

func (x *ListNetworkResponse_Data) Reset() {
	*x = ListNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkResponse_Data) ProtoMessage() {}

func (x *ListNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*ListNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ListNetworkResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListNetworkResponse_Data) GetNetworks() []*ListNetworkResponse_Data_Networks {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *ListNetworkResponse_Data) GetCsvName() string {
	if x != nil {
		return x.CsvName
	}
	return ""
}

type ListNetworkResponse_Data_Networks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn              string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa              string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol              Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard       string `protobuf:"bytes,5,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus       bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus      bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WalletRegex         string `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer            string `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo                bool   `protobuf:"varint,10,opt,name=memo,proto3" json:"memo,omitempty"`
	MemoRegex           string `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips         string `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc         string `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc        string `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips        string `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation     string `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	DepositAddressIndex string `protobuf:"bytes,17,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *ListNetworkResponse_Data_Networks) Reset() {
	*x = ListNetworkResponse_Data_Networks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNetworkResponse_Data_Networks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNetworkResponse_Data_Networks) ProtoMessage() {}

func (x *ListNetworkResponse_Data_Networks) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNetworkResponse_Data_Networks.ProtoReflect.Descriptor instead.
func (*ListNetworkResponse_Data_Networks) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{16, 0, 0}
}

func (x *ListNetworkResponse_Data_Networks) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListNetworkResponse_Data_Networks) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *ListNetworkResponse_Data_Networks) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *ListNetworkResponse_Data_Networks) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *ListNetworkResponse_Data_Networks) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetMemo() bool {
	if x != nil {
		return x.Memo
	}
	return false
}

func (x *ListNetworkResponse_Data_Networks) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *ListNetworkResponse_Data_Networks) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type GetNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn              string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa              string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol              Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard       string `protobuf:"bytes,5,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus       bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus      bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WalletRegex         string `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer            string `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo                bool   `protobuf:"varint,10,opt,name=memo,proto3" json:"memo,omitempty"`
	MemoRegex           string `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips         string `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc         string `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc        string `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips        string `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation     string `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	DepositAddressIndex string `protobuf:"bytes,17,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *GetNetworkResponse_Data) Reset() {
	*x = GetNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkResponse_Data) ProtoMessage() {}

func (x *GetNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*GetNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{18, 0}
}

func (x *GetNetworkResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetNetworkResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *GetNetworkResponse_Data) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *GetNetworkResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *GetNetworkResponse_Data) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetMemo() bool {
	if x != nil {
		return x.Memo
	}
	return false
}

func (x *GetNetworkResponse_Data) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *GetNetworkResponse_Data) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type AddAssetResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn             string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa             string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol             Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	Logo               string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus      bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus     bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	DepositDesc        string `protobuf:"bytes,8,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc       string `protobuf:"bytes,9,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	Order              int32  `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	ExchangeTreasuryId string `protobuf:"bytes,11,opt,name=exchange_treasury_id,json=exchangeTreasuryId,proto3" json:"exchange_treasury_id,omitempty"`
	ExchangeChannel    string `protobuf:"bytes,12,opt,name=exchange_channel,json=exchangeChannel,proto3" json:"exchange_channel,omitempty"`
	BalanceUpperLimit  string `protobuf:"bytes,13,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit  string `protobuf:"bytes,14,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
}

func (x *AddAssetResponse_Data) Reset() {
	*x = AddAssetResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetResponse_Data) ProtoMessage() {}

func (x *AddAssetResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetResponse_Data.ProtoReflect.Descriptor instead.
func (*AddAssetResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{20, 0}
}

func (x *AddAssetResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddAssetResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *AddAssetResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *AddAssetResponse_Data) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AddAssetResponse_Data) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *AddAssetResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *AddAssetResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *AddAssetResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddAssetResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddAssetResponse_Data) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *AddAssetResponse_Data) GetExchangeTreasuryId() string {
	if x != nil {
		return x.ExchangeTreasuryId
	}
	return ""
}

func (x *AddAssetResponse_Data) GetExchangeChannel() string {
	if x != nil {
		return x.ExchangeChannel
	}
	return ""
}

func (x *AddAssetResponse_Data) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *AddAssetResponse_Data) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

type UpdateAssetResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn             string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa             string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol             Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	Logo               string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus      bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus     bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	DepositDesc        string `protobuf:"bytes,8,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc       string `protobuf:"bytes,9,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	ExchangeTreasuryId string `protobuf:"bytes,10,opt,name=exchange_treasury_id,json=exchangeTreasuryId,proto3" json:"exchange_treasury_id,omitempty"`
	ExchangeChannel    string `protobuf:"bytes,11,opt,name=exchange_channel,json=exchangeChannel,proto3" json:"exchange_channel,omitempty"`
	BalanceUpperLimit  string `protobuf:"bytes,12,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit  string `protobuf:"bytes,13,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	Order              int32  `protobuf:"varint,14,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateAssetResponse_Data) Reset() {
	*x = UpdateAssetResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetResponse_Data) ProtoMessage() {}

func (x *UpdateAssetResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateAssetResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{22, 0}
}

func (x *UpdateAssetResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssetResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *UpdateAssetResponse_Data) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *UpdateAssetResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *UpdateAssetResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetExchangeTreasuryId() string {
	if x != nil {
		return x.ExchangeTreasuryId
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetExchangeChannel() string {
	if x != nil {
		return x.ExchangeChannel
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *UpdateAssetResponse_Data) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type ListAssetResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total        int32                            `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	AssetSetting *AssetSettingResponse_Data       `protobuf:"bytes,4,opt,name=asset_setting,json=assetSetting,proto3" json:"asset_setting,omitempty"`
	Assets       []*ListAssetResponse_Data_Assets `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets,omitempty"`
	CsvName      string                           `protobuf:"bytes,3,opt,name=csv_name,json=csvName,proto3" json:"csv_name,omitempty"`
}

func (x *ListAssetResponse_Data) Reset() {
	*x = ListAssetResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetResponse_Data) ProtoMessage() {}

func (x *ListAssetResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetResponse_Data.ProtoReflect.Descriptor instead.
func (*ListAssetResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{24, 0}
}

func (x *ListAssetResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAssetResponse_Data) GetAssetSetting() *AssetSettingResponse_Data {
	if x != nil {
		return x.AssetSetting
	}
	return nil
}

func (x *ListAssetResponse_Data) GetAssets() []*ListAssetResponse_Data_Assets {
	if x != nil {
		return x.Assets
	}
	return nil
}

func (x *ListAssetResponse_Data) GetCsvName() string {
	if x != nil {
		return x.CsvName
	}
	return ""
}

type ListAssetResponse_Data_Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn             string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa             string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol             Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	Logo               string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus      bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus     bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	DepositDesc        string `protobuf:"bytes,8,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc       string `protobuf:"bytes,9,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	Order              int32  `protobuf:"varint,10,opt,name=order,proto3" json:"order,omitempty"`
	ExchangeTreasuryId string `protobuf:"bytes,11,opt,name=exchange_treasury_id,json=exchangeTreasuryId,proto3" json:"exchange_treasury_id,omitempty"`
	ExchangeChannel    string `protobuf:"bytes,12,opt,name=exchange_channel,json=exchangeChannel,proto3" json:"exchange_channel,omitempty"`
	BalanceUpperLimit  string `protobuf:"bytes,13,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit  string `protobuf:"bytes,14,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
}

func (x *ListAssetResponse_Data_Assets) Reset() {
	*x = ListAssetResponse_Data_Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetResponse_Data_Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetResponse_Data_Assets) ProtoMessage() {}

func (x *ListAssetResponse_Data_Assets) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetResponse_Data_Assets.ProtoReflect.Descriptor instead.
func (*ListAssetResponse_Data_Assets) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{24, 0, 0}
}

func (x *ListAssetResponse_Data_Assets) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListAssetResponse_Data_Assets) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *ListAssetResponse_Data_Assets) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *ListAssetResponse_Data_Assets) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *ListAssetResponse_Data_Assets) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *ListAssetResponse_Data_Assets) GetExchangeTreasuryId() string {
	if x != nil {
		return x.ExchangeTreasuryId
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetExchangeChannel() string {
	if x != nil {
		return x.ExchangeChannel
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *ListAssetResponse_Data_Assets) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

type FilterAssetNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetSetting  *AssetSettingResponse_Data                      `protobuf:"bytes,1,opt,name=asset_setting,json=assetSetting,proto3" json:"asset_setting,omitempty"`
	AssetNetworks []*FilterAssetNetworkResponse_Data_AssetNetwork `protobuf:"bytes,2,rep,name=asset_networks,json=assetNetworks,proto3" json:"asset_networks,omitempty"`
}

func (x *FilterAssetNetworkResponse_Data) Reset() {
	*x = FilterAssetNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkResponse_Data) ProtoMessage() {}

func (x *FilterAssetNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{26, 0}
}

func (x *FilterAssetNetworkResponse_Data) GetAssetSetting() *AssetSettingResponse_Data {
	if x != nil {
		return x.AssetSetting
	}
	return nil
}

func (x *FilterAssetNetworkResponse_Data) GetAssetNetworks() []*FilterAssetNetworkResponse_Data_AssetNetwork {
	if x != nil {
		return x.AssetNetworks
	}
	return nil
}

type FilterAssetNetworkResponse_Data_AssetNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetSymbol               Symbol                                   `protobuf:"varint,2,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	TokenStandard             string                                   `protobuf:"bytes,3,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	TokenStandardInfo         *FilterAssetNetworkResponse_Data_Network `protobuf:"bytes,24,opt,name=token_standard_info,json=tokenStandardInfo,proto3" json:"token_standard_info,omitempty"`
	DepositStatus             bool                                     `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	MinDeposit                string                                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            bool                                     `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	MinWithdraw               string                                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawSpecialTips       string                                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	WithdrawSoftTips          string                                   `protobuf:"bytes,20,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	WithdrawDesc              string                                   `protobuf:"bytes,21,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	FeeMultiplier             string                                   `protobuf:"bytes,22,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 bool                                     `protobuf:"varint,23,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Memo                      string                                   `protobuf:"bytes,26,opt,name=Memo,proto3" json:"Memo,omitempty"`
	Address                   string                                   `protobuf:"bytes,27,opt,name=Address,proto3" json:"Address,omitempty"`
	WithdrawTreasuryID        string                                   `protobuf:"bytes,28,opt,name=WithdrawTreasuryID,proto3" json:"WithdrawTreasuryID,omitempty"`
	DepositTreasuryID         string                                   `protobuf:"bytes,29,opt,name=DepositTreasuryID,proto3" json:"DepositTreasuryID,omitempty"`
	BalanceUpperLimit         string                                   `protobuf:"bytes,30,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                                   `protobuf:"bytes,31,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawFee               string                                   `protobuf:"bytes,32,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	WithdrawPrecision         int32                                    `protobuf:"varint,33,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                                    `protobuf:"varint,34,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawChannelId         string                                   `protobuf:"bytes,35,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"`
	DepositMode               AssetNetworkDepositMode                  `protobuf:"varint,36,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode                 `protobuf:"varint,37,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawAddressIndex      string                                   `protobuf:"bytes,38,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	WithdrawFullNodeSupported bool                                     `protobuf:"varint,39,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  bool                                     `protobuf:"varint,40,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                                   `protobuf:"bytes,41,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                                   `protobuf:"bytes,42,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
	DepositAddressId          string                                   `protobuf:"bytes,43,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	WithdrawAddressId         string                                   `protobuf:"bytes,44,opt,name=withdraw_address_id,json=withdrawAddressId,proto3" json:"withdraw_address_id,omitempty"`
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) Reset() {
	*x = FilterAssetNetworkResponse_Data_AssetNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkResponse_Data_AssetNetwork) ProtoMessage() {}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkResponse_Data_AssetNetwork.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkResponse_Data_AssetNetwork) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{26, 0, 0}
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetTokenStandardInfo() *FilterAssetNetworkResponse_Data_Network {
	if x != nil {
		return x.TokenStandardInfo
	}
	return nil
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawTreasuryID() string {
	if x != nil {
		return x.WithdrawTreasuryID
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositTreasuryID() string {
	if x != nil {
		return x.DepositTreasuryID
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawChannelId() string {
	if x != nil {
		return x.WithdrawChannelId
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawFullNodeSupported() bool {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositFullNodeSupported() bool {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetDepositAddressId() string {
	if x != nil {
		return x.DepositAddressId
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_AssetNetwork) GetWithdrawAddressId() string {
	if x != nil {
		return x.WithdrawAddressId
	}
	return ""
}

type FilterAssetNetworkResponse_Data_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn          string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa          string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol          Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard   string `protobuf:"bytes,5,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus   bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus  bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WalletRegex     string `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer        string `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo            bool   `protobuf:"varint,10,opt,name=memo,proto3" json:"memo,omitempty"`
	MemoRegex       string `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips     string `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc     string `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc    string `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips    string `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation string `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
}

func (x *FilterAssetNetworkResponse_Data_Network) Reset() {
	*x = FilterAssetNetworkResponse_Data_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkResponse_Data_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkResponse_Data_Network) ProtoMessage() {}

func (x *FilterAssetNetworkResponse_Data_Network) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkResponse_Data_Network.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkResponse_Data_Network) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{26, 0, 1}
}

func (x *FilterAssetNetworkResponse_Data_Network) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterAssetNetworkResponse_Data_Network) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *FilterAssetNetworkResponse_Data_Network) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_Network) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_Network) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetMemo() bool {
	if x != nil {
		return x.Memo
	}
	return false
}

func (x *FilterAssetNetworkResponse_Data_Network) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *FilterAssetNetworkResponse_Data_Network) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

type FilterAssetNetworkUserResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetSetting  *AssetSettingResponse_Data                          `protobuf:"bytes,1,opt,name=asset_setting,json=assetSetting,proto3" json:"asset_setting,omitempty"`
	AssetNetworks []*FilterAssetNetworkUserResponse_Data_AssetNetwork `protobuf:"bytes,2,rep,name=asset_networks,json=assetNetworks,proto3" json:"asset_networks,omitempty"`
}

func (x *FilterAssetNetworkUserResponse_Data) Reset() {
	*x = FilterAssetNetworkUserResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkUserResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkUserResponse_Data) ProtoMessage() {}

func (x *FilterAssetNetworkUserResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkUserResponse_Data.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkUserResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{27, 0}
}

func (x *FilterAssetNetworkUserResponse_Data) GetAssetSetting() *AssetSettingResponse_Data {
	if x != nil {
		return x.AssetSetting
	}
	return nil
}

func (x *FilterAssetNetworkUserResponse_Data) GetAssetNetworks() []*FilterAssetNetworkUserResponse_Data_AssetNetwork {
	if x != nil {
		return x.AssetNetworks
	}
	return nil
}

type FilterAssetNetworkUserResponse_Data_AssetNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  uint64                                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetSymbol         Symbol                                       `protobuf:"varint,2,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	TokenStandard       string                                       `protobuf:"bytes,3,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus       bool                                         `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	MinDeposit          string                                       `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit          string                                       `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositSpecialTips  string                                       `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips     string                                       `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc         string                                       `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus      bool                                         `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	MinWithdraw         string                                       `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw         string                                       `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawSpecialTips string                                       `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	WithdrawSoftTips    string                                       `protobuf:"bytes,20,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	WithdrawDesc        string                                       `protobuf:"bytes,21,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	IsDefault           bool                                         `protobuf:"varint,23,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	Memo                string                                       `protobuf:"bytes,26,opt,name=Memo,proto3" json:"Memo,omitempty"`
	Address             string                                       `protobuf:"bytes,27,opt,name=Address,proto3" json:"Address,omitempty"`
	WithdrawFee         string                                       `protobuf:"bytes,32,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	AssetOrder          int32                                        `protobuf:"varint,33,opt,name=asset_order,json=assetOrder,proto3" json:"asset_order,omitempty"`
	WithdrawPrecision   string                                       `protobuf:"bytes,34,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision    string                                       `protobuf:"bytes,35,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	DepositTreasuryID   string                                       `protobuf:"bytes,29,opt,name=DepositTreasuryID,proto3" json:"DepositTreasuryID,omitempty"`
	DepositAddressId    uint64                                       `protobuf:"varint,36,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	TokenStandardInfo   *FilterAssetNetworkUserResponse_Data_Network `protobuf:"bytes,24,opt,name=token_standard_info,json=tokenStandardInfo,proto3" json:"token_standard_info,omitempty"`
	DepositMode         AssetNetworkDepositMode                      `protobuf:"varint,37,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode        AssetNetworkWithdrawMode                     `protobuf:"varint,38,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) Reset() {
	*x = FilterAssetNetworkUserResponse_Data_AssetNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkUserResponse_Data_AssetNetwork) ProtoMessage() {}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkUserResponse_Data_AssetNetwork.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkUserResponse_Data_AssetNetwork) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{27, 0, 0}
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetAssetOrder() int32 {
	if x != nil {
		return x.AssetOrder
	}
	return 0
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawPrecision() string {
	if x != nil {
		return x.WithdrawPrecision
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositPrecision() string {
	if x != nil {
		return x.DepositPrecision
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositTreasuryID() string {
	if x != nil {
		return x.DepositTreasuryID
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositAddressId() uint64 {
	if x != nil {
		return x.DepositAddressId
	}
	return 0
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetTokenStandardInfo() *FilterAssetNetworkUserResponse_Data_Network {
	if x != nil {
		return x.TokenStandardInfo
	}
	return nil
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *FilterAssetNetworkUserResponse_Data_AssetNetwork) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

type FilterAssetNetworkUserResponse_Data_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn          string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa          string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol          Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	TokenStandard   string `protobuf:"bytes,5,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus   bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus  bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	WalletRegex     string `protobuf:"bytes,8,opt,name=wallet_regex,json=walletRegex,proto3" json:"wallet_regex,omitempty"`
	Explorer        string `protobuf:"bytes,9,opt,name=explorer,proto3" json:"explorer,omitempty"`
	Memo            bool   `protobuf:"varint,10,opt,name=memo,proto3" json:"memo,omitempty"`
	MemoRegex       string `protobuf:"bytes,11,opt,name=memo_regex,json=memoRegex,proto3" json:"memo_regex,omitempty"`
	DepositTips     string `protobuf:"bytes,12,opt,name=deposit_tips,json=depositTips,proto3" json:"deposit_tips,omitempty"`
	DepositDesc     string `protobuf:"bytes,13,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc    string `protobuf:"bytes,14,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	WithdrawTips    string `protobuf:"bytes,15,opt,name=withdraw_tips,json=withdrawTips,proto3" json:"withdraw_tips,omitempty"`
	MinConfirmation string `protobuf:"bytes,16,opt,name=min_confirmation,json=minConfirmation,proto3" json:"min_confirmation,omitempty"`
	NetworkOrder    int32  `protobuf:"varint,17,opt,name=network_order,json=networkOrder,proto3" json:"network_order,omitempty"`
}

func (x *FilterAssetNetworkUserResponse_Data_Network) Reset() {
	*x = FilterAssetNetworkUserResponse_Data_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterAssetNetworkUserResponse_Data_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterAssetNetworkUserResponse_Data_Network) ProtoMessage() {}

func (x *FilterAssetNetworkUserResponse_Data_Network) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterAssetNetworkUserResponse_Data_Network.ProtoReflect.Descriptor instead.
func (*FilterAssetNetworkUserResponse_Data_Network) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{27, 0, 1}
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetWalletRegex() string {
	if x != nil {
		return x.WalletRegex
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetExplorer() string {
	if x != nil {
		return x.Explorer
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetMemo() bool {
	if x != nil {
		return x.Memo
	}
	return false
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetMemoRegex() string {
	if x != nil {
		return x.MemoRegex
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetDepositTips() string {
	if x != nil {
		return x.DepositTips
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetWithdrawTips() string {
	if x != nil {
		return x.WithdrawTips
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetMinConfirmation() string {
	if x != nil {
		return x.MinConfirmation
	}
	return ""
}

func (x *FilterAssetNetworkUserResponse_Data_Network) GetNetworkOrder() int32 {
	if x != nil {
		return x.NetworkOrder
	}
	return 0
}

type UpdateOrderAssetRequest_UpdateAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateOrderAssetRequest_UpdateAsset) Reset() {
	*x = UpdateOrderAssetRequest_UpdateAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderAssetRequest_UpdateAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderAssetRequest_UpdateAsset) ProtoMessage() {}

func (x *UpdateOrderAssetRequest_UpdateAsset) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderAssetRequest_UpdateAsset.ProtoReflect.Descriptor instead.
func (*UpdateOrderAssetRequest_UpdateAsset) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{28, 0}
}

func (x *UpdateOrderAssetRequest_UpdateAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrderAssetRequest_UpdateAsset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateOrderAssetResponse_UpdatedAsset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64                              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order     int32                               `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
	AssetInfo *UpdateOrderAssetResponse_AssetInfo `protobuf:"bytes,3,opt,name=asset_info,json=assetInfo,proto3" json:"asset_info,omitempty"`
}

func (x *UpdateOrderAssetResponse_UpdatedAsset) Reset() {
	*x = UpdateOrderAssetResponse_UpdatedAsset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderAssetResponse_UpdatedAsset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderAssetResponse_UpdatedAsset) ProtoMessage() {}

func (x *UpdateOrderAssetResponse_UpdatedAsset) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderAssetResponse_UpdatedAsset.ProtoReflect.Descriptor instead.
func (*UpdateOrderAssetResponse_UpdatedAsset) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{29, 0}
}

func (x *UpdateOrderAssetResponse_UpdatedAsset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateOrderAssetResponse_UpdatedAsset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UpdateOrderAssetResponse_UpdatedAsset) GetAssetInfo() *UpdateOrderAssetResponse_AssetInfo {
	if x != nil {
		return x.AssetInfo
	}
	return nil
}

type UpdateOrderAssetResponse_AssetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameEn         string `protobuf:"bytes,1,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa         string `protobuf:"bytes,2,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol         string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo           string `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus  bool   `protobuf:"varint,5,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus bool   `protobuf:"varint,6,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	DepositDesc    string `protobuf:"bytes,7,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc   string `protobuf:"bytes,8,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
}

func (x *UpdateOrderAssetResponse_AssetInfo) Reset() {
	*x = UpdateOrderAssetResponse_AssetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderAssetResponse_AssetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderAssetResponse_AssetInfo) ProtoMessage() {}

func (x *UpdateOrderAssetResponse_AssetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderAssetResponse_AssetInfo.ProtoReflect.Descriptor instead.
func (*UpdateOrderAssetResponse_AssetInfo) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{29, 1}
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateOrderAssetResponse_AssetInfo) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

type GetAssetResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn             string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa             string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol             Symbol `protobuf:"varint,4,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	Logo               string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	DepositStatus      bool   `protobuf:"varint,6,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	WithdrawStatus     bool   `protobuf:"varint,7,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	DepositDesc        string `protobuf:"bytes,8,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawDesc       string `protobuf:"bytes,9,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	ExchangeTreasuryId string `protobuf:"bytes,10,opt,name=exchange_treasury_id,json=exchangeTreasuryId,proto3" json:"exchange_treasury_id,omitempty"`
	ExchangeChannel    string `protobuf:"bytes,11,opt,name=exchange_channel,json=exchangeChannel,proto3" json:"exchange_channel,omitempty"`
	BalanceUpperLimit  string `protobuf:"bytes,12,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit  string `protobuf:"bytes,13,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	Order              int32  `protobuf:"varint,14,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *GetAssetResponse_Data) Reset() {
	*x = GetAssetResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetResponse_Data) ProtoMessage() {}

func (x *GetAssetResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetResponse_Data.ProtoReflect.Descriptor instead.
func (*GetAssetResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetAssetResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAssetResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *GetAssetResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *GetAssetResponse_Data) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *GetAssetResponse_Data) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *GetAssetResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *GetAssetResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *GetAssetResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *GetAssetResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *GetAssetResponse_Data) GetExchangeTreasuryId() string {
	if x != nil {
		return x.ExchangeTreasuryId
	}
	return ""
}

func (x *GetAssetResponse_Data) GetExchangeChannel() string {
	if x != nil {
		return x.ExchangeChannel
	}
	return ""
}

func (x *GetAssetResponse_Data) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *GetAssetResponse_Data) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *GetAssetResponse_Data) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AddAssetNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                   `protobuf:"varint,25,opt,name=id,proto3" json:"id,omitempty"`
	WithdrawDesc              string                   `protobuf:"bytes,1,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	AssetSymbol               Symbol                   `protobuf:"varint,2,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	TokenStandard             string                   `protobuf:"bytes,3,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus             bool                     `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	MinDeposit                string                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            bool                     `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	MinWithdraw               string                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawChannel           string                   `protobuf:"bytes,18,opt,name=withdraw_channel,json=withdrawChannel,proto3" json:"withdraw_channel,omitempty"`
	WithdrawSpecialTips       string                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	WithdrawSoftTips          string                   `protobuf:"bytes,20,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	FeeMultiplier             string                   `protobuf:"bytes,21,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 bool                     `protobuf:"varint,22,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	WithdrawAddressId         string                   `protobuf:"bytes,23,opt,name=withdraw_address_id,json=withdrawAddressId,proto3" json:"withdraw_address_id,omitempty"`
	DepositAddressId          string                   `protobuf:"bytes,24,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	BalanceUpperLimit         string                   `protobuf:"bytes,27,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                   `protobuf:"bytes,28,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawPrecision         int32                    `protobuf:"varint,29,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                    `protobuf:"varint,30,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawChannelId         string                   `protobuf:"bytes,31,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"`
	DepositMode               AssetNetworkDepositMode  `protobuf:"varint,32,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode `protobuf:"varint,33,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawAddressIndex      string                   `protobuf:"bytes,34,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	WithdrawFullNodeSupported bool                     `protobuf:"varint,35,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  bool                     `protobuf:"varint,36,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                   `protobuf:"bytes,37,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                   `protobuf:"bytes,38,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
}

func (x *AddAssetNetworkResponse_Data) Reset() {
	*x = AddAssetNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddAssetNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddAssetNetworkResponse_Data) ProtoMessage() {}

func (x *AddAssetNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddAssetNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*AddAssetNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{38, 0}
}

func (x *AddAssetNetworkResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AddAssetNetworkResponse_Data) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *AddAssetNetworkResponse_Data) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *AddAssetNetworkResponse_Data) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawChannel() string {
	if x != nil {
		return x.WithdrawChannel
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawAddressId() string {
	if x != nil {
		return x.WithdrawAddressId
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositAddressId() string {
	if x != nil {
		return x.DepositAddressId
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *AddAssetNetworkResponse_Data) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawChannelId() string {
	if x != nil {
		return x.WithdrawChannelId
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetWithdrawFullNodeSupported() bool {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return false
}

func (x *AddAssetNetworkResponse_Data) GetDepositFullNodeSupported() bool {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return false
}

func (x *AddAssetNetworkResponse_Data) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *AddAssetNetworkResponse_Data) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

type UpdateAssetNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	WithdrawSoftTips          string                   `protobuf:"bytes,2,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	WithdrawDesc              string                   `protobuf:"bytes,3,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	DepositStatus             bool                     `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3" json:"deposit_status,omitempty"`
	MinDeposit                string                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            bool                     `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3" json:"withdraw_status,omitempty"`
	MinWithdraw               string                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawSpecialTips       string                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	FeeMultiplier             string                   `protobuf:"bytes,22,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 bool                     `protobuf:"varint,23,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
	WithdrawAddressId         string                   `protobuf:"bytes,24,opt,name=withdraw_address_id,json=withdrawAddressId,proto3" json:"withdraw_address_id,omitempty"`
	DepositAddressId          string                   `protobuf:"bytes,25,opt,name=deposit_address_id,json=depositAddressId,proto3" json:"deposit_address_id,omitempty"`
	AssetSymbol               Symbol                   `protobuf:"varint,26,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	TokenStandard             string                   `protobuf:"bytes,27,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	BalanceUpperLimit         string                   `protobuf:"bytes,29,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                   `protobuf:"bytes,30,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawPrecision         int32                    `protobuf:"varint,32,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                    `protobuf:"varint,31,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawChannelId         string                   `protobuf:"bytes,33,opt,name=withdraw_channel_id,json=withdrawChannelId,proto3" json:"withdraw_channel_id,omitempty"`
	WithdrawFee               string                   `protobuf:"bytes,34,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	DepositMode               AssetNetworkDepositMode  `protobuf:"varint,35,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode `protobuf:"varint,36,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawAddressIndex      string                   `protobuf:"bytes,37,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	WithdrawFullNodeSupported bool                     `protobuf:"varint,38,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  bool                     `protobuf:"varint,39,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                   `protobuf:"bytes,40,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                   `protobuf:"bytes,41,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
}

func (x *UpdateAssetNetworkResponse_Data) Reset() {
	*x = UpdateAssetNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetNetworkResponse_Data) ProtoMessage() {}

func (x *UpdateAssetNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateAssetNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{40, 0}
}

func (x *UpdateAssetNetworkResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositStatus() bool {
	if x != nil {
		return x.DepositStatus
	}
	return false
}

func (x *UpdateAssetNetworkResponse_Data) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawStatus() bool {
	if x != nil {
		return x.WithdrawStatus
	}
	return false
}

func (x *UpdateAssetNetworkResponse_Data) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawAddressId() string {
	if x != nil {
		return x.WithdrawAddressId
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositAddressId() string {
	if x != nil {
		return x.DepositAddressId
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *UpdateAssetNetworkResponse_Data) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawChannelId() string {
	if x != nil {
		return x.WithdrawChannelId
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetWithdrawFullNodeSupported() bool {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return false
}

func (x *UpdateAssetNetworkResponse_Data) GetDepositFullNodeSupported() bool {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return false
}

func (x *UpdateAssetNetworkResponse_Data) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *UpdateAssetNetworkResponse_Data) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

type ListAssetNetworkResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total         int32               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	AssetNetworks []*AssetNetworkList `protobuf:"bytes,2,rep,name=asset_networks,json=assetNetworks,proto3" json:"asset_networks,omitempty"`
	CsvName       string              `protobuf:"bytes,3,opt,name=csv_name,json=csvName,proto3" json:"csv_name,omitempty"`
}

func (x *ListAssetNetworkResponse_Data) Reset() {
	*x = ListAssetNetworkResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAssetNetworkResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAssetNetworkResponse_Data) ProtoMessage() {}

func (x *ListAssetNetworkResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAssetNetworkResponse_Data.ProtoReflect.Descriptor instead.
func (*ListAssetNetworkResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{42, 0}
}

func (x *ListAssetNetworkResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListAssetNetworkResponse_Data) GetAssetNetworks() []*AssetNetworkList {
	if x != nil {
		return x.AssetNetworks
	}
	return nil
}

func (x *ListAssetNetworkResponse_Data) GetCsvName() string {
	if x != nil {
		return x.CsvName
	}
	return ""
}

type AssetNetwork_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetSymbol               Symbol                   `protobuf:"varint,2,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	TokenStandard             string                   `protobuf:"bytes,3,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
	DepositStatus             GrpcBoolean              `protobuf:"varint,4,opt,name=deposit_status,json=depositStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_status,omitempty"`
	MinDeposit                string                   `protobuf:"bytes,5,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	MaxDeposit                string                   `protobuf:"bytes,6,opt,name=max_deposit,json=maxDeposit,proto3" json:"max_deposit,omitempty"`
	DepositAutoApprovalLimit  string                   `protobuf:"bytes,7,opt,name=deposit_auto_approval_limit,json=depositAutoApprovalLimit,proto3" json:"deposit_auto_approval_limit,omitempty"`
	DepositSpecialTips        string                   `protobuf:"bytes,10,opt,name=deposit_special_tips,json=depositSpecialTips,proto3" json:"deposit_special_tips,omitempty"`
	DepositSoftTips           string                   `protobuf:"bytes,11,opt,name=deposit_soft_tips,json=depositSoftTips,proto3" json:"deposit_soft_tips,omitempty"`
	DepositDesc               string                   `protobuf:"bytes,12,opt,name=deposit_desc,json=depositDesc,proto3" json:"deposit_desc,omitempty"`
	WithdrawStatus            GrpcBoolean              `protobuf:"varint,13,opt,name=withdraw_status,json=withdrawStatus,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_status,omitempty"`
	MinWithdraw               string                   `protobuf:"bytes,14,opt,name=min_withdraw,json=minWithdraw,proto3" json:"min_withdraw,omitempty"`
	MaxWithdraw               string                   `protobuf:"bytes,15,opt,name=max_withdraw,json=maxWithdraw,proto3" json:"max_withdraw,omitempty"`
	WithdrawAutoApprovalLimit string                   `protobuf:"bytes,16,opt,name=withdraw_auto_approval_limit,json=withdrawAutoApprovalLimit,proto3" json:"withdraw_auto_approval_limit,omitempty"`
	WithdrawSpecialTips       string                   `protobuf:"bytes,19,opt,name=withdraw_special_tips,json=withdrawSpecialTips,proto3" json:"withdraw_special_tips,omitempty"`
	WithdrawSoftTips          string                   `protobuf:"bytes,20,opt,name=withdraw_soft_tips,json=withdrawSoftTips,proto3" json:"withdraw_soft_tips,omitempty"`
	WithdrawDesc              string                   `protobuf:"bytes,21,opt,name=withdraw_desc,json=withdrawDesc,proto3" json:"withdraw_desc,omitempty"`
	FeeMultiplier             string                   `protobuf:"bytes,22,opt,name=fee_multiplier,json=feeMultiplier,proto3" json:"fee_multiplier,omitempty"`
	IsDefault                 GrpcBoolean              `protobuf:"varint,23,opt,name=is_default,json=isDefault,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"is_default,omitempty"`
	WithdrawTreasuryID        string                   `protobuf:"bytes,25,opt,name=WithdrawTreasuryID,proto3" json:"WithdrawTreasuryID,omitempty"`
	DepositTreasuryID         string                   `protobuf:"bytes,26,opt,name=DepositTreasuryID,proto3" json:"DepositTreasuryID,omitempty"`
	BalanceUpperLimit         string                   `protobuf:"bytes,27,opt,name=balance_upper_limit,json=balanceUpperLimit,proto3" json:"balance_upper_limit,omitempty"`
	BalanceLowerLimit         string                   `protobuf:"bytes,28,opt,name=balance_lower_limit,json=balanceLowerLimit,proto3" json:"balance_lower_limit,omitempty"`
	WithdrawFee               string                   `protobuf:"bytes,29,opt,name=withdraw_fee,json=withdrawFee,proto3" json:"withdraw_fee,omitempty"`
	WithdrawPrecision         int32                    `protobuf:"varint,30,opt,name=withdraw_precision,json=withdrawPrecision,proto3" json:"withdraw_precision,omitempty"`
	DepositPrecision          int32                    `protobuf:"varint,31,opt,name=deposit_precision,json=depositPrecision,proto3" json:"deposit_precision,omitempty"`
	WithdrawAddressIndex      string                   `protobuf:"bytes,32,opt,name=withdraw_address_index,json=withdrawAddressIndex,proto3" json:"withdraw_address_index,omitempty"`
	DepositMode               AssetNetworkDepositMode  `protobuf:"varint,33,opt,name=deposit_mode,json=depositMode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"deposit_mode,omitempty"`
	WithdrawMode              AssetNetworkWithdrawMode `protobuf:"varint,34,opt,name=withdraw_mode,json=withdrawMode,proto3,enum=rabex.api.wallet.AssetNetworkWithdrawMode" json:"withdraw_mode,omitempty"`
	WithdrawFullNodeSupported GrpcBoolean              `protobuf:"varint,35,opt,name=withdraw_full_node_supported,json=withdrawFullNodeSupported,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"withdraw_full_node_supported,omitempty"`
	DepositFullNodeSupported  GrpcBoolean              `protobuf:"varint,36,opt,name=deposit_full_node_supported,json=depositFullNodeSupported,proto3,enum=rabex.api.wallet.GrpcBoolean" json:"deposit_full_node_supported,omitempty"`
	FeeEconomic               string                   `protobuf:"bytes,37,opt,name=fee_economic,json=feeEconomic,proto3" json:"fee_economic,omitempty"`
	FeeFair                   string                   `protobuf:"bytes,38,opt,name=fee_fair,json=feeFair,proto3" json:"fee_fair,omitempty"`
}

func (x *AssetNetwork_Data) Reset() {
	*x = AssetNetwork_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNetwork_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNetwork_Data) ProtoMessage() {}

func (x *AssetNetwork_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNetwork_Data.ProtoReflect.Descriptor instead.
func (*AssetNetwork_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{46, 0}
}

func (x *AssetNetwork_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssetNetwork_Data) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AssetNetwork_Data) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositStatus() GrpcBoolean {
	if x != nil {
		return x.DepositStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetMinDeposit() string {
	if x != nil {
		return x.MinDeposit
	}
	return ""
}

func (x *AssetNetwork_Data) GetMaxDeposit() string {
	if x != nil {
		return x.MaxDeposit
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositAutoApprovalLimit() string {
	if x != nil {
		return x.DepositAutoApprovalLimit
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositSpecialTips() string {
	if x != nil {
		return x.DepositSpecialTips
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositSoftTips() string {
	if x != nil {
		return x.DepositSoftTips
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositDesc() string {
	if x != nil {
		return x.DepositDesc
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawStatus() GrpcBoolean {
	if x != nil {
		return x.WithdrawStatus
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetMinWithdraw() string {
	if x != nil {
		return x.MinWithdraw
	}
	return ""
}

func (x *AssetNetwork_Data) GetMaxWithdraw() string {
	if x != nil {
		return x.MaxWithdraw
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawAutoApprovalLimit() string {
	if x != nil {
		return x.WithdrawAutoApprovalLimit
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawSpecialTips() string {
	if x != nil {
		return x.WithdrawSpecialTips
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawSoftTips() string {
	if x != nil {
		return x.WithdrawSoftTips
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawDesc() string {
	if x != nil {
		return x.WithdrawDesc
	}
	return ""
}

func (x *AssetNetwork_Data) GetFeeMultiplier() string {
	if x != nil {
		return x.FeeMultiplier
	}
	return ""
}

func (x *AssetNetwork_Data) GetIsDefault() GrpcBoolean {
	if x != nil {
		return x.IsDefault
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetWithdrawTreasuryID() string {
	if x != nil {
		return x.WithdrawTreasuryID
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositTreasuryID() string {
	if x != nil {
		return x.DepositTreasuryID
	}
	return ""
}

func (x *AssetNetwork_Data) GetBalanceUpperLimit() string {
	if x != nil {
		return x.BalanceUpperLimit
	}
	return ""
}

func (x *AssetNetwork_Data) GetBalanceLowerLimit() string {
	if x != nil {
		return x.BalanceLowerLimit
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawFee() string {
	if x != nil {
		return x.WithdrawFee
	}
	return ""
}

func (x *AssetNetwork_Data) GetWithdrawPrecision() int32 {
	if x != nil {
		return x.WithdrawPrecision
	}
	return 0
}

func (x *AssetNetwork_Data) GetDepositPrecision() int32 {
	if x != nil {
		return x.DepositPrecision
	}
	return 0
}

func (x *AssetNetwork_Data) GetWithdrawAddressIndex() string {
	if x != nil {
		return x.WithdrawAddressIndex
	}
	return ""
}

func (x *AssetNetwork_Data) GetDepositMode() AssetNetworkDepositMode {
	if x != nil {
		return x.DepositMode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetWithdrawMode() AssetNetworkWithdrawMode {
	if x != nil {
		return x.WithdrawMode
	}
	return AssetNetworkWithdrawMode_ASSET_NETWORK_WITHDRAW_MODE_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetWithdrawFullNodeSupported() GrpcBoolean {
	if x != nil {
		return x.WithdrawFullNodeSupported
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetDepositFullNodeSupported() GrpcBoolean {
	if x != nil {
		return x.DepositFullNodeSupported
	}
	return GrpcBoolean_GRPC_UNSPECIFIED
}

func (x *AssetNetwork_Data) GetFeeEconomic() string {
	if x != nil {
		return x.FeeEconomic
	}
	return ""
}

func (x *AssetNetwork_Data) GetFeeFair() string {
	if x != nil {
		return x.FeeFair
	}
	return ""
}

type GetFullNodeAssetNetworkListResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetNetworks []*AssetNetworkList `protobuf:"bytes,1,rep,name=asset_networks,json=assetNetworks,proto3" json:"asset_networks,omitempty"`
}

func (x *GetFullNodeAssetNetworkListResponse_Data) Reset() {
	*x = GetFullNodeAssetNetworkListResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFullNodeAssetNetworkListResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFullNodeAssetNetworkListResponse_Data) ProtoMessage() {}

func (x *GetFullNodeAssetNetworkListResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFullNodeAssetNetworkListResponse_Data.ProtoReflect.Descriptor instead.
func (*GetFullNodeAssetNetworkListResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{48, 0}
}

func (x *GetFullNodeAssetNetworkListResponse_Data) GetAssetNetworks() []*AssetNetworkList {
	if x != nil {
		return x.AssetNetworks
	}
	return nil
}

type ListBlacklistResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total      int32        `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Blacklists []*Blacklist `protobuf:"bytes,2,rep,name=blacklists,proto3" json:"blacklists,omitempty"`
	CsvName    string       `protobuf:"bytes,3,opt,name=csv_name,json=csvName,proto3" json:"csv_name,omitempty"`
}

func (x *ListBlacklistResponse_Data) Reset() {
	*x = ListBlacklistResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBlacklistResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlacklistResponse_Data) ProtoMessage() {}

func (x *ListBlacklistResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlacklistResponse_Data.ProtoReflect.Descriptor instead.
func (*ListBlacklistResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{55, 0}
}

func (x *ListBlacklistResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListBlacklistResponse_Data) GetBlacklists() []*Blacklist {
	if x != nil {
		return x.Blacklists
	}
	return nil
}

func (x *ListBlacklistResponse_Data) GetCsvName() string {
	if x != nil {
		return x.CsvName
	}
	return ""
}

type ListTinyNetworkResponse_Networks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TokenStandard string `protobuf:"bytes,2,opt,name=token_standard,json=tokenStandard,proto3" json:"token_standard,omitempty"`
}

func (x *ListTinyNetworkResponse_Networks) Reset() {
	*x = ListTinyNetworkResponse_Networks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTinyNetworkResponse_Networks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTinyNetworkResponse_Networks) ProtoMessage() {}

func (x *ListTinyNetworkResponse_Networks) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTinyNetworkResponse_Networks.ProtoReflect.Descriptor instead.
func (*ListTinyNetworkResponse_Networks) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{60, 0}
}

func (x *ListTinyNetworkResponse_Networks) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListTinyNetworkResponse_Networks) GetTokenStandard() string {
	if x != nil {
		return x.TokenStandard
	}
	return ""
}

type ListTinyAssetResponse_Assets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol Symbol `protobuf:"varint,2,opt,name=symbol,proto3,enum=rabex.api.wallet.Symbol" json:"symbol,omitempty"`
	Order  int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *ListTinyAssetResponse_Assets) Reset() {
	*x = ListTinyAssetResponse_Assets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTinyAssetResponse_Assets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTinyAssetResponse_Assets) ProtoMessage() {}

func (x *ListTinyAssetResponse_Assets) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTinyAssetResponse_Assets.ProtoReflect.Descriptor instead.
func (*ListTinyAssetResponse_Assets) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{62, 0}
}

func (x *ListTinyAssetResponse_Assets) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ListTinyAssetResponse_Assets) GetSymbol() Symbol {
	if x != nil {
		return x.Symbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *ListTinyAssetResponse_Assets) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AssetSettingResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetDepositDesc    string `protobuf:"bytes,1,opt,name=asset_deposit_desc,json=assetDepositDesc,proto3" json:"asset_deposit_desc,omitempty"`
	AssetWithdrawDesc   string `protobuf:"bytes,2,opt,name=asset_withdraw_desc,json=assetWithdrawDesc,proto3" json:"asset_withdraw_desc,omitempty"`
	AssetDepositStatus  bool   `protobuf:"varint,3,opt,name=asset_deposit_status,json=assetDepositStatus,proto3" json:"asset_deposit_status,omitempty"`
	AssetWithdrawStatus bool   `protobuf:"varint,4,opt,name=asset_withdraw_status,json=assetWithdrawStatus,proto3" json:"asset_withdraw_status,omitempty"`
}

func (x *AssetSettingResponse_Data) Reset() {
	*x = AssetSettingResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetSettingResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetSettingResponse_Data) ProtoMessage() {}

func (x *AssetSettingResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetSettingResponse_Data.ProtoReflect.Descriptor instead.
func (*AssetSettingResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{63, 0}
}

func (x *AssetSettingResponse_Data) GetAssetDepositDesc() string {
	if x != nil {
		return x.AssetDepositDesc
	}
	return ""
}

func (x *AssetSettingResponse_Data) GetAssetWithdrawDesc() string {
	if x != nil {
		return x.AssetWithdrawDesc
	}
	return ""
}

func (x *AssetSettingResponse_Data) GetAssetDepositStatus() bool {
	if x != nil {
		return x.AssetDepositStatus
	}
	return false
}

func (x *AssetSettingResponse_Data) GetAssetWithdrawStatus() bool {
	if x != nil {
		return x.AssetWithdrawStatus
	}
	return false
}

type UpdateAssetSettingResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetDepositDesc    string `protobuf:"bytes,1,opt,name=asset_deposit_desc,json=assetDepositDesc,proto3" json:"asset_deposit_desc,omitempty"`
	AssetWithdrawDesc   string `protobuf:"bytes,2,opt,name=asset_withdraw_desc,json=assetWithdrawDesc,proto3" json:"asset_withdraw_desc,omitempty"`
	AssetDepositStatus  bool   `protobuf:"varint,3,opt,name=asset_deposit_status,json=assetDepositStatus,proto3" json:"asset_deposit_status,omitempty"`
	AssetWithdrawStatus bool   `protobuf:"varint,4,opt,name=asset_withdraw_status,json=assetWithdrawStatus,proto3" json:"asset_withdraw_status,omitempty"`
}

func (x *UpdateAssetSettingResponse_Data) Reset() {
	*x = UpdateAssetSettingResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetSettingResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetSettingResponse_Data) ProtoMessage() {}

func (x *UpdateAssetSettingResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetSettingResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateAssetSettingResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{65, 0}
}

func (x *UpdateAssetSettingResponse_Data) GetAssetDepositDesc() string {
	if x != nil {
		return x.AssetDepositDesc
	}
	return ""
}

func (x *UpdateAssetSettingResponse_Data) GetAssetWithdrawDesc() string {
	if x != nil {
		return x.AssetWithdrawDesc
	}
	return ""
}

func (x *UpdateAssetSettingResponse_Data) GetAssetDepositStatus() bool {
	if x != nil {
		return x.AssetDepositStatus
	}
	return false
}

func (x *UpdateAssetSettingResponse_Data) GetAssetWithdrawStatus() bool {
	if x != nil {
		return x.AssetWithdrawStatus
	}
	return false
}

type UpdateAssetNetworkSelectorRequest_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateAssetNetworkSelectorRequest_Asset) Reset() {
	*x = UpdateAssetNetworkSelectorRequest_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAssetNetworkSelectorRequest_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAssetNetworkSelectorRequest_Asset) ProtoMessage() {}

func (x *UpdateAssetNetworkSelectorRequest_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAssetNetworkSelectorRequest_Asset.ProtoReflect.Descriptor instead.
func (*UpdateAssetNetworkSelectorRequest_Asset) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{66, 0}
}

func (x *UpdateAssetNetworkSelectorRequest_Asset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateAssetNetworkSelectorRequest_Asset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateTokenStandardSelectorRequest_TokenStandard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateTokenStandardSelectorRequest_TokenStandard) Reset() {
	*x = UpdateTokenStandardSelectorRequest_TokenStandard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTokenStandardSelectorRequest_TokenStandard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTokenStandardSelectorRequest_TokenStandard) ProtoMessage() {}

func (x *UpdateTokenStandardSelectorRequest_TokenStandard) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTokenStandardSelectorRequest_TokenStandard.ProtoReflect.Descriptor instead.
func (*UpdateTokenStandardSelectorRequest_TokenStandard) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{67, 0}
}

func (x *UpdateTokenStandardSelectorRequest_TokenStandard) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateTokenStandardSelectorRequest_TokenStandard) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AssetNetworkSelectors_Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	AssetSymbol    Symbol                                 `protobuf:"varint,2,opt,name=asset_symbol,json=assetSymbol,proto3,enum=rabex.api.wallet.Symbol" json:"asset_symbol,omitempty"`
	Order          int32                                  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	TokenStandards []*AssetNetworkSelectors_TokenStandard `protobuf:"bytes,4,rep,name=token_standards,json=tokenStandards,proto3" json:"token_standards,omitempty"`
}

func (x *AssetNetworkSelectors_Asset) Reset() {
	*x = AssetNetworkSelectors_Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNetworkSelectors_Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNetworkSelectors_Asset) ProtoMessage() {}

func (x *AssetNetworkSelectors_Asset) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNetworkSelectors_Asset.ProtoReflect.Descriptor instead.
func (*AssetNetworkSelectors_Asset) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{68, 0}
}

func (x *AssetNetworkSelectors_Asset) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssetNetworkSelectors_Asset) GetAssetSymbol() Symbol {
	if x != nil {
		return x.AssetSymbol
	}
	return Symbol_UNKNOWN_Symbol
}

func (x *AssetNetworkSelectors_Asset) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *AssetNetworkSelectors_Asset) GetTokenStandards() []*AssetNetworkSelectors_TokenStandard {
	if x != nil {
		return x.TokenStandards
	}
	return nil
}

type AssetNetworkSelectors_TokenStandard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	AssetId uint64 `protobuf:"varint,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	Order   int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AssetNetworkSelectors_TokenStandard) Reset() {
	*x = AssetNetworkSelectors_TokenStandard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetNetworkSelectors_TokenStandard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetNetworkSelectors_TokenStandard) ProtoMessage() {}

func (x *AssetNetworkSelectors_TokenStandard) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetNetworkSelectors_TokenStandard.ProtoReflect.Descriptor instead.
func (*AssetNetworkSelectors_TokenStandard) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{68, 1}
}

func (x *AssetNetworkSelectors_TokenStandard) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssetNetworkSelectors_TokenStandard) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *AssetNetworkSelectors_TokenStandard) GetAssetId() uint64 {
	if x != nil {
		return x.AssetId
	}
	return 0
}

func (x *AssetNetworkSelectors_TokenStandard) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AssetInfo_Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkTokenStandard            string `protobuf:"bytes,1,opt,name=network_token_standard,json=networkTokenStandard,proto3" json:"network_token_standard,omitempty"`
	NetworkNameEn                   string `protobuf:"bytes,2,opt,name=network_name_en,json=networkNameEn,proto3" json:"network_name_en,omitempty"`
	NetworkWithdrawStatus           bool   `protobuf:"varint,3,opt,name=network_withdraw_status,json=networkWithdrawStatus,proto3" json:"network_withdraw_status,omitempty"`
	NetworkDepositStatus            bool   `protobuf:"varint,4,opt,name=network_deposit_status,json=networkDepositStatus,proto3" json:"network_deposit_status,omitempty"`
	NetworkWalletRegex              string `protobuf:"bytes,5,opt,name=network_wallet_regex,json=networkWalletRegex,proto3" json:"network_wallet_regex,omitempty"`
	NetworkMemoRegex                string `protobuf:"bytes,6,opt,name=network_memo_regex,json=networkMemoRegex,proto3" json:"network_memo_regex,omitempty"`
	AssetNetworkFeeMultiplier       string `protobuf:"bytes,7,opt,name=asset_network_fee_multiplier,json=assetNetworkFeeMultiplier,proto3" json:"asset_network_fee_multiplier,omitempty"`
	AssetNetworkDepositStatus       bool   `protobuf:"varint,8,opt,name=asset_network_deposit_status,json=assetNetworkDepositStatus,proto3" json:"asset_network_deposit_status,omitempty"`
	AssetNetworkWithdrawStatus      bool   `protobuf:"varint,9,opt,name=asset_network_withdraw_status,json=assetNetworkWithdrawStatus,proto3" json:"asset_network_withdraw_status,omitempty"`
	AssetNetworkDepositDesc         string `protobuf:"bytes,10,opt,name=asset_network_deposit_desc,json=assetNetworkDepositDesc,proto3" json:"asset_network_deposit_desc,omitempty"`
	AssetNetworkWithdrawDesc        string `protobuf:"bytes,11,opt,name=asset_network_withdraw_desc,json=assetNetworkWithdrawDesc,proto3" json:"asset_network_withdraw_desc,omitempty"`
	AssetNetworkWithdrawSpecialTips string `protobuf:"bytes,12,opt,name=asset_network_withdraw_special_tips,json=assetNetworkWithdrawSpecialTips,proto3" json:"asset_network_withdraw_special_tips,omitempty"`
	AssetNetworkMinWithdraw         string `protobuf:"bytes,13,opt,name=asset_network_min_withdraw,json=assetNetworkMinWithdraw,proto3" json:"asset_network_min_withdraw,omitempty"`
	AssetNetworkDepositChannel      string `protobuf:"bytes,14,opt,name=asset_network_deposit_channel,json=assetNetworkDepositChannel,proto3" json:"asset_network_deposit_channel,omitempty"`
	AssetNetworkWithdrawChannel     string `protobuf:"bytes,15,opt,name=asset_network_withdraw_channel,json=assetNetworkWithdrawChannel,proto3" json:"asset_network_withdraw_channel,omitempty"`
	SaeedWithdrawFee                string `protobuf:"bytes,16,opt,name=saeed_withdraw_fee,json=saeedWithdrawFee,proto3" json:"saeed_withdraw_fee,omitempty"`
	MinConfirm                      string `protobuf:"bytes,17,opt,name=min_confirm,json=minConfirm,proto3" json:"min_confirm,omitempty"`
	IsDefault                       bool   `protobuf:"varint,18,opt,name=is_default,json=isDefault,proto3" json:"is_default,omitempty"`
}

func (x *AssetInfo_Network) Reset() {
	*x = AssetInfo_Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetInfo_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetInfo_Network) ProtoMessage() {}

func (x *AssetInfo_Network) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetInfo_Network.ProtoReflect.Descriptor instead.
func (*AssetInfo_Network) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{72, 0}
}

func (x *AssetInfo_Network) GetNetworkTokenStandard() string {
	if x != nil {
		return x.NetworkTokenStandard
	}
	return ""
}

func (x *AssetInfo_Network) GetNetworkNameEn() string {
	if x != nil {
		return x.NetworkNameEn
	}
	return ""
}

func (x *AssetInfo_Network) GetNetworkWithdrawStatus() bool {
	if x != nil {
		return x.NetworkWithdrawStatus
	}
	return false
}

func (x *AssetInfo_Network) GetNetworkDepositStatus() bool {
	if x != nil {
		return x.NetworkDepositStatus
	}
	return false
}

func (x *AssetInfo_Network) GetNetworkWalletRegex() string {
	if x != nil {
		return x.NetworkWalletRegex
	}
	return ""
}

func (x *AssetInfo_Network) GetNetworkMemoRegex() string {
	if x != nil {
		return x.NetworkMemoRegex
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkFeeMultiplier() string {
	if x != nil {
		return x.AssetNetworkFeeMultiplier
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkDepositStatus() bool {
	if x != nil {
		return x.AssetNetworkDepositStatus
	}
	return false
}

func (x *AssetInfo_Network) GetAssetNetworkWithdrawStatus() bool {
	if x != nil {
		return x.AssetNetworkWithdrawStatus
	}
	return false
}

func (x *AssetInfo_Network) GetAssetNetworkDepositDesc() string {
	if x != nil {
		return x.AssetNetworkDepositDesc
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkWithdrawDesc() string {
	if x != nil {
		return x.AssetNetworkWithdrawDesc
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkWithdrawSpecialTips() string {
	if x != nil {
		return x.AssetNetworkWithdrawSpecialTips
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkMinWithdraw() string {
	if x != nil {
		return x.AssetNetworkMinWithdraw
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkDepositChannel() string {
	if x != nil {
		return x.AssetNetworkDepositChannel
	}
	return ""
}

func (x *AssetInfo_Network) GetAssetNetworkWithdrawChannel() string {
	if x != nil {
		return x.AssetNetworkWithdrawChannel
	}
	return ""
}

func (x *AssetInfo_Network) GetSaeedWithdrawFee() string {
	if x != nil {
		return x.SaeedWithdrawFee
	}
	return ""
}

func (x *AssetInfo_Network) GetMinConfirm() string {
	if x != nil {
		return x.MinConfirm
	}
	return ""
}

func (x *AssetInfo_Network) GetIsDefault() bool {
	if x != nil {
		return x.IsDefault
	}
	return false
}

type GetAllAssetResponse_SymbolKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string     `protobuf:"bytes,1,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	Info   *AssetData `protobuf:"bytes,2,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAllAssetResponse_SymbolKey) Reset() {
	*x = GetAllAssetResponse_SymbolKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAssetResponse_SymbolKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAssetResponse_SymbolKey) ProtoMessage() {}

func (x *GetAllAssetResponse_SymbolKey) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAssetResponse_SymbolKey.ProtoReflect.Descriptor instead.
func (*GetAllAssetResponse_SymbolKey) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{78, 0}
}

func (x *GetAllAssetResponse_SymbolKey) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetAllAssetResponse_SymbolKey) GetInfo() *AssetData {
	if x != nil {
		return x.Info
	}
	return nil
}

type AddTreasuryResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Broker      string       `protobuf:"bytes,3,opt,name=broker,proto3" json:"broker,omitempty"`
	Description string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Provider    string       `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Meta        string       `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	Type        TreasuryType `protobuf:"varint,8,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
	TreasuryID  string       `protobuf:"bytes,10,opt,name=treasuryID,proto3" json:"treasuryID,omitempty"`
}

func (x *AddTreasuryResponse_Data) Reset() {
	*x = AddTreasuryResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTreasuryResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTreasuryResponse_Data) ProtoMessage() {}

func (x *AddTreasuryResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTreasuryResponse_Data.ProtoReflect.Descriptor instead.
func (*AddTreasuryResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{81, 0}
}

func (x *AddTreasuryResponse_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AddTreasuryResponse_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddTreasuryResponse_Data) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *AddTreasuryResponse_Data) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddTreasuryResponse_Data) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *AddTreasuryResponse_Data) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *AddTreasuryResponse_Data) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

func (x *AddTreasuryResponse_Data) GetTreasuryID() string {
	if x != nil {
		return x.TreasuryID
	}
	return ""
}

type GetTreasuryByIdResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Broker      string       `protobuf:"bytes,3,opt,name=broker,proto3" json:"broker,omitempty"`
	Description string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Provider    string       `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Address     string       `protobuf:"bytes,6,opt,name=address,proto3" json:"address,omitempty"`
	Meta        string       `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	Type        TreasuryType `protobuf:"varint,8,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
	Memo        string       `protobuf:"bytes,9,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *GetTreasuryByIdResponse_Data) Reset() {
	*x = GetTreasuryByIdResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTreasuryByIdResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTreasuryByIdResponse_Data) ProtoMessage() {}

func (x *GetTreasuryByIdResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTreasuryByIdResponse_Data.ProtoReflect.Descriptor instead.
func (*GetTreasuryByIdResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{83, 0}
}

func (x *GetTreasuryByIdResponse_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *GetTreasuryByIdResponse_Data) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

func (x *GetTreasuryByIdResponse_Data) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

type UpdateTreasuryResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string       `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Broker      string       `protobuf:"bytes,3,opt,name=broker,proto3" json:"broker,omitempty"`
	Description string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Provider    string       `protobuf:"bytes,5,opt,name=provider,proto3" json:"provider,omitempty"`
	Meta        string       `protobuf:"bytes,7,opt,name=meta,proto3" json:"meta,omitempty"`
	Type        TreasuryType `protobuf:"varint,8,opt,name=type,proto3,enum=rabex.api.wallet.TreasuryType" json:"type,omitempty"`
}

func (x *UpdateTreasuryResponse_Data) Reset() {
	*x = UpdateTreasuryResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTreasuryResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTreasuryResponse_Data) ProtoMessage() {}

func (x *UpdateTreasuryResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTreasuryResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateTreasuryResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{87, 0}
}

func (x *UpdateTreasuryResponse_Data) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateTreasuryResponse_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateTreasuryResponse_Data) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *UpdateTreasuryResponse_Data) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateTreasuryResponse_Data) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *UpdateTreasuryResponse_Data) GetMeta() string {
	if x != nil {
		return x.Meta
	}
	return ""
}

func (x *UpdateTreasuryResponse_Data) GetType() TreasuryType {
	if x != nil {
		return x.Type
	}
	return TreasuryType_TREASURY_TYPE_UNSPECIFIED
}

type ListUserAssetResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetSetting *AssetSettingResponse_Data `protobuf:"bytes,2,opt,name=asset_setting,json=assetSetting,proto3" json:"asset_setting,omitempty"`
	Assets       []*UserAsset               `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets,omitempty"`
}

func (x *ListUserAssetResponse_Data) Reset() {
	*x = ListUserAssetResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserAssetResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserAssetResponse_Data) ProtoMessage() {}

func (x *ListUserAssetResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserAssetResponse_Data.ProtoReflect.Descriptor instead.
func (*ListUserAssetResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{91, 0}
}

func (x *ListUserAssetResponse_Data) GetAssetSetting() *AssetSettingResponse_Data {
	if x != nil {
		return x.AssetSetting
	}
	return nil
}

func (x *ListUserAssetResponse_Data) GetAssets() []*UserAsset {
	if x != nil {
		return x.Assets
	}
	return nil
}

type UpdateExternalExchangeSettingByCSVRequestSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Upper   float32 `protobuf:"fixed32,2,opt,name=upper,proto3" json:"upper,omitempty"`
	Lower   float32 `protobuf:"fixed32,3,opt,name=lower,proto3" json:"lower,omitempty"`
	Initial float32 `protobuf:"fixed32,4,opt,name=initial,proto3" json:"initial,omitempty"`
}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) Reset() {
	*x = UpdateExternalExchangeSettingByCSVRequestSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateExternalExchangeSettingByCSVRequestSetting) ProtoMessage() {}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateExternalExchangeSettingByCSVRequestSetting.ProtoReflect.Descriptor instead.
func (*UpdateExternalExchangeSettingByCSVRequestSetting) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{93, 0}
}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) GetUpper() float32 {
	if x != nil {
		return x.Upper
	}
	return 0
}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) GetLower() float32 {
	if x != nil {
		return x.Lower
	}
	return 0
}

func (x *UpdateExternalExchangeSettingByCSVRequestSetting) GetInitial() float32 {
	if x != nil {
		return x.Initial
	}
	return 0
}

type GetAssetNetworkDepositModeResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode                AssetNetworkDepositMode `protobuf:"varint,1,opt,name=mode,proto3,enum=rabex.api.wallet.AssetNetworkDepositMode" json:"mode,omitempty"`
	IsMemoRequired      bool                    `protobuf:"varint,2,opt,name=is_memo_required,json=isMemoRequired,proto3" json:"is_memo_required,omitempty"`
	DepositAddressIndex string                  `protobuf:"bytes,3,opt,name=deposit_address_index,json=depositAddressIndex,proto3" json:"deposit_address_index,omitempty"`
}

func (x *GetAssetNetworkDepositModeResponse_Data) Reset() {
	*x = GetAssetNetworkDepositModeResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAssetNetworkDepositModeResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAssetNetworkDepositModeResponse_Data) ProtoMessage() {}

func (x *GetAssetNetworkDepositModeResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAssetNetworkDepositModeResponse_Data.ProtoReflect.Descriptor instead.
func (*GetAssetNetworkDepositModeResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{95, 0}
}

func (x *GetAssetNetworkDepositModeResponse_Data) GetMode() AssetNetworkDepositMode {
	if x != nil {
		return x.Mode
	}
	return AssetNetworkDepositMode_ASSET_NETWORK_DEPOSIT_MODE_UNSPECIFIED
}

func (x *GetAssetNetworkDepositModeResponse_Data) GetIsMemoRequired() bool {
	if x != nil {
		return x.IsMemoRequired
	}
	return false
}

func (x *GetAssetNetworkDepositModeResponse_Data) GetDepositAddressIndex() string {
	if x != nil {
		return x.DepositAddressIndex
	}
	return ""
}

type CheckAssetNetworkFeeFairnessResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fairness FeeFairness `protobuf:"varint,1,opt,name=fairness,proto3,enum=rabex.api.wallet.FeeFairness" json:"fairness,omitempty"`
}

func (x *CheckAssetNetworkFeeFairnessResponse_Data) Reset() {
	*x = CheckAssetNetworkFeeFairnessResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wallet_messages_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckAssetNetworkFeeFairnessResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckAssetNetworkFeeFairnessResponse_Data) ProtoMessage() {}

func (x *CheckAssetNetworkFeeFairnessResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_wallet_messages_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckAssetNetworkFeeFairnessResponse_Data.ProtoReflect.Descriptor instead.
func (*CheckAssetNetworkFeeFairnessResponse_Data) Descriptor() ([]byte, []int) {
	return file_wallet_messages_proto_rawDescGZIP(), []int{97, 0}
}

func (x *CheckAssetNetworkFeeFairnessResponse_Data) GetFairness() FeeFairness {
	if x != nil {
		return x.Fairness
	}
	return FeeFairness_FEE_FAIRNESS_UNSPECIFIED
}

var File_wallet_messages_proto protoreflect.FileDescriptor

var file_wallet_messages_proto_rawDesc = []byte{
	0x0a, 0x15, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd7, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3d, 0x0a,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a,
	0x14, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0x4c, 0x0a, 0x15, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfe, 0x02,
	0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x65,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x46, 0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x91,
	0x01, 0x0a, 0x15, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x61, 0x6e, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x22, 0x4e, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x61,
	0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x22, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x9c, 0x01,
	0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xf9, 0x01, 0x0a,
	0x0b, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x22, 0x4e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xac, 0x05, 0x0a, 0x11, 0x41, 0x64, 0x64,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x46, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d,
	0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d,
	0x65, 0x6d, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x74, 0x69, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa8, 0x05, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x41, 0x64, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd2, 0x04,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xec, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61,
	0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x44, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x04, 0x6d, 0x65,
	0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0xae, 0x05, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xd2, 0x04,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32,
	0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x43, 0x73, 0x76, 0x22, 0xb9, 0x06,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xe1, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x08, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x76, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x76, 0x4e, 0x61, 0x6d, 0x65,
	0x1a, 0xd6, 0x04, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa8,
	0x05, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xd2, 0x04, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9c, 0x04, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a,
	0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70,
	0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f,
	0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcb, 0x04, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41,
	0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf9, 0x03, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23,
	0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47,
	0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd1, 0x04, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf9,
	0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x7f, 0x0a, 0x10, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x43, 0x73, 0x76, 0x22, 0xa4, 0x06, 0x0a, 0x11,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0xd0, 0x05, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x50,
	0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x47, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x73, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x76,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x76,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xfb, 0x03, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46,
	0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x3e, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x22, 0xeb, 0x14, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x85, 0x14, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x65, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0x9f, 0x0e, 0x0a, 0x0c, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12,
	0x69, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x11, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x66,
	0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65,
	0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x49, 0x44, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x1a, 0xa1, 0x04, 0x0a,
	0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65,
	0x67, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x74, 0x69, 0x70,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb6, 0x10, 0x0a, 0x1e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc8,
	0x0f, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x0e, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x42, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x1a, 0xb9, 0x09, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x66, 0x74,
	0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x65, 0x6d, 0x6f,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x79, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x6d, 0x0a, 0x13, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x11,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65,
	0x1a, 0xc6, 0x04, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27,
	0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x69, 0x70, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x73, 0x1a, 0x33, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xfb, 0x03, 0x0a, 0x18, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52,
	0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x89, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x53,
	0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x81, 0x02, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x22, 0x21, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x22, 0x15, 0x0a, 0x13, 0x57, 0x61, 0x74, 0x63,
	0x68, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x52, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x74,
	0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x18, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x69,
	0x63, 0x6b, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcb, 0x04, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf9, 0x03, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70,
	0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xf0, 0x0c, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72,
	0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53,
	0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74,
	0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d,
	0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a,
	0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x5e, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x5c, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x22, 0x88, 0x0d, 0x0a, 0x17,
	0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa8, 0x0c, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x66, 0x74, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x22, 0xf4, 0x0c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x44, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a,
	0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12,
	0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30,
	0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74,
	0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x46, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61,
	0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3f, 0x0a,
	0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x5e, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x5c, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75,
	0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d,
	0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x22, 0x86, 0x0d,
	0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xa0, 0x0c, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61,
	0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66,
	0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70,
	0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2e, 0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x65, 0x65,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f,
	0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x22, 0xbc, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x3c, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69,
	0x74, 0x68, 0x43, 0x73, 0x76, 0x22, 0xe4, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x82, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x76, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x76, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x28, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd5, 0x0d, 0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x8b, 0x0d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x44, 0x0a,
	0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x46, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x0e, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x6f,
	0x66, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x66,
	0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x12, 0x2e, 0x0a, 0x12, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x49, 0x44, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65,
	0x65, 0x12, 0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a,
	0x16, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x4c, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x5e, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63,
	0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x5c, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75,
	0x6c, 0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x42,
	0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x22, 0x24,
	0x0a, 0x22, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x51, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x49, 0x0a, 0x0e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22,
	0xed, 0x0c, 0x0a, 0x10, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x30, 0x0a, 0x14, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69,
	0x70, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x6f,
	0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x54, 0x69, 0x70, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69,
	0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x75, 0x74,
	0x6f, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x32, 0x0a, 0x15, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x54, 0x69, 0x70, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x6f, 0x66, 0x74, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x6f, 0x66, 0x74, 0x54,
	0x69, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x65, 0x65, 0x5f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x66, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x55, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x4c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x12,
	0x2d, 0x0a, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4f, 0x0a, 0x0d, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x3f, 0x0a, 0x1c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x3d, 0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x66, 0x75, 0x6c,
	0x6c, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x46,
	0x75, 0x6c, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x65, 0x63, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x45, 0x63, 0x6f, 0x6e, 0x6f,
	0x6d, 0x69, 0x63, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x5f, 0x66, 0x61, 0x69, 0x72, 0x18,
	0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x12, 0x3f,
	0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22,
	0xf3, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86,
	0x02, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x63, 0x73, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74, 0x68, 0x43,
	0x73, 0x76, 0x22, 0xcf, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x74,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3b, 0x0a, 0x0a,
	0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x76,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x76,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b,
	0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x9c, 0x02, 0x0a, 0x09, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x3f, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6e, 0x79, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6e,
	0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6e, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x22, 0x2a, 0x0a, 0x14, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x69, 0x6e, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x69, 0x6e, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x69, 0x6e, 0x79, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x60, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xa4, 0x02, 0x0a, 0x14, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xca, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdf,
	0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x32, 0x0a, 0x15,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xb0, 0x02, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xca, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x12, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65, 0x73, 0x63, 0x12, 0x30, 0x0a,
	0x14, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x0a, 0x15, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x1a, 0x2d, 0x0a, 0x05,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x22,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x6b, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e,
	0x64, 0x61, 0x72, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x52,
	0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x35, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8f, 0x03, 0x0a, 0x15, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xca, 0x01, 0x0a, 0x05, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3b, 0x0a,
	0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0b, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x5e, 0x0a, 0x0f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61,
	0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64,
	0x52, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x73,
	0x1a, 0x66, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xfe, 0x0a, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x30, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x11, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x6c, 0x6c, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x79, 0x69,
	0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x3f, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x1a, 0xf7, 0x07, 0x0a, 0x07, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x34, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x6d,
	0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x6d, 0x6f, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x1c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x1d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x3d, 0x0a, 0x1b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x44, 0x65,
	0x73, 0x63, 0x12, 0x4c, 0x0a, 0x23, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x70, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x41, 0x0a,
	0x1d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x43, 0x0a, 0x1e, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x61, 0x65, 0x65, 0x64, 0x5f, 0x77,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x73, 0x61, 0x65, 0x65, 0x64, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x22, 0x61, 0x0a, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x1f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x99, 0x02, 0x0a, 0x1d, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6e,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x22, 0xd7, 0x02, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe4,
	0x02, 0x0a, 0x24, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x70, 0x70, 0x65, 0x72,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x75, 0x70, 0x70, 0x65,
	0x72, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x62,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x54, 0x0a, 0x09, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x09, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e,
	0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0xec, 0x01, 0x0a, 0x12, 0x41, 0x64,
	0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x49, 0x44, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0xcc, 0x02, 0x0a, 0x13, 0x41, 0x64, 0x64,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0xf4, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x49, 0x44, 0x4a, 0x04, 0x08, 0x06, 0x10,
	0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xd6, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xf6, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x72, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xd9, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa6, 0x02,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc8, 0x01, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x77, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x46, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xfa, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x65, 0x61,
	0x73, 0x75, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x8d, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x06, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x22, 0xa7, 0x02, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xed, 0x01, 0x0a, 0x29, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x53,
	0x56, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x43, 0x53, 0x56,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x5f, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x21, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22,
	0x99, 0x02, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa3, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x95, 0x01, 0x0a, 0x23,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x46, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x65, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x65, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x22, 0xba, 0x01, 0x0a, 0x24, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46, 0x65, 0x65, 0x46, 0x61, 0x69, 0x72,
	0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x46,
	0x65, 0x65, 0x46, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x41, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2e, 0x46, 0x65, 0x65, 0x46, 0x61,
	0x69, 0x72, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x08, 0x66, 0x61, 0x69, 0x72, 0x6e, 0x65, 0x73, 0x73,
	0x42, 0x2e, 0x5a, 0x1a, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3b, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x92, 0x41,
	0x0f, 0x1a, 0x0d, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x31, 0x30, 0x30, 0x2e, 0x36,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wallet_messages_proto_rawDescOnce sync.Once
	file_wallet_messages_proto_rawDescData = file_wallet_messages_proto_rawDesc
)

func file_wallet_messages_proto_rawDescGZIP() []byte {
	file_wallet_messages_proto_rawDescOnce.Do(func() {
		file_wallet_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_wallet_messages_proto_rawDescData)
	})
	return file_wallet_messages_proto_rawDescData
}

var file_wallet_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 140)
var file_wallet_messages_proto_goTypes = []interface{}{
	(*DepositSanity)(nil),                                    // 0: rabex.api.wallet.DepositSanity
	(*DepositSanityRequest)(nil),                             // 1: rabex.api.wallet.DepositSanityRequest
	(*DepositSanityResponse)(nil),                            // 2: rabex.api.wallet.DepositSanityResponse
	(*WithdrawSanity)(nil),                                   // 3: rabex.api.wallet.WithdrawSanity
	(*WithdrawSanityRequest)(nil),                            // 4: rabex.api.wallet.WithdrawSanityRequest
	(*WithdrawSanityResponse)(nil),                           // 5: rabex.api.wallet.WithdrawSanityResponse
	(*SimpleSelector)(nil),                                   // 6: rabex.api.wallet.SimpleSelector
	(*FiatSelector)(nil),                                     // 7: rabex.api.wallet.FiatSelector
	(*Selector)(nil),                                         // 8: rabex.api.wallet.Selector
	(*SubSelector)(nil),                                      // 9: rabex.api.wallet.SubSelector
	(*Pagination)(nil),                                       // 10: rabex.api.wallet.Pagination
	(*AddNetworkRequest)(nil),                                // 11: rabex.api.wallet.AddNetworkRequest
	(*AddNetworkResponse)(nil),                               // 12: rabex.api.wallet.AddNetworkResponse
	(*UpdateNetworkRequest)(nil),                             // 13: rabex.api.wallet.UpdateNetworkRequest
	(*UpdateNetworkResponse)(nil),                            // 14: rabex.api.wallet.UpdateNetworkResponse
	(*ListNetworkRequest)(nil),                               // 15: rabex.api.wallet.ListNetworkRequest
	(*ListNetworkResponse)(nil),                              // 16: rabex.api.wallet.ListNetworkResponse
	(*GetNetworkRequest)(nil),                                // 17: rabex.api.wallet.GetNetworkRequest
	(*GetNetworkResponse)(nil),                               // 18: rabex.api.wallet.GetNetworkResponse
	(*AddAssetRequest)(nil),                                  // 19: rabex.api.wallet.AddAssetRequest
	(*AddAssetResponse)(nil),                                 // 20: rabex.api.wallet.AddAssetResponse
	(*UpdateAssetRequest)(nil),                               // 21: rabex.api.wallet.UpdateAssetRequest
	(*UpdateAssetResponse)(nil),                              // 22: rabex.api.wallet.UpdateAssetResponse
	(*ListAssetRequest)(nil),                                 // 23: rabex.api.wallet.ListAssetRequest
	(*ListAssetResponse)(nil),                                // 24: rabex.api.wallet.ListAssetResponse
	(*FilterAssetNetworkRequest)(nil),                        // 25: rabex.api.wallet.FilterAssetNetworkRequest
	(*FilterAssetNetworkResponse)(nil),                       // 26: rabex.api.wallet.FilterAssetNetworkResponse
	(*FilterAssetNetworkUserResponse)(nil),                   // 27: rabex.api.wallet.FilterAssetNetworkUserResponse
	(*UpdateOrderAssetRequest)(nil),                          // 28: rabex.api.wallet.UpdateOrderAssetRequest
	(*UpdateOrderAssetResponse)(nil),                         // 29: rabex.api.wallet.UpdateOrderAssetResponse
	(*GetAssetRequest)(nil),                                  // 30: rabex.api.wallet.GetAssetRequest
	(*WatchAssetsRequest)(nil),                               // 31: rabex.api.wallet.WatchAssetsRequest
	(*WatchAssetsResponse)(nil),                              // 32: rabex.api.wallet.WatchAssetsResponse
	(*Config)(nil),                                           // 33: rabex.api.wallet.Config
	(*CreateConfigRequest)(nil),                              // 34: rabex.api.wallet.CreateConfigRequest
	(*CreateConfigResponse)(nil),                             // 35: rabex.api.wallet.CreateConfigResponse
	(*GetAssetResponse)(nil),                                 // 36: rabex.api.wallet.GetAssetResponse
	(*AddAssetNetworkRequest)(nil),                           // 37: rabex.api.wallet.AddAssetNetworkRequest
	(*AddAssetNetworkResponse)(nil),                          // 38: rabex.api.wallet.AddAssetNetworkResponse
	(*UpdateAssetNetworkRequest)(nil),                        // 39: rabex.api.wallet.UpdateAssetNetworkRequest
	(*UpdateAssetNetworkResponse)(nil),                       // 40: rabex.api.wallet.UpdateAssetNetworkResponse
	(*ListAssetNetworkRequest)(nil),                          // 41: rabex.api.wallet.ListAssetNetworkRequest
	(*ListAssetNetworkResponse)(nil),                         // 42: rabex.api.wallet.ListAssetNetworkResponse
	(*GetAssetNetworkRequest)(nil),                           // 43: rabex.api.wallet.GetAssetNetworkRequest
	(*GetAssetNetworkResponse)(nil),                          // 44: rabex.api.wallet.GetAssetNetworkResponse
	(*GetAssetNetworkResponseList)(nil),                      // 45: rabex.api.wallet.GetAssetNetworkResponseList
	(*AssetNetwork)(nil),                                     // 46: rabex.api.wallet.AssetNetwork
	(*GetFullNodeAssetNetworkListRequest)(nil),               // 47: rabex.api.wallet.GetFullNodeAssetNetworkListRequest
	(*GetFullNodeAssetNetworkListResponse)(nil),              // 48: rabex.api.wallet.GetFullNodeAssetNetworkListResponse
	(*AssetNetworkList)(nil),                                 // 49: rabex.api.wallet.AssetNetworkList
	(*AddBlacklistRequest)(nil),                              // 50: rabex.api.wallet.AddBlacklistRequest
	(*AddBlacklistResponse)(nil),                             // 51: rabex.api.wallet.AddBlacklistResponse
	(*UpdateBlacklistRequest)(nil),                           // 52: rabex.api.wallet.UpdateBlacklistRequest
	(*UpdateBlacklistResponse)(nil),                          // 53: rabex.api.wallet.UpdateBlacklistResponse
	(*ListBlacklistRequest)(nil),                             // 54: rabex.api.wallet.ListBlacklistRequest
	(*ListBlacklistResponse)(nil),                            // 55: rabex.api.wallet.ListBlacklistResponse
	(*GetBlacklistRequest)(nil),                              // 56: rabex.api.wallet.GetBlacklistRequest
	(*GetBlacklistResponse)(nil),                             // 57: rabex.api.wallet.GetBlacklistResponse
	(*Blacklist)(nil),                                        // 58: rabex.api.wallet.Blacklist
	(*ListTinyNetworkRequest)(nil),                           // 59: rabex.api.wallet.ListTinyNetworkRequest
	(*ListTinyNetworkResponse)(nil),                          // 60: rabex.api.wallet.ListTinyNetworkResponse
	(*ListTinyAssetRequest)(nil),                             // 61: rabex.api.wallet.ListTinyAssetRequest
	(*ListTinyAssetResponse)(nil),                            // 62: rabex.api.wallet.ListTinyAssetResponse
	(*AssetSettingResponse)(nil),                             // 63: rabex.api.wallet.AssetSettingResponse
	(*UpdateAssetSettingRequest)(nil),                        // 64: rabex.api.wallet.UpdateAssetSettingRequest
	(*UpdateAssetSettingResponse)(nil),                       // 65: rabex.api.wallet.UpdateAssetSettingResponse
	(*UpdateAssetNetworkSelectorRequest)(nil),                // 66: rabex.api.wallet.UpdateAssetNetworkSelectorRequest
	(*UpdateTokenStandardSelectorRequest)(nil),               // 67: rabex.api.wallet.UpdateTokenStandardSelectorRequest
	(*AssetNetworkSelectors)(nil),                            // 68: rabex.api.wallet.AssetNetworkSelectors
	(*GetAssetInfoByIdRequest)(nil),                          // 69: rabex.api.wallet.GetAssetInfoByIdRequest
	(*GetAssetInfoByIdResponse)(nil),                         // 70: rabex.api.wallet.GetAssetInfoByIdResponse
	(*GetAllAssetInfoResponse)(nil),                          // 71: rabex.api.wallet.GetAllAssetInfoResponse
	(*AssetInfo)(nil),                                        // 72: rabex.api.wallet.AssetInfo
	(*ExternalExchangeSettingsResponse)(nil),                 // 73: rabex.api.wallet.ExternalExchangeSettingsResponse
	(*ExternalExchangeSettingResponse)(nil),                  // 74: rabex.api.wallet.ExternalExchangeSettingResponse
	(*ExternalExchangeSettingFilter)(nil),                    // 75: rabex.api.wallet.ExternalExchangeSettingFilter
	(*ExternalExchangeSetting)(nil),                          // 76: rabex.api.wallet.ExternalExchangeSetting
	(*ExternalExchangeUpdateSettingRequest)(nil),             // 77: rabex.api.wallet.ExternalExchangeUpdateSettingRequest
	(*GetAllAssetResponse)(nil),                              // 78: rabex.api.wallet.GetAllAssetResponse
	(*AssetData)(nil),                                        // 79: rabex.api.wallet.AssetData
	(*AddTreasuryRequest)(nil),                               // 80: rabex.api.wallet.AddTreasuryRequest
	(*AddTreasuryResponse)(nil),                              // 81: rabex.api.wallet.AddTreasuryResponse
	(*GetTreasuryByIdRequest)(nil),                           // 82: rabex.api.wallet.GetTreasuryByIdRequest
	(*GetTreasuryByIdResponse)(nil),                          // 83: rabex.api.wallet.GetTreasuryByIdResponse
	(*DeleteTreasuryRequest)(nil),                            // 84: rabex.api.wallet.DeleteTreasuryRequest
	(*DeleteTreasuryResponse)(nil),                           // 85: rabex.api.wallet.DeleteTreasuryResponse
	(*UpdateTreasuryRequest)(nil),                            // 86: rabex.api.wallet.UpdateTreasuryRequest
	(*UpdateTreasuryResponse)(nil),                           // 87: rabex.api.wallet.UpdateTreasuryResponse
	(*ListTreasuryRequest)(nil),                              // 88: rabex.api.wallet.ListTreasuryRequest
	(*ListTreasuryResponse)(nil),                             // 89: rabex.api.wallet.ListTreasuryResponse
	(*Treasury)(nil),                                         // 90: rabex.api.wallet.Treasury
	(*ListUserAssetResponse)(nil),                            // 91: rabex.api.wallet.ListUserAssetResponse
	(*UserAsset)(nil),                                        // 92: rabex.api.wallet.UserAsset
	(*UpdateExternalExchangeSettingByCSVRequest)(nil),        // 93: rabex.api.wallet.UpdateExternalExchangeSettingByCSVRequest
	(*GetAssetNetworkDepositModeRequest)(nil),                // 94: rabex.api.wallet.GetAssetNetworkDepositModeRequest
	(*GetAssetNetworkDepositModeResponse)(nil),               // 95: rabex.api.wallet.GetAssetNetworkDepositModeResponse
	(*CheckAssetNetworkFeeFairnessRequest)(nil),              // 96: rabex.api.wallet.CheckAssetNetworkFeeFairnessRequest
	(*CheckAssetNetworkFeeFairnessResponse)(nil),             // 97: rabex.api.wallet.CheckAssetNetworkFeeFairnessResponse
	(*AddNetworkResponse_Data)(nil),                          // 98: rabex.api.wallet.AddNetworkResponse.Data
	(*UpdateNetworkResponse_Data)(nil),                       // 99: rabex.api.wallet.UpdateNetworkResponse.Data
	(*ListNetworkResponse_Data)(nil),                         // 100: rabex.api.wallet.ListNetworkResponse.Data
	(*ListNetworkResponse_Data_Networks)(nil),                // 101: rabex.api.wallet.ListNetworkResponse.Data.Networks
	(*GetNetworkResponse_Data)(nil),                          // 102: rabex.api.wallet.GetNetworkResponse.Data
	(*AddAssetResponse_Data)(nil),                            // 103: rabex.api.wallet.AddAssetResponse.Data
	(*UpdateAssetResponse_Data)(nil),                         // 104: rabex.api.wallet.UpdateAssetResponse.Data
	(*ListAssetResponse_Data)(nil),                           // 105: rabex.api.wallet.ListAssetResponse.Data
	(*ListAssetResponse_Data_Assets)(nil),                    // 106: rabex.api.wallet.ListAssetResponse.Data.Assets
	(*FilterAssetNetworkResponse_Data)(nil),                  // 107: rabex.api.wallet.FilterAssetNetworkResponse.Data
	(*FilterAssetNetworkResponse_Data_AssetNetwork)(nil),     // 108: rabex.api.wallet.FilterAssetNetworkResponse.Data.AssetNetwork
	(*FilterAssetNetworkResponse_Data_Network)(nil),          // 109: rabex.api.wallet.FilterAssetNetworkResponse.Data.Network
	(*FilterAssetNetworkUserResponse_Data)(nil),              // 110: rabex.api.wallet.FilterAssetNetworkUserResponse.Data
	(*FilterAssetNetworkUserResponse_Data_AssetNetwork)(nil), // 111: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.AssetNetwork
	(*FilterAssetNetworkUserResponse_Data_Network)(nil),      // 112: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.Network
	(*UpdateOrderAssetRequest_UpdateAsset)(nil),              // 113: rabex.api.wallet.UpdateOrderAssetRequest.UpdateAsset
	(*UpdateOrderAssetResponse_UpdatedAsset)(nil),            // 114: rabex.api.wallet.UpdateOrderAssetResponse.UpdatedAsset
	(*UpdateOrderAssetResponse_AssetInfo)(nil),               // 115: rabex.api.wallet.UpdateOrderAssetResponse.AssetInfo
	(*GetAssetResponse_Data)(nil),                            // 116: rabex.api.wallet.GetAssetResponse.Data
	(*AddAssetNetworkResponse_Data)(nil),                     // 117: rabex.api.wallet.AddAssetNetworkResponse.Data
	(*UpdateAssetNetworkResponse_Data)(nil),                  // 118: rabex.api.wallet.UpdateAssetNetworkResponse.Data
	(*ListAssetNetworkResponse_Data)(nil),                    // 119: rabex.api.wallet.ListAssetNetworkResponse.Data
	(*AssetNetwork_Data)(nil),                                // 120: rabex.api.wallet.AssetNetwork.Data
	(*GetFullNodeAssetNetworkListResponse_Data)(nil),         // 121: rabex.api.wallet.GetFullNodeAssetNetworkListResponse.Data
	(*ListBlacklistResponse_Data)(nil),                       // 122: rabex.api.wallet.ListBlacklistResponse.Data
	(*ListTinyNetworkResponse_Networks)(nil),                 // 123: rabex.api.wallet.ListTinyNetworkResponse.Networks
	(*ListTinyAssetResponse_Assets)(nil),                     // 124: rabex.api.wallet.ListTinyAssetResponse.Assets
	(*AssetSettingResponse_Data)(nil),                        // 125: rabex.api.wallet.AssetSettingResponse.Data
	(*UpdateAssetSettingResponse_Data)(nil),                  // 126: rabex.api.wallet.UpdateAssetSettingResponse.Data
	(*UpdateAssetNetworkSelectorRequest_Asset)(nil),          // 127: rabex.api.wallet.UpdateAssetNetworkSelectorRequest.Asset
	(*UpdateTokenStandardSelectorRequest_TokenStandard)(nil), // 128: rabex.api.wallet.UpdateTokenStandardSelectorRequest.TokenStandard
	(*AssetNetworkSelectors_Asset)(nil),                      // 129: rabex.api.wallet.AssetNetworkSelectors.Asset
	(*AssetNetworkSelectors_TokenStandard)(nil),              // 130: rabex.api.wallet.AssetNetworkSelectors.TokenStandard
	(*AssetInfo_Network)(nil),                                // 131: rabex.api.wallet.AssetInfo.Network
	(*GetAllAssetResponse_SymbolKey)(nil),                    // 132: rabex.api.wallet.GetAllAssetResponse.SymbolKey
	(*AddTreasuryResponse_Data)(nil),                         // 133: rabex.api.wallet.AddTreasuryResponse.Data
	(*GetTreasuryByIdResponse_Data)(nil),                     // 134: rabex.api.wallet.GetTreasuryByIdResponse.Data
	(*UpdateTreasuryResponse_Data)(nil),                      // 135: rabex.api.wallet.UpdateTreasuryResponse.Data
	(*ListUserAssetResponse_Data)(nil),                       // 136: rabex.api.wallet.ListUserAssetResponse.Data
	(*UpdateExternalExchangeSettingByCSVRequestSetting)(nil), // 137: rabex.api.wallet.UpdateExternalExchangeSettingByCSVRequest.setting
	(*GetAssetNetworkDepositModeResponse_Data)(nil),          // 138: rabex.api.wallet.GetAssetNetworkDepositModeResponse.Data
	(*CheckAssetNetworkFeeFairnessResponse_Data)(nil),        // 139: rabex.api.wallet.CheckAssetNetworkFeeFairnessResponse.Data
	(TreasuryType)(0),                                        // 140: rabex.api.wallet.TreasuryType
	(AssetNetworkDepositMode)(0),                             // 141: rabex.api.wallet.AssetNetworkDepositMode
	(AssetNetworkWithdrawMode)(0),                            // 142: rabex.api.wallet.AssetNetworkWithdrawMode
	(Symbol)(0),                                              // 143: rabex.api.wallet.Symbol
	(GrpcBoolean)(0),                                         // 144: rabex.api.wallet.GrpcBoolean
	(FeeFairness)(0),                                         // 145: rabex.api.wallet.FeeFairness
}
var file_wallet_messages_proto_depIdxs = []int32{
	140, // 0: rabex.api.wallet.DepositSanity.type:type_name -> rabex.api.wallet.TreasuryType
	141, // 1: rabex.api.wallet.DepositSanity.mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	0,   // 2: rabex.api.wallet.DepositSanityResponse.data:type_name -> rabex.api.wallet.DepositSanity
	140, // 3: rabex.api.wallet.WithdrawSanity.type:type_name -> rabex.api.wallet.TreasuryType
	142, // 4: rabex.api.wallet.WithdrawSanity.mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	3,   // 5: rabex.api.wallet.WithdrawSanityResponse.data:type_name -> rabex.api.wallet.WithdrawSanity
	9,   // 6: rabex.api.wallet.Selector.sub_selector:type_name -> rabex.api.wallet.SubSelector
	143, // 7: rabex.api.wallet.AddNetworkRequest.symbol:type_name -> rabex.api.wallet.Symbol
	144, // 8: rabex.api.wallet.AddNetworkRequest.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 9: rabex.api.wallet.AddNetworkRequest.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 10: rabex.api.wallet.AddNetworkRequest.memo:type_name -> rabex.api.wallet.GrpcBoolean
	98,  // 11: rabex.api.wallet.AddNetworkResponse.data:type_name -> rabex.api.wallet.AddNetworkResponse.Data
	144, // 12: rabex.api.wallet.UpdateNetworkRequest.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 13: rabex.api.wallet.UpdateNetworkRequest.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 14: rabex.api.wallet.UpdateNetworkRequest.memo:type_name -> rabex.api.wallet.GrpcBoolean
	99,  // 15: rabex.api.wallet.UpdateNetworkResponse.data:type_name -> rabex.api.wallet.UpdateNetworkResponse.Data
	10,  // 16: rabex.api.wallet.ListNetworkRequest.pagination:type_name -> rabex.api.wallet.Pagination
	100, // 17: rabex.api.wallet.ListNetworkResponse.data:type_name -> rabex.api.wallet.ListNetworkResponse.Data
	102, // 18: rabex.api.wallet.GetNetworkResponse.data:type_name -> rabex.api.wallet.GetNetworkResponse.Data
	143, // 19: rabex.api.wallet.AddAssetRequest.symbol:type_name -> rabex.api.wallet.Symbol
	144, // 20: rabex.api.wallet.AddAssetRequest.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 21: rabex.api.wallet.AddAssetRequest.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	103, // 22: rabex.api.wallet.AddAssetResponse.data:type_name -> rabex.api.wallet.AddAssetResponse.Data
	144, // 23: rabex.api.wallet.UpdateAssetRequest.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 24: rabex.api.wallet.UpdateAssetRequest.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	104, // 25: rabex.api.wallet.UpdateAssetResponse.data:type_name -> rabex.api.wallet.UpdateAssetResponse.Data
	10,  // 26: rabex.api.wallet.ListAssetRequest.pagination:type_name -> rabex.api.wallet.Pagination
	105, // 27: rabex.api.wallet.ListAssetResponse.data:type_name -> rabex.api.wallet.ListAssetResponse.Data
	107, // 28: rabex.api.wallet.FilterAssetNetworkResponse.data:type_name -> rabex.api.wallet.FilterAssetNetworkResponse.Data
	110, // 29: rabex.api.wallet.FilterAssetNetworkUserResponse.data:type_name -> rabex.api.wallet.FilterAssetNetworkUserResponse.Data
	113, // 30: rabex.api.wallet.UpdateOrderAssetRequest.assets:type_name -> rabex.api.wallet.UpdateOrderAssetRequest.UpdateAsset
	114, // 31: rabex.api.wallet.UpdateOrderAssetResponse.assets:type_name -> rabex.api.wallet.UpdateOrderAssetResponse.UpdatedAsset
	33,  // 32: rabex.api.wallet.CreateConfigResponse.data:type_name -> rabex.api.wallet.Config
	116, // 33: rabex.api.wallet.GetAssetResponse.data:type_name -> rabex.api.wallet.GetAssetResponse.Data
	144, // 34: rabex.api.wallet.AddAssetNetworkRequest.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 35: rabex.api.wallet.AddAssetNetworkRequest.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 36: rabex.api.wallet.AddAssetNetworkRequest.is_default:type_name -> rabex.api.wallet.GrpcBoolean
	141, // 37: rabex.api.wallet.AddAssetNetworkRequest.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 38: rabex.api.wallet.AddAssetNetworkRequest.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	144, // 39: rabex.api.wallet.AddAssetNetworkRequest.withdraw_full_node_supported:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 40: rabex.api.wallet.AddAssetNetworkRequest.deposit_full_node_supported:type_name -> rabex.api.wallet.GrpcBoolean
	117, // 41: rabex.api.wallet.AddAssetNetworkResponse.data:type_name -> rabex.api.wallet.AddAssetNetworkResponse.Data
	144, // 42: rabex.api.wallet.UpdateAssetNetworkRequest.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 43: rabex.api.wallet.UpdateAssetNetworkRequest.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 44: rabex.api.wallet.UpdateAssetNetworkRequest.is_default:type_name -> rabex.api.wallet.GrpcBoolean
	141, // 45: rabex.api.wallet.UpdateAssetNetworkRequest.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 46: rabex.api.wallet.UpdateAssetNetworkRequest.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	144, // 47: rabex.api.wallet.UpdateAssetNetworkRequest.withdraw_full_node_supported:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 48: rabex.api.wallet.UpdateAssetNetworkRequest.deposit_full_node_supported:type_name -> rabex.api.wallet.GrpcBoolean
	118, // 49: rabex.api.wallet.UpdateAssetNetworkResponse.data:type_name -> rabex.api.wallet.UpdateAssetNetworkResponse.Data
	10,  // 50: rabex.api.wallet.ListAssetNetworkRequest.pagination:type_name -> rabex.api.wallet.Pagination
	119, // 51: rabex.api.wallet.ListAssetNetworkResponse.data:type_name -> rabex.api.wallet.ListAssetNetworkResponse.Data
	46,  // 52: rabex.api.wallet.GetAssetNetworkResponse.data:type_name -> rabex.api.wallet.AssetNetwork
	49,  // 53: rabex.api.wallet.GetAssetNetworkResponseList.asset_network_list:type_name -> rabex.api.wallet.AssetNetworkList
	120, // 54: rabex.api.wallet.AssetNetwork.data:type_name -> rabex.api.wallet.AssetNetwork.Data
	121, // 55: rabex.api.wallet.GetFullNodeAssetNetworkListResponse.data:type_name -> rabex.api.wallet.GetFullNodeAssetNetworkListResponse.Data
	143, // 56: rabex.api.wallet.AssetNetworkList.asset_symbol:type_name -> rabex.api.wallet.Symbol
	141, // 57: rabex.api.wallet.AssetNetworkList.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 58: rabex.api.wallet.AssetNetworkList.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	143, // 59: rabex.api.wallet.AssetNetworkList.network_symbol:type_name -> rabex.api.wallet.Symbol
	58,  // 60: rabex.api.wallet.AddBlacklistResponse.data:type_name -> rabex.api.wallet.Blacklist
	58,  // 61: rabex.api.wallet.UpdateBlacklistResponse.data:type_name -> rabex.api.wallet.Blacklist
	10,  // 62: rabex.api.wallet.ListBlacklistRequest.pagination:type_name -> rabex.api.wallet.Pagination
	122, // 63: rabex.api.wallet.ListBlacklistResponse.data:type_name -> rabex.api.wallet.ListBlacklistResponse.Data
	58,  // 64: rabex.api.wallet.GetBlacklistResponse.data:type_name -> rabex.api.wallet.Blacklist
	123, // 65: rabex.api.wallet.ListTinyNetworkResponse.data:type_name -> rabex.api.wallet.ListTinyNetworkResponse.Networks
	124, // 66: rabex.api.wallet.ListTinyAssetResponse.data:type_name -> rabex.api.wallet.ListTinyAssetResponse.Assets
	125, // 67: rabex.api.wallet.AssetSettingResponse.data:type_name -> rabex.api.wallet.AssetSettingResponse.Data
	126, // 68: rabex.api.wallet.UpdateAssetSettingResponse.data:type_name -> rabex.api.wallet.UpdateAssetSettingResponse.Data
	127, // 69: rabex.api.wallet.UpdateAssetNetworkSelectorRequest.assets:type_name -> rabex.api.wallet.UpdateAssetNetworkSelectorRequest.Asset
	128, // 70: rabex.api.wallet.UpdateTokenStandardSelectorRequest.token_standards:type_name -> rabex.api.wallet.UpdateTokenStandardSelectorRequest.TokenStandard
	129, // 71: rabex.api.wallet.AssetNetworkSelectors.data:type_name -> rabex.api.wallet.AssetNetworkSelectors.Asset
	72,  // 72: rabex.api.wallet.GetAssetInfoByIdResponse.asset_info:type_name -> rabex.api.wallet.AssetInfo
	72,  // 73: rabex.api.wallet.GetAllAssetInfoResponse.asset_info:type_name -> rabex.api.wallet.AssetInfo
	143, // 74: rabex.api.wallet.AssetInfo.symbol:type_name -> rabex.api.wallet.Symbol
	131, // 75: rabex.api.wallet.AssetInfo.networks:type_name -> rabex.api.wallet.AssetInfo.Network
	76,  // 76: rabex.api.wallet.ExternalExchangeSettingsResponse.data:type_name -> rabex.api.wallet.ExternalExchangeSetting
	76,  // 77: rabex.api.wallet.ExternalExchangeSettingResponse.data:type_name -> rabex.api.wallet.ExternalExchangeSetting
	132, // 78: rabex.api.wallet.GetAllAssetResponse.data:type_name -> rabex.api.wallet.GetAllAssetResponse.SymbolKey
	140, // 79: rabex.api.wallet.AddTreasuryRequest.type:type_name -> rabex.api.wallet.TreasuryType
	133, // 80: rabex.api.wallet.AddTreasuryResponse.data:type_name -> rabex.api.wallet.AddTreasuryResponse.Data
	134, // 81: rabex.api.wallet.GetTreasuryByIdResponse.data:type_name -> rabex.api.wallet.GetTreasuryByIdResponse.Data
	140, // 82: rabex.api.wallet.UpdateTreasuryRequest.type:type_name -> rabex.api.wallet.TreasuryType
	135, // 83: rabex.api.wallet.UpdateTreasuryResponse.data:type_name -> rabex.api.wallet.UpdateTreasuryResponse.Data
	90,  // 84: rabex.api.wallet.ListTreasuryResponse.data:type_name -> rabex.api.wallet.Treasury
	140, // 85: rabex.api.wallet.Treasury.type:type_name -> rabex.api.wallet.TreasuryType
	136, // 86: rabex.api.wallet.ListUserAssetResponse.data:type_name -> rabex.api.wallet.ListUserAssetResponse.Data
	137, // 87: rabex.api.wallet.UpdateExternalExchangeSettingByCSVRequest.settings:type_name -> rabex.api.wallet.UpdateExternalExchangeSettingByCSVRequest.setting
	138, // 88: rabex.api.wallet.GetAssetNetworkDepositModeResponse.data:type_name -> rabex.api.wallet.GetAssetNetworkDepositModeResponse.Data
	139, // 89: rabex.api.wallet.CheckAssetNetworkFeeFairnessResponse.data:type_name -> rabex.api.wallet.CheckAssetNetworkFeeFairnessResponse.Data
	143, // 90: rabex.api.wallet.AddNetworkResponse.Data.symbol:type_name -> rabex.api.wallet.Symbol
	143, // 91: rabex.api.wallet.UpdateNetworkResponse.Data.symbol:type_name -> rabex.api.wallet.Symbol
	101, // 92: rabex.api.wallet.ListNetworkResponse.Data.networks:type_name -> rabex.api.wallet.ListNetworkResponse.Data.Networks
	143, // 93: rabex.api.wallet.ListNetworkResponse.Data.Networks.symbol:type_name -> rabex.api.wallet.Symbol
	143, // 94: rabex.api.wallet.GetNetworkResponse.Data.symbol:type_name -> rabex.api.wallet.Symbol
	143, // 95: rabex.api.wallet.AddAssetResponse.Data.symbol:type_name -> rabex.api.wallet.Symbol
	143, // 96: rabex.api.wallet.UpdateAssetResponse.Data.symbol:type_name -> rabex.api.wallet.Symbol
	125, // 97: rabex.api.wallet.ListAssetResponse.Data.asset_setting:type_name -> rabex.api.wallet.AssetSettingResponse.Data
	106, // 98: rabex.api.wallet.ListAssetResponse.Data.assets:type_name -> rabex.api.wallet.ListAssetResponse.Data.Assets
	143, // 99: rabex.api.wallet.ListAssetResponse.Data.Assets.symbol:type_name -> rabex.api.wallet.Symbol
	125, // 100: rabex.api.wallet.FilterAssetNetworkResponse.Data.asset_setting:type_name -> rabex.api.wallet.AssetSettingResponse.Data
	108, // 101: rabex.api.wallet.FilterAssetNetworkResponse.Data.asset_networks:type_name -> rabex.api.wallet.FilterAssetNetworkResponse.Data.AssetNetwork
	143, // 102: rabex.api.wallet.FilterAssetNetworkResponse.Data.AssetNetwork.asset_symbol:type_name -> rabex.api.wallet.Symbol
	109, // 103: rabex.api.wallet.FilterAssetNetworkResponse.Data.AssetNetwork.token_standard_info:type_name -> rabex.api.wallet.FilterAssetNetworkResponse.Data.Network
	141, // 104: rabex.api.wallet.FilterAssetNetworkResponse.Data.AssetNetwork.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 105: rabex.api.wallet.FilterAssetNetworkResponse.Data.AssetNetwork.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	143, // 106: rabex.api.wallet.FilterAssetNetworkResponse.Data.Network.symbol:type_name -> rabex.api.wallet.Symbol
	125, // 107: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.asset_setting:type_name -> rabex.api.wallet.AssetSettingResponse.Data
	111, // 108: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.asset_networks:type_name -> rabex.api.wallet.FilterAssetNetworkUserResponse.Data.AssetNetwork
	143, // 109: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.AssetNetwork.asset_symbol:type_name -> rabex.api.wallet.Symbol
	112, // 110: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.AssetNetwork.token_standard_info:type_name -> rabex.api.wallet.FilterAssetNetworkUserResponse.Data.Network
	141, // 111: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.AssetNetwork.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 112: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.AssetNetwork.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	143, // 113: rabex.api.wallet.FilterAssetNetworkUserResponse.Data.Network.symbol:type_name -> rabex.api.wallet.Symbol
	115, // 114: rabex.api.wallet.UpdateOrderAssetResponse.UpdatedAsset.asset_info:type_name -> rabex.api.wallet.UpdateOrderAssetResponse.AssetInfo
	143, // 115: rabex.api.wallet.GetAssetResponse.Data.symbol:type_name -> rabex.api.wallet.Symbol
	143, // 116: rabex.api.wallet.AddAssetNetworkResponse.Data.asset_symbol:type_name -> rabex.api.wallet.Symbol
	141, // 117: rabex.api.wallet.AddAssetNetworkResponse.Data.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 118: rabex.api.wallet.AddAssetNetworkResponse.Data.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	143, // 119: rabex.api.wallet.UpdateAssetNetworkResponse.Data.asset_symbol:type_name -> rabex.api.wallet.Symbol
	141, // 120: rabex.api.wallet.UpdateAssetNetworkResponse.Data.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 121: rabex.api.wallet.UpdateAssetNetworkResponse.Data.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	49,  // 122: rabex.api.wallet.ListAssetNetworkResponse.Data.asset_networks:type_name -> rabex.api.wallet.AssetNetworkList
	143, // 123: rabex.api.wallet.AssetNetwork.Data.asset_symbol:type_name -> rabex.api.wallet.Symbol
	144, // 124: rabex.api.wallet.AssetNetwork.Data.deposit_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 125: rabex.api.wallet.AssetNetwork.Data.withdraw_status:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 126: rabex.api.wallet.AssetNetwork.Data.is_default:type_name -> rabex.api.wallet.GrpcBoolean
	141, // 127: rabex.api.wallet.AssetNetwork.Data.deposit_mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	142, // 128: rabex.api.wallet.AssetNetwork.Data.withdraw_mode:type_name -> rabex.api.wallet.AssetNetworkWithdrawMode
	144, // 129: rabex.api.wallet.AssetNetwork.Data.withdraw_full_node_supported:type_name -> rabex.api.wallet.GrpcBoolean
	144, // 130: rabex.api.wallet.AssetNetwork.Data.deposit_full_node_supported:type_name -> rabex.api.wallet.GrpcBoolean
	49,  // 131: rabex.api.wallet.GetFullNodeAssetNetworkListResponse.Data.asset_networks:type_name -> rabex.api.wallet.AssetNetworkList
	58,  // 132: rabex.api.wallet.ListBlacklistResponse.Data.blacklists:type_name -> rabex.api.wallet.Blacklist
	143, // 133: rabex.api.wallet.ListTinyAssetResponse.Assets.symbol:type_name -> rabex.api.wallet.Symbol
	143, // 134: rabex.api.wallet.AssetNetworkSelectors.Asset.asset_symbol:type_name -> rabex.api.wallet.Symbol
	130, // 135: rabex.api.wallet.AssetNetworkSelectors.Asset.token_standards:type_name -> rabex.api.wallet.AssetNetworkSelectors.TokenStandard
	79,  // 136: rabex.api.wallet.GetAllAssetResponse.SymbolKey.Info:type_name -> rabex.api.wallet.AssetData
	140, // 137: rabex.api.wallet.AddTreasuryResponse.Data.type:type_name -> rabex.api.wallet.TreasuryType
	140, // 138: rabex.api.wallet.GetTreasuryByIdResponse.Data.type:type_name -> rabex.api.wallet.TreasuryType
	140, // 139: rabex.api.wallet.UpdateTreasuryResponse.Data.type:type_name -> rabex.api.wallet.TreasuryType
	125, // 140: rabex.api.wallet.ListUserAssetResponse.Data.asset_setting:type_name -> rabex.api.wallet.AssetSettingResponse.Data
	92,  // 141: rabex.api.wallet.ListUserAssetResponse.Data.assets:type_name -> rabex.api.wallet.UserAsset
	141, // 142: rabex.api.wallet.GetAssetNetworkDepositModeResponse.Data.mode:type_name -> rabex.api.wallet.AssetNetworkDepositMode
	145, // 143: rabex.api.wallet.CheckAssetNetworkFeeFairnessResponse.Data.fairness:type_name -> rabex.api.wallet.FeeFairness
	144, // [144:144] is the sub-list for method output_type
	144, // [144:144] is the sub-list for method input_type
	144, // [144:144] is the sub-list for extension type_name
	144, // [144:144] is the sub-list for extension extendee
	0,   // [0:144] is the sub-list for field type_name
}

func init() { file_wallet_messages_proto_init() }
func file_wallet_messages_proto_init() {
	if File_wallet_messages_proto != nil {
		return
	}
	file_wallet_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_wallet_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositSanity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositSanityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositSanityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawSanity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawSanityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawSanityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAssetsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchAssetsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetNetworkResponseList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullNodeAssetNetworkListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullNodeAssetNetworkListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNetworkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlacklistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBlacklistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Blacklist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTinyNetworkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTinyNetworkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTinyAssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTinyAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetNetworkSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenStandardSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNetworkSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetInfoByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetInfoByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAssetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalExchangeSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalExchangeSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalExchangeSettingFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalExchangeSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalExchangeUpdateSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTreasuryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTreasuryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreasuryByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreasuryByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTreasuryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTreasuryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTreasuryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTreasuryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTreasuryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTreasuryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Treasury); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserAssetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExternalExchangeSettingByCSVRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetNetworkDepositModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetNetworkDepositModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAssetNetworkFeeFairnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAssetNetworkFeeFairnessResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNetworkResponse_Data_Networks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetResponse_Data_Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkResponse_Data_AssetNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkResponse_Data_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkUserResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkUserResponse_Data_AssetNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterAssetNetworkUserResponse_Data_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderAssetRequest_UpdateAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderAssetResponse_UpdatedAsset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderAssetResponse_AssetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddAssetNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAssetNetworkResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNetwork_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFullNodeAssetNetworkListResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBlacklistResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTinyNetworkResponse_Networks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTinyAssetResponse_Assets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetSettingResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetSettingResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAssetNetworkSelectorRequest_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTokenStandardSelectorRequest_TokenStandard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNetworkSelectors_Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetNetworkSelectors_TokenStandard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetInfo_Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAssetResponse_SymbolKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTreasuryResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTreasuryByIdResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTreasuryResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserAssetResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateExternalExchangeSettingByCSVRequestSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAssetNetworkDepositModeResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wallet_messages_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckAssetNetworkFeeFairnessResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wallet_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   140,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wallet_messages_proto_goTypes,
		DependencyIndexes: file_wallet_messages_proto_depIdxs,
		MessageInfos:      file_wallet_messages_proto_msgTypes,
	}.Build()
	File_wallet_messages_proto = out.File
	file_wallet_messages_proto_rawDesc = nil
	file_wallet_messages_proto_goTypes = nil
	file_wallet_messages_proto_depIdxs = nil
}
