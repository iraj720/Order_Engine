// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: exchange_engine_pb/external/services.proto

package exchangeEngine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalClient is the client API for External service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalClient interface {
	NewSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Settings, error)
	UpdateExchangeSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error)
	ExchangeSettings(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Settings, error)
	ManualExchange(ctx context.Context, in *ManualExchange, opts ...grpc.CallOption) (*ExchangeList, error)
	RetryExchange(ctx context.Context, in *RetryExchange, opts ...grpc.CallOption) (*ExchangeList, error)
	ExchangeList(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*ExchangeList, error)
	UpdateExchange(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*Exchange, error)
}

type externalClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalClient(cc grpc.ClientConnInterface) ExternalClient {
	return &externalClient{cc}
}

func (c *externalClient) NewSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/NewSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) UpdateExchangeSetting(ctx context.Context, in *Setting, opts ...grpc.CallOption) (*Setting, error) {
	out := new(Setting)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/UpdateExchangeSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) ExchangeSettings(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/ExchangeSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) ManualExchange(ctx context.Context, in *ManualExchange, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/ManualExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) RetryExchange(ctx context.Context, in *RetryExchange, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/RetryExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) ExchangeList(ctx context.Context, in *Filter, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/ExchangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalClient) UpdateExchange(ctx context.Context, in *Exchange, opts ...grpc.CallOption) (*Exchange, error) {
	out := new(Exchange)
	err := c.cc.Invoke(ctx, "/rabex.api.exchangeEngine.external.External/UpdateExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServer is the server API for External service.
// All implementations must embed UnimplementedExternalServer
// for forward compatibility
type ExternalServer interface {
	NewSetting(context.Context, *Setting) (*Settings, error)
	UpdateExchangeSetting(context.Context, *Setting) (*Setting, error)
	ExchangeSettings(context.Context, *Filter) (*Settings, error)
	ManualExchange(context.Context, *ManualExchange) (*ExchangeList, error)
	RetryExchange(context.Context, *RetryExchange) (*ExchangeList, error)
	ExchangeList(context.Context, *Filter) (*ExchangeList, error)
	UpdateExchange(context.Context, *Exchange) (*Exchange, error)
	mustEmbedUnimplementedExternalServer()
}

// UnimplementedExternalServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServer struct {
}

func (UnimplementedExternalServer) NewSetting(context.Context, *Setting) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewSetting not implemented")
}
func (UnimplementedExternalServer) UpdateExchangeSetting(context.Context, *Setting) (*Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchangeSetting not implemented")
}
func (UnimplementedExternalServer) ExchangeSettings(context.Context, *Filter) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeSettings not implemented")
}
func (UnimplementedExternalServer) ManualExchange(context.Context, *ManualExchange) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualExchange not implemented")
}
func (UnimplementedExternalServer) RetryExchange(context.Context, *RetryExchange) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryExchange not implemented")
}
func (UnimplementedExternalServer) ExchangeList(context.Context, *Filter) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeList not implemented")
}
func (UnimplementedExternalServer) UpdateExchange(context.Context, *Exchange) (*Exchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchange not implemented")
}
func (UnimplementedExternalServer) mustEmbedUnimplementedExternalServer() {}

// UnsafeExternalServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServer will
// result in compilation errors.
type UnsafeExternalServer interface {
	mustEmbedUnimplementedExternalServer()
}

func RegisterExternalServer(s grpc.ServiceRegistrar, srv ExternalServer) {
	s.RegisterService(&External_ServiceDesc, srv)
}

func _External_NewSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).NewSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/NewSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).NewSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_UpdateExchangeSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).UpdateExchangeSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/UpdateExchangeSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).UpdateExchangeSetting(ctx, req.(*Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_ExchangeSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).ExchangeSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/ExchangeSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).ExchangeSettings(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_ManualExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).ManualExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/ManualExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).ManualExchange(ctx, req.(*ManualExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_RetryExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).RetryExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/RetryExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).RetryExchange(ctx, req.(*RetryExchange))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_ExchangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).ExchangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/ExchangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).ExchangeList(ctx, req.(*Filter))
	}
	return interceptor(ctx, in, info, handler)
}

func _External_UpdateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Exchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServer).UpdateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.exchangeEngine.external.External/UpdateExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServer).UpdateExchange(ctx, req.(*Exchange))
	}
	return interceptor(ctx, in, info, handler)
}

// External_ServiceDesc is the grpc.ServiceDesc for External service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var External_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.exchangeEngine.external.External",
	HandlerType: (*ExternalServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewSetting",
			Handler:    _External_NewSetting_Handler,
		},
		{
			MethodName: "UpdateExchangeSetting",
			Handler:    _External_UpdateExchangeSetting_Handler,
		},
		{
			MethodName: "ExchangeSettings",
			Handler:    _External_ExchangeSettings_Handler,
		},
		{
			MethodName: "ManualExchange",
			Handler:    _External_ManualExchange_Handler,
		},
		{
			MethodName: "RetryExchange",
			Handler:    _External_RetryExchange_Handler,
		},
		{
			MethodName: "ExchangeList",
			Handler:    _External_ExchangeList_Handler,
		},
		{
			MethodName: "UpdateExchange",
			Handler:    _External_UpdateExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "exchange_engine_pb/external/services.proto",
}
