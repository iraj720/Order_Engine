// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: ticketpb/services.proto

package ticketpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicketClient is the client API for Ticket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicketClient interface {
	CreateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	CreateTicketByAdmin(ctx context.Context, in *TicketRequestByAdmin, opts ...grpc.CallOption) (*CreateTicketResponse, error)
	ListAssociatedTickets(ctx context.Context, in *AssociatedRequest, opts ...grpc.CallOption) (*TicketResponses, error)
	ListAssociatedTicketsByAdmin(ctx context.Context, in *AssociatedRequest, opts ...grpc.CallOption) (*TicketResponses, error)
	HistoryTickets(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*TicketResponses, error)
	ListAllTickets(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*TicketResponses, error)
	ChangeStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	SetAssignee(ctx context.Context, in *AssigneRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	SearchTicket(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TicketResponses, error)
	GetAllCategories(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponses, error)
}

type ticketClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketClient(cc grpc.ClientConnInterface) TicketClient {
	return &ticketClient{cc}
}

func (c *ticketClient) CreateTicket(ctx context.Context, in *TicketRequest, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/CreateTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) CreateTicketByAdmin(ctx context.Context, in *TicketRequestByAdmin, opts ...grpc.CallOption) (*CreateTicketResponse, error) {
	out := new(CreateTicketResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/CreateTicketByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) ListAssociatedTickets(ctx context.Context, in *AssociatedRequest, opts ...grpc.CallOption) (*TicketResponses, error) {
	out := new(TicketResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/ListAssociatedTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) ListAssociatedTicketsByAdmin(ctx context.Context, in *AssociatedRequest, opts ...grpc.CallOption) (*TicketResponses, error) {
	out := new(TicketResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/ListAssociatedTicketsByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) HistoryTickets(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*TicketResponses, error) {
	out := new(TicketResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/HistoryTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) ListAllTickets(ctx context.Context, in *ListAllRequest, opts ...grpc.CallOption) (*TicketResponses, error) {
	out := new(TicketResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/ListAllTickets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) ChangeStatus(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/ChangeStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) SetAssignee(ctx context.Context, in *AssigneRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/SetAssignee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) SearchTicket(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TicketResponses, error) {
	out := new(TicketResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/SearchTicket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketClient) GetAllCategories(ctx context.Context, in *CategoryRequest, opts ...grpc.CallOption) (*CategoryResponses, error) {
	out := new(CategoryResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.ticket.Ticket/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketServer is the server API for Ticket service.
// All implementations must embed UnimplementedTicketServer
// for forward compatibility
type TicketServer interface {
	CreateTicket(context.Context, *TicketRequest) (*CreateTicketResponse, error)
	CreateTicketByAdmin(context.Context, *TicketRequestByAdmin) (*CreateTicketResponse, error)
	ListAssociatedTickets(context.Context, *AssociatedRequest) (*TicketResponses, error)
	ListAssociatedTicketsByAdmin(context.Context, *AssociatedRequest) (*TicketResponses, error)
	HistoryTickets(context.Context, *HistoryRequest) (*TicketResponses, error)
	ListAllTickets(context.Context, *ListAllRequest) (*TicketResponses, error)
	ChangeStatus(context.Context, *StatusRequest) (*UpdateResponse, error)
	SetAssignee(context.Context, *AssigneRequest) (*UpdateResponse, error)
	SearchTicket(context.Context, *SearchRequest) (*TicketResponses, error)
	GetAllCategories(context.Context, *CategoryRequest) (*CategoryResponses, error)
	mustEmbedUnimplementedTicketServer()
}

// UnimplementedTicketServer must be embedded to have forward compatible implementations.
type UnimplementedTicketServer struct {
}

func (UnimplementedTicketServer) CreateTicket(context.Context, *TicketRequest) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicket not implemented")
}
func (UnimplementedTicketServer) CreateTicketByAdmin(context.Context, *TicketRequestByAdmin) (*CreateTicketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTicketByAdmin not implemented")
}
func (UnimplementedTicketServer) ListAssociatedTickets(context.Context, *AssociatedRequest) (*TicketResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssociatedTickets not implemented")
}
func (UnimplementedTicketServer) ListAssociatedTicketsByAdmin(context.Context, *AssociatedRequest) (*TicketResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAssociatedTicketsByAdmin not implemented")
}
func (UnimplementedTicketServer) HistoryTickets(context.Context, *HistoryRequest) (*TicketResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryTickets not implemented")
}
func (UnimplementedTicketServer) ListAllTickets(context.Context, *ListAllRequest) (*TicketResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllTickets not implemented")
}
func (UnimplementedTicketServer) ChangeStatus(context.Context, *StatusRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeStatus not implemented")
}
func (UnimplementedTicketServer) SetAssignee(context.Context, *AssigneRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAssignee not implemented")
}
func (UnimplementedTicketServer) SearchTicket(context.Context, *SearchRequest) (*TicketResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTicket not implemented")
}
func (UnimplementedTicketServer) GetAllCategories(context.Context, *CategoryRequest) (*CategoryResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedTicketServer) mustEmbedUnimplementedTicketServer() {}

// UnsafeTicketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketServer will
// result in compilation errors.
type UnsafeTicketServer interface {
	mustEmbedUnimplementedTicketServer()
}

func RegisterTicketServer(s grpc.ServiceRegistrar, srv TicketServer) {
	s.RegisterService(&Ticket_ServiceDesc, srv)
}

func _Ticket_CreateTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).CreateTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/CreateTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).CreateTicket(ctx, req.(*TicketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_CreateTicketByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TicketRequestByAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).CreateTicketByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/CreateTicketByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).CreateTicketByAdmin(ctx, req.(*TicketRequestByAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_ListAssociatedTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).ListAssociatedTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/ListAssociatedTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).ListAssociatedTickets(ctx, req.(*AssociatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_ListAssociatedTicketsByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).ListAssociatedTicketsByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/ListAssociatedTicketsByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).ListAssociatedTicketsByAdmin(ctx, req.(*AssociatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_HistoryTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).HistoryTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/HistoryTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).HistoryTickets(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_ListAllTickets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).ListAllTickets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/ListAllTickets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).ListAllTickets(ctx, req.(*ListAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_ChangeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).ChangeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/ChangeStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).ChangeStatus(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_SetAssignee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssigneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).SetAssignee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/SetAssignee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).SetAssignee(ctx, req.(*AssigneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_SearchTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).SearchTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/SearchTicket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).SearchTicket(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ticket_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketServer).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.ticket.Ticket/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketServer).GetAllCategories(ctx, req.(*CategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ticket_ServiceDesc is the grpc.ServiceDesc for Ticket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ticket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.ticket.Ticket",
	HandlerType: (*TicketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTicket",
			Handler:    _Ticket_CreateTicket_Handler,
		},
		{
			MethodName: "CreateTicketByAdmin",
			Handler:    _Ticket_CreateTicketByAdmin_Handler,
		},
		{
			MethodName: "ListAssociatedTickets",
			Handler:    _Ticket_ListAssociatedTickets_Handler,
		},
		{
			MethodName: "ListAssociatedTicketsByAdmin",
			Handler:    _Ticket_ListAssociatedTicketsByAdmin_Handler,
		},
		{
			MethodName: "HistoryTickets",
			Handler:    _Ticket_HistoryTickets_Handler,
		},
		{
			MethodName: "ListAllTickets",
			Handler:    _Ticket_ListAllTickets_Handler,
		},
		{
			MethodName: "ChangeStatus",
			Handler:    _Ticket_ChangeStatus_Handler,
		},
		{
			MethodName: "SetAssignee",
			Handler:    _Ticket_SetAssignee_Handler,
		},
		{
			MethodName: "SearchTicket",
			Handler:    _Ticket_SearchTicket_Handler,
		},
		{
			MethodName: "GetAllCategories",
			Handler:    _Ticket_GetAllCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketpb/services.proto",
}
