// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: wallet_core/wallet_core_services.proto

package wallet_core

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WalletCoreClient is the client API for WalletCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletCoreClient interface {
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error)
	GetAddr(ctx context.Context, in *AddrRequest, opts ...grpc.CallOption) (*AddrResponse, error)
}

type walletCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletCoreClient(cc grpc.ClientConnInterface) WalletCoreClient {
	return &walletCoreClient{cc}
}

func (c *walletCoreClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*SignResponse, error) {
	out := new(SignResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet_core.WalletCore/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletCoreClient) GetAddr(ctx context.Context, in *AddrRequest, opts ...grpc.CallOption) (*AddrResponse, error) {
	out := new(AddrResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.wallet_core.WalletCore/GetAddr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletCoreServer is the server API for WalletCore service.
// All implementations must embed UnimplementedWalletCoreServer
// for forward compatibility
type WalletCoreServer interface {
	Sign(context.Context, *SignRequest) (*SignResponse, error)
	GetAddr(context.Context, *AddrRequest) (*AddrResponse, error)
	mustEmbedUnimplementedWalletCoreServer()
}

// UnimplementedWalletCoreServer must be embedded to have forward compatible implementations.
type UnimplementedWalletCoreServer struct {
}

func (UnimplementedWalletCoreServer) Sign(context.Context, *SignRequest) (*SignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedWalletCoreServer) GetAddr(context.Context, *AddrRequest) (*AddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddr not implemented")
}
func (UnimplementedWalletCoreServer) mustEmbedUnimplementedWalletCoreServer() {}

// UnsafeWalletCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletCoreServer will
// result in compilation errors.
type UnsafeWalletCoreServer interface {
	mustEmbedUnimplementedWalletCoreServer()
}

func RegisterWalletCoreServer(s grpc.ServiceRegistrar, srv WalletCoreServer) {
	s.RegisterService(&WalletCore_ServiceDesc, srv)
}

func _WalletCore_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletCoreServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet_core.WalletCore/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletCoreServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletCore_GetAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletCoreServer).GetAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.wallet_core.WalletCore/GetAddr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletCoreServer).GetAddr(ctx, req.(*AddrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletCore_ServiceDesc is the grpc.ServiceDesc for WalletCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.wallet_core.WalletCore",
	HandlerType: (*WalletCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sign",
			Handler:    _WalletCore_Sign_Handler,
		},
		{
			MethodName: "GetAddr",
			Handler:    _WalletCore_GetAddr_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet_core/wallet_core_services.proto",
}
