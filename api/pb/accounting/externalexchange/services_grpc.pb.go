// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: accounting/externalexchange/services.proto

package externalexchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExtExchangeAPIClient is the client API for ExtExchangeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExtExchangeAPIClient interface {
	ExternalExchange(ctx context.Context, in *ExternalExchangeRequest, opts ...grpc.CallOption) (*ExternalExchangeResponse, error)
}

type extExchangeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExtExchangeAPIClient(cc grpc.ClientConnInterface) ExtExchangeAPIClient {
	return &extExchangeAPIClient{cc}
}

func (c *extExchangeAPIClient) ExternalExchange(ctx context.Context, in *ExternalExchangeRequest, opts ...grpc.CallOption) (*ExternalExchangeResponse, error) {
	out := new(ExternalExchangeResponse)
	err := c.cc.Invoke(ctx, "/externalexchange.ExtExchangeAPI/ExternalExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExtExchangeAPIServer is the server API for ExtExchangeAPI service.
// All implementations must embed UnimplementedExtExchangeAPIServer
// for forward compatibility
type ExtExchangeAPIServer interface {
	ExternalExchange(context.Context, *ExternalExchangeRequest) (*ExternalExchangeResponse, error)
	mustEmbedUnimplementedExtExchangeAPIServer()
}

// UnimplementedExtExchangeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedExtExchangeAPIServer struct {
}

func (UnimplementedExtExchangeAPIServer) ExternalExchange(context.Context, *ExternalExchangeRequest) (*ExternalExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExternalExchange not implemented")
}
func (UnimplementedExtExchangeAPIServer) mustEmbedUnimplementedExtExchangeAPIServer() {}

// UnsafeExtExchangeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExtExchangeAPIServer will
// result in compilation errors.
type UnsafeExtExchangeAPIServer interface {
	mustEmbedUnimplementedExtExchangeAPIServer()
}

func RegisterExtExchangeAPIServer(s grpc.ServiceRegistrar, srv ExtExchangeAPIServer) {
	s.RegisterService(&ExtExchangeAPI_ServiceDesc, srv)
}

func _ExtExchangeAPI_ExternalExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExternalExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExtExchangeAPIServer).ExternalExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/externalexchange.ExtExchangeAPI/ExternalExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExtExchangeAPIServer).ExternalExchange(ctx, req.(*ExternalExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExtExchangeAPI_ServiceDesc is the grpc.ServiceDesc for ExtExchangeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExtExchangeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "externalexchange.ExtExchangeAPI",
	HandlerType: (*ExtExchangeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExternalExchange",
			Handler:    _ExtExchangeAPI_ExternalExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/externalexchange/services.proto",
}
