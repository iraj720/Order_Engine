// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: accounting/warehouse-operations/services.proto

package warehouseOps

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseOpsAPIClient is the client API for WarehouseOpsAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseOpsAPIClient interface {
	// WarehouseOperations for action 'credit' moves asset from broker_warehouse to user_warehouse
	// for action 'confiscate' moves asset from user_warehouse to broker_warehouse
	WarehouseOperations(ctx context.Context, in *WarehouseOperationsRequest, opts ...grpc.CallOption) (*WarehouseOperationsResponse, error)
	// WarehouseTransfer transfers asset from 'from_warehouse' to 'to_warehouse'
	WarehouseTransfer(ctx context.Context, in *WarehouseTransferRequest, opts ...grpc.CallOption) (*WarehouseTransferResponse, error)
}

type warehouseOpsAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseOpsAPIClient(cc grpc.ClientConnInterface) WarehouseOpsAPIClient {
	return &warehouseOpsAPIClient{cc}
}

func (c *warehouseOpsAPIClient) WarehouseOperations(ctx context.Context, in *WarehouseOperationsRequest, opts ...grpc.CallOption) (*WarehouseOperationsResponse, error) {
	out := new(WarehouseOperationsResponse)
	err := c.cc.Invoke(ctx, "/warehouseOps.warehouseOpsAPI/WarehouseOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseOpsAPIClient) WarehouseTransfer(ctx context.Context, in *WarehouseTransferRequest, opts ...grpc.CallOption) (*WarehouseTransferResponse, error) {
	out := new(WarehouseTransferResponse)
	err := c.cc.Invoke(ctx, "/warehouseOps.warehouseOpsAPI/WarehouseTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseOpsAPIServer is the server API for WarehouseOpsAPI service.
// All implementations must embed UnimplementedWarehouseOpsAPIServer
// for forward compatibility
type WarehouseOpsAPIServer interface {
	// WarehouseOperations for action 'credit' moves asset from broker_warehouse to user_warehouse
	// for action 'confiscate' moves asset from user_warehouse to broker_warehouse
	WarehouseOperations(context.Context, *WarehouseOperationsRequest) (*WarehouseOperationsResponse, error)
	// WarehouseTransfer transfers asset from 'from_warehouse' to 'to_warehouse'
	WarehouseTransfer(context.Context, *WarehouseTransferRequest) (*WarehouseTransferResponse, error)
	mustEmbedUnimplementedWarehouseOpsAPIServer()
}

// UnimplementedWarehouseOpsAPIServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseOpsAPIServer struct {
}

func (UnimplementedWarehouseOpsAPIServer) WarehouseOperations(context.Context, *WarehouseOperationsRequest) (*WarehouseOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseOperations not implemented")
}
func (UnimplementedWarehouseOpsAPIServer) WarehouseTransfer(context.Context, *WarehouseTransferRequest) (*WarehouseTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WarehouseTransfer not implemented")
}
func (UnimplementedWarehouseOpsAPIServer) mustEmbedUnimplementedWarehouseOpsAPIServer() {}

// UnsafeWarehouseOpsAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseOpsAPIServer will
// result in compilation errors.
type UnsafeWarehouseOpsAPIServer interface {
	mustEmbedUnimplementedWarehouseOpsAPIServer()
}

func RegisterWarehouseOpsAPIServer(s grpc.ServiceRegistrar, srv WarehouseOpsAPIServer) {
	s.RegisterService(&WarehouseOpsAPI_ServiceDesc, srv)
}

func _WarehouseOpsAPI_WarehouseOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseOpsAPIServer).WarehouseOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouseOps.warehouseOpsAPI/WarehouseOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseOpsAPIServer).WarehouseOperations(ctx, req.(*WarehouseOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WarehouseOpsAPI_WarehouseTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WarehouseTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseOpsAPIServer).WarehouseTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/warehouseOps.warehouseOpsAPI/WarehouseTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseOpsAPIServer).WarehouseTransfer(ctx, req.(*WarehouseTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WarehouseOpsAPI_ServiceDesc is the grpc.ServiceDesc for WarehouseOpsAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WarehouseOpsAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "warehouseOps.warehouseOpsAPI",
	HandlerType: (*WarehouseOpsAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WarehouseOperations",
			Handler:    _WarehouseOpsAPI_WarehouseOperations_Handler,
		},
		{
			MethodName: "WarehouseTransfer",
			Handler:    _WarehouseOpsAPI_WarehouseTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/warehouse-operations/services.proto",
}
