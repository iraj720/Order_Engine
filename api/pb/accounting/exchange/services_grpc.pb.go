// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: accounting/exchange/services.proto

package exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeAPIClient is the client API for ExchangeAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeAPIClient interface {
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
	Referral(ctx context.Context, in *ReferralRequest, opts ...grpc.CallOption) (*ReferralResponse, error)
}

type exchangeAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeAPIClient(cc grpc.ClientConnInterface) ExchangeAPIClient {
	return &exchangeAPIClient{cc}
}

func (c *exchangeAPIClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeAPI/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeAPIClient) Referral(ctx context.Context, in *ReferralRequest, opts ...grpc.CallOption) (*ReferralResponse, error) {
	out := new(ReferralResponse)
	err := c.cc.Invoke(ctx, "/exchange.ExchangeAPI/Referral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExchangeAPIServer is the server API for ExchangeAPI service.
// All implementations must embed UnimplementedExchangeAPIServer
// for forward compatibility
type ExchangeAPIServer interface {
	Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	Referral(context.Context, *ReferralRequest) (*ReferralResponse, error)
	mustEmbedUnimplementedExchangeAPIServer()
}

// UnimplementedExchangeAPIServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeAPIServer struct {
}

func (UnimplementedExchangeAPIServer) Exchange(context.Context, *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedExchangeAPIServer) Referral(context.Context, *ReferralRequest) (*ReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Referral not implemented")
}
func (UnimplementedExchangeAPIServer) mustEmbedUnimplementedExchangeAPIServer() {}

// UnsafeExchangeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeAPIServer will
// result in compilation errors.
type UnsafeExchangeAPIServer interface {
	mustEmbedUnimplementedExchangeAPIServer()
}

func RegisterExchangeAPIServer(s grpc.ServiceRegistrar, srv ExchangeAPIServer) {
	s.RegisterService(&ExchangeAPI_ServiceDesc, srv)
}

func _ExchangeAPI_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeAPIServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeAPI/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeAPIServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeAPI_Referral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeAPIServer).Referral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange.ExchangeAPI/Referral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeAPIServer).Referral(ctx, req.(*ReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExchangeAPI_ServiceDesc is the grpc.ServiceDesc for ExchangeAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange.ExchangeAPI",
	HandlerType: (*ExchangeAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchange",
			Handler:    _ExchangeAPI_Exchange_Handler,
		},
		{
			MethodName: "Referral",
			Handler:    _ExchangeAPI_Referral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/exchange/services.proto",
}
