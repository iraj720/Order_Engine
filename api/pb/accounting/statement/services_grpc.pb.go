// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: accounting/statement/services.proto

package statement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatementAPIClient is the client API for StatementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatementAPIClient interface {
	// (USER) GetBalanceAllBrief
	GetBalanceAllBrief(ctx context.Context, in *GetBalanceAllBriefRequest, opts ...grpc.CallOption) (*GetBalanceAllBriefResponse, error)
	// (USER) GetBalanceByAssetBrief
	GetBalanceByAssetBrief(ctx context.Context, in *GetBalanceByAssetBriefRequest, opts ...grpc.CallOption) (*GetBalanceByAssetBriefResponse, error)
	// (ADMIN) BalanceFilter
	BalanceFilter(ctx context.Context, in *BalanceFilterRequest, opts ...grpc.CallOption) (*BalanceFilterResponse, error)
	// (SYSTEM) GetBalances
	GetBalances(ctx context.Context, in *GetBalancesRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error)
	// (SYSTEM) GetBalanceByAssetDetailed
	GetBalanceByAssetDetailed(ctx context.Context, in *GetBalanceByAssetDetailedRequest, opts ...grpc.CallOption) (*GetBalanceByAssetDetailedResponse, error)
	// (ADMIN) GetSumUserBalances
	GetSumUserBalances(ctx context.Context, in *GetSumUserBalancesRequest, opts ...grpc.CallOption) (*GetSumUserBalancesResponse, error)
}

type statementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewStatementAPIClient(cc grpc.ClientConnInterface) StatementAPIClient {
	return &statementAPIClient{cc}
}

func (c *statementAPIClient) GetBalanceAllBrief(ctx context.Context, in *GetBalanceAllBriefRequest, opts ...grpc.CallOption) (*GetBalanceAllBriefResponse, error) {
	out := new(GetBalanceAllBriefResponse)
	err := c.cc.Invoke(ctx, "/statement.StatementAPI/GetBalanceAllBrief", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementAPIClient) GetBalanceByAssetBrief(ctx context.Context, in *GetBalanceByAssetBriefRequest, opts ...grpc.CallOption) (*GetBalanceByAssetBriefResponse, error) {
	out := new(GetBalanceByAssetBriefResponse)
	err := c.cc.Invoke(ctx, "/statement.StatementAPI/GetBalanceByAssetBrief", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementAPIClient) BalanceFilter(ctx context.Context, in *BalanceFilterRequest, opts ...grpc.CallOption) (*BalanceFilterResponse, error) {
	out := new(BalanceFilterResponse)
	err := c.cc.Invoke(ctx, "/statement.StatementAPI/BalanceFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementAPIClient) GetBalances(ctx context.Context, in *GetBalancesRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error) {
	out := new(GetBalancesResponse)
	err := c.cc.Invoke(ctx, "/statement.StatementAPI/GetBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementAPIClient) GetBalanceByAssetDetailed(ctx context.Context, in *GetBalanceByAssetDetailedRequest, opts ...grpc.CallOption) (*GetBalanceByAssetDetailedResponse, error) {
	out := new(GetBalanceByAssetDetailedResponse)
	err := c.cc.Invoke(ctx, "/statement.StatementAPI/GetBalanceByAssetDetailed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statementAPIClient) GetSumUserBalances(ctx context.Context, in *GetSumUserBalancesRequest, opts ...grpc.CallOption) (*GetSumUserBalancesResponse, error) {
	out := new(GetSumUserBalancesResponse)
	err := c.cc.Invoke(ctx, "/statement.StatementAPI/GetSumUserBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatementAPIServer is the server API for StatementAPI service.
// All implementations must embed UnimplementedStatementAPIServer
// for forward compatibility
type StatementAPIServer interface {
	// (USER) GetBalanceAllBrief
	GetBalanceAllBrief(context.Context, *GetBalanceAllBriefRequest) (*GetBalanceAllBriefResponse, error)
	// (USER) GetBalanceByAssetBrief
	GetBalanceByAssetBrief(context.Context, *GetBalanceByAssetBriefRequest) (*GetBalanceByAssetBriefResponse, error)
	// (ADMIN) BalanceFilter
	BalanceFilter(context.Context, *BalanceFilterRequest) (*BalanceFilterResponse, error)
	// (SYSTEM) GetBalances
	GetBalances(context.Context, *GetBalancesRequest) (*GetBalancesResponse, error)
	// (SYSTEM) GetBalanceByAssetDetailed
	GetBalanceByAssetDetailed(context.Context, *GetBalanceByAssetDetailedRequest) (*GetBalanceByAssetDetailedResponse, error)
	// (ADMIN) GetSumUserBalances
	GetSumUserBalances(context.Context, *GetSumUserBalancesRequest) (*GetSumUserBalancesResponse, error)
	mustEmbedUnimplementedStatementAPIServer()
}

// UnimplementedStatementAPIServer must be embedded to have forward compatible implementations.
type UnimplementedStatementAPIServer struct {
}

func (UnimplementedStatementAPIServer) GetBalanceAllBrief(context.Context, *GetBalanceAllBriefRequest) (*GetBalanceAllBriefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceAllBrief not implemented")
}
func (UnimplementedStatementAPIServer) GetBalanceByAssetBrief(context.Context, *GetBalanceByAssetBriefRequest) (*GetBalanceByAssetBriefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByAssetBrief not implemented")
}
func (UnimplementedStatementAPIServer) BalanceFilter(context.Context, *BalanceFilterRequest) (*BalanceFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceFilter not implemented")
}
func (UnimplementedStatementAPIServer) GetBalances(context.Context, *GetBalancesRequest) (*GetBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedStatementAPIServer) GetBalanceByAssetDetailed(context.Context, *GetBalanceByAssetDetailedRequest) (*GetBalanceByAssetDetailedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByAssetDetailed not implemented")
}
func (UnimplementedStatementAPIServer) GetSumUserBalances(context.Context, *GetSumUserBalancesRequest) (*GetSumUserBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSumUserBalances not implemented")
}
func (UnimplementedStatementAPIServer) mustEmbedUnimplementedStatementAPIServer() {}

// UnsafeStatementAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatementAPIServer will
// result in compilation errors.
type UnsafeStatementAPIServer interface {
	mustEmbedUnimplementedStatementAPIServer()
}

func RegisterStatementAPIServer(s grpc.ServiceRegistrar, srv StatementAPIServer) {
	s.RegisterService(&StatementAPI_ServiceDesc, srv)
}

func _StatementAPI_GetBalanceAllBrief_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceAllBriefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementAPIServer).GetBalanceAllBrief(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statement.StatementAPI/GetBalanceAllBrief",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementAPIServer).GetBalanceAllBrief(ctx, req.(*GetBalanceAllBriefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementAPI_GetBalanceByAssetBrief_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByAssetBriefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementAPIServer).GetBalanceByAssetBrief(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statement.StatementAPI/GetBalanceByAssetBrief",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementAPIServer).GetBalanceByAssetBrief(ctx, req.(*GetBalanceByAssetBriefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementAPI_BalanceFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementAPIServer).BalanceFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statement.StatementAPI/BalanceFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementAPIServer).BalanceFilter(ctx, req.(*BalanceFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementAPI_GetBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementAPIServer).GetBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statement.StatementAPI/GetBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementAPIServer).GetBalances(ctx, req.(*GetBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementAPI_GetBalanceByAssetDetailed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByAssetDetailedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementAPIServer).GetBalanceByAssetDetailed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statement.StatementAPI/GetBalanceByAssetDetailed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementAPIServer).GetBalanceByAssetDetailed(ctx, req.(*GetBalanceByAssetDetailedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatementAPI_GetSumUserBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSumUserBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatementAPIServer).GetSumUserBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/statement.StatementAPI/GetSumUserBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatementAPIServer).GetSumUserBalances(ctx, req.(*GetSumUserBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatementAPI_ServiceDesc is the grpc.ServiceDesc for StatementAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatementAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "statement.StatementAPI",
	HandlerType: (*StatementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalanceAllBrief",
			Handler:    _StatementAPI_GetBalanceAllBrief_Handler,
		},
		{
			MethodName: "GetBalanceByAssetBrief",
			Handler:    _StatementAPI_GetBalanceByAssetBrief_Handler,
		},
		{
			MethodName: "BalanceFilter",
			Handler:    _StatementAPI_BalanceFilter_Handler,
		},
		{
			MethodName: "GetBalances",
			Handler:    _StatementAPI_GetBalances_Handler,
		},
		{
			MethodName: "GetBalanceByAssetDetailed",
			Handler:    _StatementAPI_GetBalanceByAssetDetailed_Handler,
		},
		{
			MethodName: "GetSumUserBalances",
			Handler:    _StatementAPI_GetSumUserBalances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/statement/services.proto",
}
