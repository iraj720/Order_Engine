// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: accounting/p2p/messages.proto

package p2p

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type P2PTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId      string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	Asset     string `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset,omitempty"`
	Qty       string `protobuf:"bytes,3,opt,name=qty,proto3" json:"qty,omitempty"`
	Warehouse string `protobuf:"bytes,4,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	User      string `protobuf:"bytes,5,opt,name=user,proto3" json:"user,omitempty"`
	Broker    string `protobuf:"bytes,6,opt,name=broker,proto3" json:"broker,omitempty"`
}

func (x *P2PTransaction) Reset() {
	*x = P2PTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_p2p_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PTransaction) ProtoMessage() {}

func (x *P2PTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_p2p_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PTransaction.ProtoReflect.Descriptor instead.
func (*P2PTransaction) Descriptor() ([]byte, []int) {
	return file_accounting_p2p_messages_proto_rawDescGZIP(), []int{0}
}

func (x *P2PTransaction) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

func (x *P2PTransaction) GetAsset() string {
	if x != nil {
		return x.Asset
	}
	return ""
}

func (x *P2PTransaction) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *P2PTransaction) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *P2PTransaction) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *P2PTransaction) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

type P2PTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *P2PTransaction       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Action P2PTransactionActions `protobuf:"varint,2,opt,name=action,proto3,enum=p2p.P2PTransactionActions" json:"action,omitempty"`
}

func (x *P2PTransactionRequest) Reset() {
	*x = P2PTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_p2p_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PTransactionRequest) ProtoMessage() {}

func (x *P2PTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_p2p_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PTransactionRequest.ProtoReflect.Descriptor instead.
func (*P2PTransactionRequest) Descriptor() ([]byte, []int) {
	return file_accounting_p2p_messages_proto_rawDescGZIP(), []int{1}
}

func (x *P2PTransactionRequest) GetData() *P2PTransaction {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *P2PTransactionRequest) GetAction() P2PTransactionActions {
	if x != nil {
		return x.Action
	}
	return P2PTransactionActions_P2PTRX_ACTIONS_UNSPECIFIED
}

type P2PTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error   []string `protobuf:"bytes,3,rep,name=error,proto3" json:"error,omitempty"`
	Data    string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *P2PTransactionResponse) Reset() {
	*x = P2PTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_p2p_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PTransactionResponse) ProtoMessage() {}

func (x *P2PTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_p2p_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PTransactionResponse.ProtoReflect.Descriptor instead.
func (*P2PTransactionResponse) Descriptor() ([]byte, []int) {
	return file_accounting_p2p_messages_proto_rawDescGZIP(), []int{2}
}

func (x *P2PTransactionResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *P2PTransactionResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *P2PTransactionResponse) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *P2PTransactionResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type P2PTrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MakerTxId          string `protobuf:"bytes,1,opt,name=maker_tx_id,json=makerTxId,proto3" json:"maker_tx_id,omitempty"`
	TakerTxId          string `protobuf:"bytes,2,opt,name=taker_tx_id,json=takerTxId,proto3" json:"taker_tx_id,omitempty"`
	MakerIngressAsset  string `protobuf:"bytes,3,opt,name=maker_ingress_asset,json=makerIngressAsset,proto3" json:"maker_ingress_asset,omitempty"`
	Taker_IngressAsset string `protobuf:"bytes,4,opt,name=taker_Ingress_asset,json=takerIngressAsset,proto3" json:"taker_Ingress_asset,omitempty"`
	MakerAmount        string `protobuf:"bytes,5,opt,name=maker_amount,json=makerAmount,proto3" json:"maker_amount,omitempty"`
	MakerFee           string `protobuf:"bytes,6,opt,name=maker_fee,json=makerFee,proto3" json:"maker_fee,omitempty"`
	TakerAmount        string `protobuf:"bytes,7,opt,name=taker_amount,json=takerAmount,proto3" json:"taker_amount,omitempty"`
	TakerFee           string `protobuf:"bytes,8,opt,name=taker_fee,json=takerFee,proto3" json:"taker_fee,omitempty"`
	MakerWarehouse     string `protobuf:"bytes,9,opt,name=maker_warehouse,json=makerWarehouse,proto3" json:"maker_warehouse,omitempty"`
	TakerWarehouse     string `protobuf:"bytes,10,opt,name=taker_warehouse,json=takerWarehouse,proto3" json:"taker_warehouse,omitempty"`
	Maker              string `protobuf:"bytes,11,opt,name=maker,proto3" json:"maker,omitempty"` // owner of makerwarehouse
	Taker              string `protobuf:"bytes,12,opt,name=taker,proto3" json:"taker,omitempty"` // owner of takerwarehouse
	Broker             string `protobuf:"bytes,13,opt,name=broker,proto3" json:"broker,omitempty"`
	BrokerWarehouse    string `protobuf:"bytes,14,opt,name=broker_warehouse,json=brokerWarehouse,proto3" json:"broker_warehouse,omitempty"`
}

func (x *P2PTrade) Reset() {
	*x = P2PTrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_p2p_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PTrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PTrade) ProtoMessage() {}

func (x *P2PTrade) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_p2p_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PTrade.ProtoReflect.Descriptor instead.
func (*P2PTrade) Descriptor() ([]byte, []int) {
	return file_accounting_p2p_messages_proto_rawDescGZIP(), []int{3}
}

func (x *P2PTrade) GetMakerTxId() string {
	if x != nil {
		return x.MakerTxId
	}
	return ""
}

func (x *P2PTrade) GetTakerTxId() string {
	if x != nil {
		return x.TakerTxId
	}
	return ""
}

func (x *P2PTrade) GetMakerIngressAsset() string {
	if x != nil {
		return x.MakerIngressAsset
	}
	return ""
}

func (x *P2PTrade) GetTaker_IngressAsset() string {
	if x != nil {
		return x.Taker_IngressAsset
	}
	return ""
}

func (x *P2PTrade) GetMakerAmount() string {
	if x != nil {
		return x.MakerAmount
	}
	return ""
}

func (x *P2PTrade) GetMakerFee() string {
	if x != nil {
		return x.MakerFee
	}
	return ""
}

func (x *P2PTrade) GetTakerAmount() string {
	if x != nil {
		return x.TakerAmount
	}
	return ""
}

func (x *P2PTrade) GetTakerFee() string {
	if x != nil {
		return x.TakerFee
	}
	return ""
}

func (x *P2PTrade) GetMakerWarehouse() string {
	if x != nil {
		return x.MakerWarehouse
	}
	return ""
}

func (x *P2PTrade) GetTakerWarehouse() string {
	if x != nil {
		return x.TakerWarehouse
	}
	return ""
}

func (x *P2PTrade) GetMaker() string {
	if x != nil {
		return x.Maker
	}
	return ""
}

func (x *P2PTrade) GetTaker() string {
	if x != nil {
		return x.Taker
	}
	return ""
}

func (x *P2PTrade) GetBroker() string {
	if x != nil {
		return x.Broker
	}
	return ""
}

func (x *P2PTrade) GetBrokerWarehouse() string {
	if x != nil {
		return x.BrokerWarehouse
	}
	return ""
}

type P2PTradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   *P2PTrade       `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Action P2PTradeActions `protobuf:"varint,2,opt,name=action,proto3,enum=p2p.P2PTradeActions" json:"action,omitempty"`
}

func (x *P2PTradeRequest) Reset() {
	*x = P2PTradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_p2p_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PTradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PTradeRequest) ProtoMessage() {}

func (x *P2PTradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_p2p_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PTradeRequest.ProtoReflect.Descriptor instead.
func (*P2PTradeRequest) Descriptor() ([]byte, []int) {
	return file_accounting_p2p_messages_proto_rawDescGZIP(), []int{4}
}

func (x *P2PTradeRequest) GetData() *P2PTrade {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *P2PTradeRequest) GetAction() P2PTradeActions {
	if x != nil {
		return x.Action
	}
	return P2PTradeActions_P2PTRD_ACTIONS_UNSPECIFIED
}

type P2PTradeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Error   []string `protobuf:"bytes,3,rep,name=error,proto3" json:"error,omitempty"`
	Data    string   `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *P2PTradeResponse) Reset() {
	*x = P2PTradeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_accounting_p2p_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *P2PTradeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*P2PTradeResponse) ProtoMessage() {}

func (x *P2PTradeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_accounting_p2p_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use P2PTradeResponse.ProtoReflect.Descriptor instead.
func (*P2PTradeResponse) Descriptor() ([]byte, []int) {
	return file_accounting_p2p_messages_proto_rawDescGZIP(), []int{5}
}

func (x *P2PTradeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *P2PTradeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *P2PTradeResponse) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *P2PTradeResponse) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_accounting_p2p_messages_proto protoreflect.FileDescriptor

var file_accounting_p2p_messages_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x70, 0x32, 0x70,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x03, 0x70, 0x32, 0x70, 0x1a, 0x1a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67,
	0x2f, 0x70, 0x32, 0x70, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x97, 0x01, 0x0a, 0x0e, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x71, 0x74, 0x79,
	0x12, 0x1c, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x22, 0x74, 0x0a, 0x15, 0x50, 0x32,
	0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70,
	0x32, 0x70, 0x2e, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x74, 0x0a, 0x16, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xeb, 0x03, 0x0a, 0x08, 0x50, 0x32, 0x50, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x54,
	0x78, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f,
	0x66, 0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72,
	0x46, 0x65, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61,
	0x6b, 0x65, 0x72, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x6b, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x57, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x22, 0x62, 0x0a, 0x0f, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x32, 0x70, 0x2e, 0x50, 0x32, 0x50, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x70, 0x32, 0x70,
	0x2e, 0x50, 0x32, 0x50, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x10, 0x50, 0x32, 0x50, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x42, 0x21, 0x5a, 0x1f, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x69, 0x6e, 0x67, 0x2f, 0x70, 0x32, 0x70, 0x3b, 0x70, 0x32, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_accounting_p2p_messages_proto_rawDescOnce sync.Once
	file_accounting_p2p_messages_proto_rawDescData = file_accounting_p2p_messages_proto_rawDesc
)

func file_accounting_p2p_messages_proto_rawDescGZIP() []byte {
	file_accounting_p2p_messages_proto_rawDescOnce.Do(func() {
		file_accounting_p2p_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_accounting_p2p_messages_proto_rawDescData)
	})
	return file_accounting_p2p_messages_proto_rawDescData
}

var file_accounting_p2p_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_accounting_p2p_messages_proto_goTypes = []interface{}{
	(*P2PTransaction)(nil),         // 0: p2p.P2PTransaction
	(*P2PTransactionRequest)(nil),  // 1: p2p.P2PTransactionRequest
	(*P2PTransactionResponse)(nil), // 2: p2p.P2PTransactionResponse
	(*P2PTrade)(nil),               // 3: p2p.P2PTrade
	(*P2PTradeRequest)(nil),        // 4: p2p.P2PTradeRequest
	(*P2PTradeResponse)(nil),       // 5: p2p.P2PTradeResponse
	(P2PTransactionActions)(0),     // 6: p2p.P2PTransactionActions
	(P2PTradeActions)(0),           // 7: p2p.P2PTradeActions
}
var file_accounting_p2p_messages_proto_depIdxs = []int32{
	0, // 0: p2p.P2PTransactionRequest.data:type_name -> p2p.P2PTransaction
	6, // 1: p2p.P2PTransactionRequest.action:type_name -> p2p.P2PTransactionActions
	3, // 2: p2p.P2PTradeRequest.data:type_name -> p2p.P2PTrade
	7, // 3: p2p.P2PTradeRequest.action:type_name -> p2p.P2PTradeActions
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_accounting_p2p_messages_proto_init() }
func file_accounting_p2p_messages_proto_init() {
	if File_accounting_p2p_messages_proto != nil {
		return
	}
	file_accounting_p2p_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_accounting_p2p_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_p2p_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_p2p_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_p2p_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PTrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_p2p_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PTradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_accounting_p2p_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*P2PTradeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_accounting_p2p_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_accounting_p2p_messages_proto_goTypes,
		DependencyIndexes: file_accounting_p2p_messages_proto_depIdxs,
		MessageInfos:      file_accounting_p2p_messages_proto_msgTypes,
	}.Build()
	File_accounting_p2p_messages_proto = out.File
	file_accounting_p2p_messages_proto_rawDesc = nil
	file_accounting_p2p_messages_proto_goTypes = nil
	file_accounting_p2p_messages_proto_depIdxs = nil
}
