// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: accounting/treasury-statement/services.proto

package tStatement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TreasuryStatementAPIClient is the client API for TreasuryStatementAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TreasuryStatementAPIClient interface {
	GetBalanceAll(ctx context.Context, in *GetBalanceAllRequest, opts ...grpc.CallOption) (*GetBalanceAllResponse, error)
	GetBalanceByAsset(ctx context.Context, in *GetBalanceByAssetRequest, opts ...grpc.CallOption) (*GetBalanceByAssetResponse, error)
	// (SYSTEM) GetBalances
	GetBalances(ctx context.Context, in *GetBalancesRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error)
}

type treasuryStatementAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTreasuryStatementAPIClient(cc grpc.ClientConnInterface) TreasuryStatementAPIClient {
	return &treasuryStatementAPIClient{cc}
}

func (c *treasuryStatementAPIClient) GetBalanceAll(ctx context.Context, in *GetBalanceAllRequest, opts ...grpc.CallOption) (*GetBalanceAllResponse, error) {
	out := new(GetBalanceAllResponse)
	err := c.cc.Invoke(ctx, "/tStatement.treasuryStatementAPI/GetBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasuryStatementAPIClient) GetBalanceByAsset(ctx context.Context, in *GetBalanceByAssetRequest, opts ...grpc.CallOption) (*GetBalanceByAssetResponse, error) {
	out := new(GetBalanceByAssetResponse)
	err := c.cc.Invoke(ctx, "/tStatement.treasuryStatementAPI/GetBalanceByAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *treasuryStatementAPIClient) GetBalances(ctx context.Context, in *GetBalancesRequest, opts ...grpc.CallOption) (*GetBalancesResponse, error) {
	out := new(GetBalancesResponse)
	err := c.cc.Invoke(ctx, "/tStatement.treasuryStatementAPI/GetBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TreasuryStatementAPIServer is the server API for TreasuryStatementAPI service.
// All implementations must embed UnimplementedTreasuryStatementAPIServer
// for forward compatibility
type TreasuryStatementAPIServer interface {
	GetBalanceAll(context.Context, *GetBalanceAllRequest) (*GetBalanceAllResponse, error)
	GetBalanceByAsset(context.Context, *GetBalanceByAssetRequest) (*GetBalanceByAssetResponse, error)
	// (SYSTEM) GetBalances
	GetBalances(context.Context, *GetBalancesRequest) (*GetBalancesResponse, error)
	mustEmbedUnimplementedTreasuryStatementAPIServer()
}

// UnimplementedTreasuryStatementAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTreasuryStatementAPIServer struct {
}

func (UnimplementedTreasuryStatementAPIServer) GetBalanceAll(context.Context, *GetBalanceAllRequest) (*GetBalanceAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceAll not implemented")
}
func (UnimplementedTreasuryStatementAPIServer) GetBalanceByAsset(context.Context, *GetBalanceByAssetRequest) (*GetBalanceByAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalanceByAsset not implemented")
}
func (UnimplementedTreasuryStatementAPIServer) GetBalances(context.Context, *GetBalancesRequest) (*GetBalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalances not implemented")
}
func (UnimplementedTreasuryStatementAPIServer) mustEmbedUnimplementedTreasuryStatementAPIServer() {}

// UnsafeTreasuryStatementAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TreasuryStatementAPIServer will
// result in compilation errors.
type UnsafeTreasuryStatementAPIServer interface {
	mustEmbedUnimplementedTreasuryStatementAPIServer()
}

func RegisterTreasuryStatementAPIServer(s grpc.ServiceRegistrar, srv TreasuryStatementAPIServer) {
	s.RegisterService(&TreasuryStatementAPI_ServiceDesc, srv)
}

func _TreasuryStatementAPI_GetBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuryStatementAPIServer).GetBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tStatement.treasuryStatementAPI/GetBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuryStatementAPIServer).GetBalanceAll(ctx, req.(*GetBalanceAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasuryStatementAPI_GetBalanceByAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceByAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuryStatementAPIServer).GetBalanceByAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tStatement.treasuryStatementAPI/GetBalanceByAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuryStatementAPIServer).GetBalanceByAsset(ctx, req.(*GetBalanceByAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TreasuryStatementAPI_GetBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TreasuryStatementAPIServer).GetBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tStatement.treasuryStatementAPI/GetBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TreasuryStatementAPIServer).GetBalances(ctx, req.(*GetBalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TreasuryStatementAPI_ServiceDesc is the grpc.ServiceDesc for TreasuryStatementAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TreasuryStatementAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tStatement.treasuryStatementAPI",
	HandlerType: (*TreasuryStatementAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalanceAll",
			Handler:    _TreasuryStatementAPI_GetBalanceAll_Handler,
		},
		{
			MethodName: "GetBalanceByAsset",
			Handler:    _TreasuryStatementAPI_GetBalanceByAsset_Handler,
		},
		{
			MethodName: "GetBalances",
			Handler:    _TreasuryStatementAPI_GetBalances_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accounting/treasury-statement/services.proto",
}
