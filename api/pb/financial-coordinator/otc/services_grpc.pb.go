// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: financial-coordinator/otc/services.proto

package otc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OtcClient is the client API for Otc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OtcClient interface {
	OtcOrderInquiry(ctx context.Context, in *OrderInquiryRequest, opts ...grpc.CallOption) (*OrderInquiryResponse, error)
	OtcOrderConfirm(ctx context.Context, in *OrderConfirmRequest, opts ...grpc.CallOption) (*OrderConfirmResponse, error)
	OtcFilter(ctx context.Context, in *OtcFilterRequest, opts ...grpc.CallOption) (*OtcFilterResponse, error)
	// returns the user's orders that their quote is 'TMN'
	FiatOtcHistory(ctx context.Context, in *FiatOtcHistoryRequest, opts ...grpc.CallOption) (*FiatOtcHistoryResponse, error)
	// returns the user's orders that their quote is not 'TMN'
	ExchangeOtcHistory(ctx context.Context, in *ExchangeOtcHistoryRequest, opts ...grpc.CallOption) (*ExchangeOtcHistoryResponse, error)
}

type otcClient struct {
	cc grpc.ClientConnInterface
}

func NewOtcClient(cc grpc.ClientConnInterface) OtcClient {
	return &otcClient{cc}
}

func (c *otcClient) OtcOrderInquiry(ctx context.Context, in *OrderInquiryRequest, opts ...grpc.CallOption) (*OrderInquiryResponse, error) {
	out := new(OrderInquiryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.otc.Otc/OtcOrderInquiry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otcClient) OtcOrderConfirm(ctx context.Context, in *OrderConfirmRequest, opts ...grpc.CallOption) (*OrderConfirmResponse, error) {
	out := new(OrderConfirmResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.otc.Otc/OtcOrderConfirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otcClient) OtcFilter(ctx context.Context, in *OtcFilterRequest, opts ...grpc.CallOption) (*OtcFilterResponse, error) {
	out := new(OtcFilterResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.otc.Otc/OtcFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otcClient) FiatOtcHistory(ctx context.Context, in *FiatOtcHistoryRequest, opts ...grpc.CallOption) (*FiatOtcHistoryResponse, error) {
	out := new(FiatOtcHistoryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.otc.Otc/FiatOtcHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otcClient) ExchangeOtcHistory(ctx context.Context, in *ExchangeOtcHistoryRequest, opts ...grpc.CallOption) (*ExchangeOtcHistoryResponse, error) {
	out := new(ExchangeOtcHistoryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.otc.Otc/ExchangeOtcHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtcServer is the server API for Otc service.
// All implementations must embed UnimplementedOtcServer
// for forward compatibility
type OtcServer interface {
	OtcOrderInquiry(context.Context, *OrderInquiryRequest) (*OrderInquiryResponse, error)
	OtcOrderConfirm(context.Context, *OrderConfirmRequest) (*OrderConfirmResponse, error)
	OtcFilter(context.Context, *OtcFilterRequest) (*OtcFilterResponse, error)
	// returns the user's orders that their quote is 'TMN'
	FiatOtcHistory(context.Context, *FiatOtcHistoryRequest) (*FiatOtcHistoryResponse, error)
	// returns the user's orders that their quote is not 'TMN'
	ExchangeOtcHistory(context.Context, *ExchangeOtcHistoryRequest) (*ExchangeOtcHistoryResponse, error)
	mustEmbedUnimplementedOtcServer()
}

// UnimplementedOtcServer must be embedded to have forward compatible implementations.
type UnimplementedOtcServer struct {
}

func (UnimplementedOtcServer) OtcOrderInquiry(context.Context, *OrderInquiryRequest) (*OrderInquiryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtcOrderInquiry not implemented")
}
func (UnimplementedOtcServer) OtcOrderConfirm(context.Context, *OrderConfirmRequest) (*OrderConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtcOrderConfirm not implemented")
}
func (UnimplementedOtcServer) OtcFilter(context.Context, *OtcFilterRequest) (*OtcFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtcFilter not implemented")
}
func (UnimplementedOtcServer) FiatOtcHistory(context.Context, *FiatOtcHistoryRequest) (*FiatOtcHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FiatOtcHistory not implemented")
}
func (UnimplementedOtcServer) ExchangeOtcHistory(context.Context, *ExchangeOtcHistoryRequest) (*ExchangeOtcHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeOtcHistory not implemented")
}
func (UnimplementedOtcServer) mustEmbedUnimplementedOtcServer() {}

// UnsafeOtcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OtcServer will
// result in compilation errors.
type UnsafeOtcServer interface {
	mustEmbedUnimplementedOtcServer()
}

func RegisterOtcServer(s grpc.ServiceRegistrar, srv OtcServer) {
	s.RegisterService(&Otc_ServiceDesc, srv)
}

func _Otc_OtcOrderInquiry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInquiryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtcServer).OtcOrderInquiry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.otc.Otc/OtcOrderInquiry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtcServer).OtcOrderInquiry(ctx, req.(*OrderInquiryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otc_OtcOrderConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtcServer).OtcOrderConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.otc.Otc/OtcOrderConfirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtcServer).OtcOrderConfirm(ctx, req.(*OrderConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otc_OtcFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtcFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtcServer).OtcFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.otc.Otc/OtcFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtcServer).OtcFilter(ctx, req.(*OtcFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otc_FiatOtcHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiatOtcHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtcServer).FiatOtcHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.otc.Otc/FiatOtcHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtcServer).FiatOtcHistory(ctx, req.(*FiatOtcHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Otc_ExchangeOtcHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeOtcHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtcServer).ExchangeOtcHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.otc.Otc/ExchangeOtcHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtcServer).ExchangeOtcHistory(ctx, req.(*ExchangeOtcHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Otc_ServiceDesc is the grpc.ServiceDesc for Otc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Otc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.financialCoordinator.otc.Otc",
	HandlerType: (*OtcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OtcOrderInquiry",
			Handler:    _Otc_OtcOrderInquiry_Handler,
		},
		{
			MethodName: "OtcOrderConfirm",
			Handler:    _Otc_OtcOrderConfirm_Handler,
		},
		{
			MethodName: "OtcFilter",
			Handler:    _Otc_OtcFilter_Handler,
		},
		{
			MethodName: "FiatOtcHistory",
			Handler:    _Otc_FiatOtcHistory_Handler,
		},
		{
			MethodName: "ExchangeOtcHistory",
			Handler:    _Otc_ExchangeOtcHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "financial-coordinator/otc/services.proto",
}
