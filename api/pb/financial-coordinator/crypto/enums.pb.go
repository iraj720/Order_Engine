// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: financial-coordinator/crypto/enums.proto

package crypto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defining deposit status
type DepositStatus int32

const (
	DepositStatus_CRYPTO_DEPOSIT_STATUS_UNSPECIFIED                  DepositStatus = 0
	DepositStatus_CRYPTO_DEPOSIT_STATUS_CLAIM_NEW                    DepositStatus = 1
	DepositStatus_CRYPTO_DEPOSIT_STATUS_CLAIM_POD                    DepositStatus = 2
	DepositStatus_CRYPTO_DEPOSIT_STATUS_CLAIM_ABORTED                DepositStatus = 3
	DepositStatus_CRYPTO_DEPOSIT_STATUS_CLAIM_NOT_CONFORMING         DepositStatus = 4 //daraye ekhtelaf
	DepositStatus_CRYPTO_DEPOSIT_STATUS_CLAIM_CANCELLED              DepositStatus = 5
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_READY                    DepositStatus = 21
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_READY_TO_RECONCILE       DepositStatus = 22
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_INITIATED                DepositStatus = 23
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_FINALIZED                DepositStatus = 24
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_CONFISCATED              DepositStatus = 25
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_FROZEN                   DepositStatus = 26 // this is equivalent of init but admin can decide about it another time
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_WAITING_FOR_ADMIN        DepositStatus = 27 // admin can decide upon it
	DepositStatus_CRYPTO_DEPOSIT_STATUS_TRX_WAITING_FOR_CONFIRMATION DepositStatus = 28 // when trx is waiting to be confirmed by crypto-gw
	DepositStatus_CRYPTO_DEPOSIT_STATUS_PROCESSING                   DepositStatus = 41 // this is just for user and is not used in flows,
)

// Enum value maps for DepositStatus.
var (
	DepositStatus_name = map[int32]string{
		0:  "CRYPTO_DEPOSIT_STATUS_UNSPECIFIED",
		1:  "CRYPTO_DEPOSIT_STATUS_CLAIM_NEW",
		2:  "CRYPTO_DEPOSIT_STATUS_CLAIM_POD",
		3:  "CRYPTO_DEPOSIT_STATUS_CLAIM_ABORTED",
		4:  "CRYPTO_DEPOSIT_STATUS_CLAIM_NOT_CONFORMING",
		5:  "CRYPTO_DEPOSIT_STATUS_CLAIM_CANCELLED",
		21: "CRYPTO_DEPOSIT_STATUS_TRX_READY",
		22: "CRYPTO_DEPOSIT_STATUS_TRX_READY_TO_RECONCILE",
		23: "CRYPTO_DEPOSIT_STATUS_TRX_INITIATED",
		24: "CRYPTO_DEPOSIT_STATUS_TRX_FINALIZED",
		25: "CRYPTO_DEPOSIT_STATUS_TRX_CONFISCATED",
		26: "CRYPTO_DEPOSIT_STATUS_TRX_FROZEN",
		27: "CRYPTO_DEPOSIT_STATUS_TRX_WAITING_FOR_ADMIN",
		28: "CRYPTO_DEPOSIT_STATUS_TRX_WAITING_FOR_CONFIRMATION",
		41: "CRYPTO_DEPOSIT_STATUS_PROCESSING",
	}
	DepositStatus_value = map[string]int32{
		"CRYPTO_DEPOSIT_STATUS_UNSPECIFIED":                  0,
		"CRYPTO_DEPOSIT_STATUS_CLAIM_NEW":                    1,
		"CRYPTO_DEPOSIT_STATUS_CLAIM_POD":                    2,
		"CRYPTO_DEPOSIT_STATUS_CLAIM_ABORTED":                3,
		"CRYPTO_DEPOSIT_STATUS_CLAIM_NOT_CONFORMING":         4,
		"CRYPTO_DEPOSIT_STATUS_CLAIM_CANCELLED":              5,
		"CRYPTO_DEPOSIT_STATUS_TRX_READY":                    21,
		"CRYPTO_DEPOSIT_STATUS_TRX_READY_TO_RECONCILE":       22,
		"CRYPTO_DEPOSIT_STATUS_TRX_INITIATED":                23,
		"CRYPTO_DEPOSIT_STATUS_TRX_FINALIZED":                24,
		"CRYPTO_DEPOSIT_STATUS_TRX_CONFISCATED":              25,
		"CRYPTO_DEPOSIT_STATUS_TRX_FROZEN":                   26,
		"CRYPTO_DEPOSIT_STATUS_TRX_WAITING_FOR_ADMIN":        27,
		"CRYPTO_DEPOSIT_STATUS_TRX_WAITING_FOR_CONFIRMATION": 28,
		"CRYPTO_DEPOSIT_STATUS_PROCESSING":                   41,
	}
)

func (x DepositStatus) Enum() *DepositStatus {
	p := new(DepositStatus)
	*p = x
	return p
}

func (x DepositStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[0].Descriptor()
}

func (DepositStatus) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[0]
}

func (x DepositStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositStatus.Descriptor instead.
func (DepositStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{0}
}

type DepositType int32

const (
	DepositType_DEPOSIT_TYPE_UNSPECIFIED            DepositType = 0
	DepositType_DEPOSIT_TYPE_CLAIM                  DepositType = 1
	DepositType_DEPOSIT_TYPE_CLAIM_RECONCILIATION   DepositType = 2
	DepositType_DEPOSIT_TYPE_FULL_NODE              DepositType = 3
	DepositType_DEPOSIT_TYPE_TRANSACTION_SUSPENSION DepositType = 4
)

// Enum value maps for DepositType.
var (
	DepositType_name = map[int32]string{
		0: "DEPOSIT_TYPE_UNSPECIFIED",
		1: "DEPOSIT_TYPE_CLAIM",
		2: "DEPOSIT_TYPE_CLAIM_RECONCILIATION",
		3: "DEPOSIT_TYPE_FULL_NODE",
		4: "DEPOSIT_TYPE_TRANSACTION_SUSPENSION",
	}
	DepositType_value = map[string]int32{
		"DEPOSIT_TYPE_UNSPECIFIED":            0,
		"DEPOSIT_TYPE_CLAIM":                  1,
		"DEPOSIT_TYPE_CLAIM_RECONCILIATION":   2,
		"DEPOSIT_TYPE_FULL_NODE":              3,
		"DEPOSIT_TYPE_TRANSACTION_SUSPENSION": 4,
	}
)

func (x DepositType) Enum() *DepositType {
	p := new(DepositType)
	*p = x
	return p
}

func (x DepositType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[1].Descriptor()
}

func (DepositType) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[1]
}

func (x DepositType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositType.Descriptor instead.
func (DepositType) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{1}
}

type DepositTransactionAction int32

const (
	DepositTransactionAction_DEPOSIT_TRANSACTION_ACTION_UNSPECIFIED     DepositTransactionAction = 0
	DepositTransactionAction_DEPOSIT_TRANSACTION_ACTION_INIT_FINALIZE   DepositTransactionAction = 1
	DepositTransactionAction_DEPOSIT_TRANSACTION_ACTION_INIT_CONFISCATE DepositTransactionAction = 2
	DepositTransactionAction_DEPOSIT_TRANSACTION_ACTION_INIT_FREEZE     DepositTransactionAction = 3
)

// Enum value maps for DepositTransactionAction.
var (
	DepositTransactionAction_name = map[int32]string{
		0: "DEPOSIT_TRANSACTION_ACTION_UNSPECIFIED",
		1: "DEPOSIT_TRANSACTION_ACTION_INIT_FINALIZE",
		2: "DEPOSIT_TRANSACTION_ACTION_INIT_CONFISCATE",
		3: "DEPOSIT_TRANSACTION_ACTION_INIT_FREEZE",
	}
	DepositTransactionAction_value = map[string]int32{
		"DEPOSIT_TRANSACTION_ACTION_UNSPECIFIED":     0,
		"DEPOSIT_TRANSACTION_ACTION_INIT_FINALIZE":   1,
		"DEPOSIT_TRANSACTION_ACTION_INIT_CONFISCATE": 2,
		"DEPOSIT_TRANSACTION_ACTION_INIT_FREEZE":     3,
	}
)

func (x DepositTransactionAction) Enum() *DepositTransactionAction {
	p := new(DepositTransactionAction)
	*p = x
	return p
}

func (x DepositTransactionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositTransactionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[2].Descriptor()
}

func (DepositTransactionAction) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[2]
}

func (x DepositTransactionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositTransactionAction.Descriptor instead.
func (DepositTransactionAction) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{2}
}

type DepositReconcileAction int32

const (
	DepositReconcileAction_DEPOSIT_RECONCILE_ACTION_UNSPECIFIED DepositReconcileAction = 0
	DepositReconcileAction_DEPOSIT_RECONCILE_ACTION_FINALIZE    DepositReconcileAction = 1
	DepositReconcileAction_DEPOSIT_RECONCILE_ACTION_CONFISCATE  DepositReconcileAction = 2
)

// Enum value maps for DepositReconcileAction.
var (
	DepositReconcileAction_name = map[int32]string{
		0: "DEPOSIT_RECONCILE_ACTION_UNSPECIFIED",
		1: "DEPOSIT_RECONCILE_ACTION_FINALIZE",
		2: "DEPOSIT_RECONCILE_ACTION_CONFISCATE",
	}
	DepositReconcileAction_value = map[string]int32{
		"DEPOSIT_RECONCILE_ACTION_UNSPECIFIED": 0,
		"DEPOSIT_RECONCILE_ACTION_FINALIZE":    1,
		"DEPOSIT_RECONCILE_ACTION_CONFISCATE":  2,
	}
)

func (x DepositReconcileAction) Enum() *DepositReconcileAction {
	p := new(DepositReconcileAction)
	*p = x
	return p
}

func (x DepositReconcileAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepositReconcileAction) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[3].Descriptor()
}

func (DepositReconcileAction) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[3]
}

func (x DepositReconcileAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepositReconcileAction.Descriptor instead.
func (DepositReconcileAction) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{3}
}

type WithdrawStatus int32

const (
	WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED         WithdrawStatus = 0
	WithdrawStatus_WITHDRAW_STATUS_NEW                 WithdrawStatus = 1
	WithdrawStatus_WITHDRAW_STATUS_WAITING_FOR_ADMIN   WithdrawStatus = 2
	WithdrawStatus_WITHDRAW_STATUS_TO_GATEWAY          WithdrawStatus = 3
	WithdrawStatus_WITHDRAW_STATUS_SUCCESSFUL          WithdrawStatus = 4
	WithdrawStatus_WITHDRAW_STATUS_FAILED              WithdrawStatus = 5
	WithdrawStatus_WITHDRAW_STATUS_MISCARRIED          WithdrawStatus = 6
	WithdrawStatus_WITHDRAW_STATUS_COMPLETED           WithdrawStatus = 7
	WithdrawStatus_WITHDRAW_STATUS_CANCELLED           WithdrawStatus = 8
	WithdrawStatus_WITHDRAW_STATUS_FROZEN              WithdrawStatus = 9
	WithdrawStatus_WITHDRAW_STATUS_CORRECTED           WithdrawStatus = 10
	WithdrawStatus_WITHDRAW_STATUS_ACC_FINALIZE_FAILED WithdrawStatus = 11
	WithdrawStatus_WITHDRAW_STATUS_PROCESSING          WithdrawStatus = 21
)

// Enum value maps for WithdrawStatus.
var (
	WithdrawStatus_name = map[int32]string{
		0:  "WITHDRAW_STATUS_UNSPECIFIED",
		1:  "WITHDRAW_STATUS_NEW",
		2:  "WITHDRAW_STATUS_WAITING_FOR_ADMIN",
		3:  "WITHDRAW_STATUS_TO_GATEWAY",
		4:  "WITHDRAW_STATUS_SUCCESSFUL",
		5:  "WITHDRAW_STATUS_FAILED",
		6:  "WITHDRAW_STATUS_MISCARRIED",
		7:  "WITHDRAW_STATUS_COMPLETED",
		8:  "WITHDRAW_STATUS_CANCELLED",
		9:  "WITHDRAW_STATUS_FROZEN",
		10: "WITHDRAW_STATUS_CORRECTED",
		11: "WITHDRAW_STATUS_ACC_FINALIZE_FAILED",
		21: "WITHDRAW_STATUS_PROCESSING",
	}
	WithdrawStatus_value = map[string]int32{
		"WITHDRAW_STATUS_UNSPECIFIED":         0,
		"WITHDRAW_STATUS_NEW":                 1,
		"WITHDRAW_STATUS_WAITING_FOR_ADMIN":   2,
		"WITHDRAW_STATUS_TO_GATEWAY":          3,
		"WITHDRAW_STATUS_SUCCESSFUL":          4,
		"WITHDRAW_STATUS_FAILED":              5,
		"WITHDRAW_STATUS_MISCARRIED":          6,
		"WITHDRAW_STATUS_COMPLETED":           7,
		"WITHDRAW_STATUS_CANCELLED":           8,
		"WITHDRAW_STATUS_FROZEN":              9,
		"WITHDRAW_STATUS_CORRECTED":           10,
		"WITHDRAW_STATUS_ACC_FINALIZE_FAILED": 11,
		"WITHDRAW_STATUS_PROCESSING":          21,
	}
)

func (x WithdrawStatus) Enum() *WithdrawStatus {
	p := new(WithdrawStatus)
	*p = x
	return p
}

func (x WithdrawStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WithdrawStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[4].Descriptor()
}

func (WithdrawStatus) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[4]
}

func (x WithdrawStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WithdrawStatus.Descriptor instead.
func (WithdrawStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{4}
}

type WithdrawType int32

const (
	WithdrawType_WITHDRAW_TYPE_UNSPECIFIED WithdrawType = 0
	WithdrawType_WITHDRAW_TYPE_THIRD_PARTY WithdrawType = 1
	WithdrawType_WITHDRAW_TYPE_FULL_NODE   WithdrawType = 2
)

// Enum value maps for WithdrawType.
var (
	WithdrawType_name = map[int32]string{
		0: "WITHDRAW_TYPE_UNSPECIFIED",
		1: "WITHDRAW_TYPE_THIRD_PARTY",
		2: "WITHDRAW_TYPE_FULL_NODE",
	}
	WithdrawType_value = map[string]int32{
		"WITHDRAW_TYPE_UNSPECIFIED": 0,
		"WITHDRAW_TYPE_THIRD_PARTY": 1,
		"WITHDRAW_TYPE_FULL_NODE":   2,
	}
)

func (x WithdrawType) Enum() *WithdrawType {
	p := new(WithdrawType)
	*p = x
	return p
}

func (x WithdrawType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WithdrawType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[5].Descriptor()
}

func (WithdrawType) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[5]
}

func (x WithdrawType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WithdrawType.Descriptor instead.
func (WithdrawType) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{5}
}

type WithdrawTransactionAction int32

const (
	WithdrawTransactionAction_WITHDRAW_TRANSACTION_ACTION_UNSPECIFIED     WithdrawTransactionAction = 0
	WithdrawTransactionAction_WITHDRAW_TRANSACTION_ACTION_SEND_TO_GATEWAY WithdrawTransactionAction = 1
	WithdrawTransactionAction_WITHDRAW_TRANSACTION_ACTION_CANCEL          WithdrawTransactionAction = 2
	WithdrawTransactionAction_WITHDRAW_TRANSACTION_ACTION_FREEZE          WithdrawTransactionAction = 3
)

// Enum value maps for WithdrawTransactionAction.
var (
	WithdrawTransactionAction_name = map[int32]string{
		0: "WITHDRAW_TRANSACTION_ACTION_UNSPECIFIED",
		1: "WITHDRAW_TRANSACTION_ACTION_SEND_TO_GATEWAY",
		2: "WITHDRAW_TRANSACTION_ACTION_CANCEL",
		3: "WITHDRAW_TRANSACTION_ACTION_FREEZE",
	}
	WithdrawTransactionAction_value = map[string]int32{
		"WITHDRAW_TRANSACTION_ACTION_UNSPECIFIED":     0,
		"WITHDRAW_TRANSACTION_ACTION_SEND_TO_GATEWAY": 1,
		"WITHDRAW_TRANSACTION_ACTION_CANCEL":          2,
		"WITHDRAW_TRANSACTION_ACTION_FREEZE":          3,
	}
)

func (x WithdrawTransactionAction) Enum() *WithdrawTransactionAction {
	p := new(WithdrawTransactionAction)
	*p = x
	return p
}

func (x WithdrawTransactionAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WithdrawTransactionAction) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[6].Descriptor()
}

func (WithdrawTransactionAction) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[6]
}

func (x WithdrawTransactionAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WithdrawTransactionAction.Descriptor instead.
func (WithdrawTransactionAction) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{6}
}

type TreasuryType int32

const (
	TreasuryType_TREASURY_TYPE_UNSPECIFIED TreasuryType = 0
	TreasuryType_TREASURY_TYPE_THIRD_PARTY TreasuryType = 1
	TreasuryType_TREASURY_TYPE_FULL_NODE   TreasuryType = 2
)

// Enum value maps for TreasuryType.
var (
	TreasuryType_name = map[int32]string{
		0: "TREASURY_TYPE_UNSPECIFIED",
		1: "TREASURY_TYPE_THIRD_PARTY",
		2: "TREASURY_TYPE_FULL_NODE",
	}
	TreasuryType_value = map[string]int32{
		"TREASURY_TYPE_UNSPECIFIED": 0,
		"TREASURY_TYPE_THIRD_PARTY": 1,
		"TREASURY_TYPE_FULL_NODE":   2,
	}
)

func (x TreasuryType) Enum() *TreasuryType {
	p := new(TreasuryType)
	*p = x
	return p
}

func (x TreasuryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TreasuryType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_coordinator_crypto_enums_proto_enumTypes[7].Descriptor()
}

func (TreasuryType) Type() protoreflect.EnumType {
	return &file_financial_coordinator_crypto_enums_proto_enumTypes[7]
}

func (x TreasuryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TreasuryType.Descriptor instead.
func (TreasuryType) EnumDescriptor() ([]byte, []int) {
	return file_financial_coordinator_crypto_enums_proto_rawDescGZIP(), []int{7}
}

var File_financial_coordinator_crypto_enums_proto protoreflect.FileDescriptor

var file_financial_coordinator_crypto_enums_proto_rawDesc = []byte{
	0x0a, 0x28, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2d, 0x63, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2a, 0x8d, 0x05, 0x0a, 0x0d, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f,
	0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x50, 0x4f, 0x44, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x2e, 0x0a, 0x2a, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x4f, 0x52, 0x4d, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c, 0x41,
	0x49, 0x4d, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x23,
	0x0a, 0x1f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x15, 0x12, 0x30, 0x0a, 0x2c, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x58,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43,
	0x49, 0x4c, 0x45, 0x10, 0x16, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f,
	0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x52, 0x58, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x17, 0x12, 0x27,
	0x0a, 0x23, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x46, 0x49, 0x4e, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x18, 0x12, 0x29, 0x0a, 0x25, 0x43, 0x52, 0x59, 0x50, 0x54,
	0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x54, 0x52, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x53, 0x43, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x19, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x58, 0x5f,
	0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x1a, 0x12, 0x2f, 0x0a, 0x2b, 0x43, 0x52, 0x59, 0x50,
	0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f,
	0x52, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x1b, 0x12, 0x36, 0x0a, 0x32, 0x43, 0x52, 0x59,
	0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x52, 0x58, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46,
	0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x1c, 0x12, 0x24, 0x0a, 0x20, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x29, 0x2a, 0xaf, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x49, 0x4d, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c,
	0x41, 0x49, 0x4d, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x49, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x03,
	0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x55, 0x53,
	0x50, 0x45, 0x4e, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x2a, 0xd0, 0x01, 0x0a, 0x18, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49,
	0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x01,
	0x12, 0x2e, 0x0a, 0x2a, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x53, 0x43, 0x41, 0x54, 0x45, 0x10, 0x02,
	0x12, 0x2a, 0x0a, 0x26, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x03, 0x2a, 0x92, 0x01, 0x0a,
	0x16, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x24, 0x44, 0x45, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x45, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x43,
	0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49,
	0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x43, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x53, 0x43, 0x41, 0x54, 0x45, 0x10,
	0x02, 0x2a, 0xaf, 0x03, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x57, 0x10, 0x01, 0x12, 0x25,
	0x0a, 0x21, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x41, 0x44,
	0x4d, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x46, 0x55, 0x4c, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41,
	0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x07,
	0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x08, 0x12,
	0x1a, 0x0a, 0x16, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x57,
	0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x27, 0x0a, 0x23, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43,
	0x43, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x0b, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x15, 0x2a, 0x69, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0xc9,
	0x01, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x27,
	0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x2f, 0x0a, 0x2b, 0x57, 0x49, 0x54,
	0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x4f,
	0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49,
	0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x57, 0x49, 0x54, 0x48, 0x44, 0x52, 0x41, 0x57, 0x5f, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x03, 0x2a, 0x69, 0x0a, 0x0c, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52,
	0x45, 0x41, 0x53, 0x55, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x45,
	0x41, 0x53, 0x55, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x52, 0x45, 0x41,
	0x53, 0x55, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x10, 0x02, 0x42, 0x32, 0x5a, 0x30, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2d,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_financial_coordinator_crypto_enums_proto_rawDescOnce sync.Once
	file_financial_coordinator_crypto_enums_proto_rawDescData = file_financial_coordinator_crypto_enums_proto_rawDesc
)

func file_financial_coordinator_crypto_enums_proto_rawDescGZIP() []byte {
	file_financial_coordinator_crypto_enums_proto_rawDescOnce.Do(func() {
		file_financial_coordinator_crypto_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_financial_coordinator_crypto_enums_proto_rawDescData)
	})
	return file_financial_coordinator_crypto_enums_proto_rawDescData
}

var file_financial_coordinator_crypto_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_financial_coordinator_crypto_enums_proto_goTypes = []interface{}{
	(DepositStatus)(0),             // 0: financialCoordinator.crypto.DepositStatus
	(DepositType)(0),               // 1: financialCoordinator.crypto.DepositType
	(DepositTransactionAction)(0),  // 2: financialCoordinator.crypto.DepositTransactionAction
	(DepositReconcileAction)(0),    // 3: financialCoordinator.crypto.DepositReconcileAction
	(WithdrawStatus)(0),            // 4: financialCoordinator.crypto.WithdrawStatus
	(WithdrawType)(0),              // 5: financialCoordinator.crypto.WithdrawType
	(WithdrawTransactionAction)(0), // 6: financialCoordinator.crypto.WithdrawTransactionAction
	(TreasuryType)(0),              // 7: financialCoordinator.crypto.TreasuryType
}
var file_financial_coordinator_crypto_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_financial_coordinator_crypto_enums_proto_init() }
func file_financial_coordinator_crypto_enums_proto_init() {
	if File_financial_coordinator_crypto_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_financial_coordinator_crypto_enums_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_financial_coordinator_crypto_enums_proto_goTypes,
		DependencyIndexes: file_financial_coordinator_crypto_enums_proto_depIdxs,
		EnumInfos:         file_financial_coordinator_crypto_enums_proto_enumTypes,
	}.Build()
	File_financial_coordinator_crypto_enums_proto = out.File
	file_financial_coordinator_crypto_enums_proto_rawDesc = nil
	file_financial_coordinator_crypto_enums_proto_goTypes = nil
	file_financial_coordinator_crypto_enums_proto_depIdxs = nil
}
