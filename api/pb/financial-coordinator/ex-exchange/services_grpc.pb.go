// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: financial-coordinator/ex-exchange/services.proto

package exExchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalExchangeCoordinatorClient is the client API for ExternalExchangeCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalExchangeCoordinatorClient interface {
	// (ADMIN) Filter
	Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error)
	//////////////////////////////////////////////////////////
	/////// External exchange order actions
	//////////////////////////////////////////////////////////
	// (ADMIN) Retry
	Retry(ctx context.Context, in *RetryRequest, opts ...grpc.CallOption) (*RetryResponse, error)
	// (ADMIN) Cancel
	Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error)
	// (ADMIN) FilledDeclare
	FilledDeclare(ctx context.Context, in *FilledDeclareRequest, opts ...grpc.CallOption) (*FilledDeclareResponse, error)
	// (ADMIN) CommentCreate
	CommentCreate(ctx context.Context, in *CommentCreateRequest, opts ...grpc.CallOption) (*CommentCreateResponse, error)
	// (ADMIN) CommentList
	CommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error)
	// (SYSTEM)
	MarketBuy(ctx context.Context, in *MarketBuyRequest, opts ...grpc.CallOption) (*MarketBuyResponse, error)
	// (SYSTEM)
	MarketSell(ctx context.Context, in *MarketSellRequest, opts ...grpc.CallOption) (*MarketSellResponse, error)
	// (ADMIN) MarketBuyManual
	MarketBuyManual(ctx context.Context, in *MarketBuyRequest, opts ...grpc.CallOption) (*MarketBuyResponse, error)
	// (ADMIN) MarketSellManual
	MarketSellManual(ctx context.Context, in *MarketSellRequest, opts ...grpc.CallOption) (*MarketSellResponse, error)
}

type externalExchangeCoordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalExchangeCoordinatorClient(cc grpc.ClientConnInterface) ExternalExchangeCoordinatorClient {
	return &externalExchangeCoordinatorClient{cc}
}

func (c *externalExchangeCoordinatorClient) Filter(ctx context.Context, in *FilterRequest, opts ...grpc.CallOption) (*FilterResponse, error) {
	out := new(FilterResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) Retry(ctx context.Context, in *RetryRequest, opts ...grpc.CallOption) (*RetryResponse, error) {
	out := new(RetryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/Retry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) Cancel(ctx context.Context, in *CancelRequest, opts ...grpc.CallOption) (*CancelResponse, error) {
	out := new(CancelResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) FilledDeclare(ctx context.Context, in *FilledDeclareRequest, opts ...grpc.CallOption) (*FilledDeclareResponse, error) {
	out := new(FilledDeclareResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/FilledDeclare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) CommentCreate(ctx context.Context, in *CommentCreateRequest, opts ...grpc.CallOption) (*CommentCreateResponse, error) {
	out := new(CommentCreateResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/CommentCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) CommentList(ctx context.Context, in *CommentListRequest, opts ...grpc.CallOption) (*CommentListResponse, error) {
	out := new(CommentListResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/CommentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) MarketBuy(ctx context.Context, in *MarketBuyRequest, opts ...grpc.CallOption) (*MarketBuyResponse, error) {
	out := new(MarketBuyResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) MarketSell(ctx context.Context, in *MarketSellRequest, opts ...grpc.CallOption) (*MarketSellResponse, error) {
	out := new(MarketSellResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) MarketBuyManual(ctx context.Context, in *MarketBuyRequest, opts ...grpc.CallOption) (*MarketBuyResponse, error) {
	out := new(MarketBuyResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketBuyManual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalExchangeCoordinatorClient) MarketSellManual(ctx context.Context, in *MarketSellRequest, opts ...grpc.CallOption) (*MarketSellResponse, error) {
	out := new(MarketSellResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketSellManual", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalExchangeCoordinatorServer is the server API for ExternalExchangeCoordinator service.
// All implementations must embed UnimplementedExternalExchangeCoordinatorServer
// for forward compatibility
type ExternalExchangeCoordinatorServer interface {
	// (ADMIN) Filter
	Filter(context.Context, *FilterRequest) (*FilterResponse, error)
	//////////////////////////////////////////////////////////
	/////// External exchange order actions
	//////////////////////////////////////////////////////////
	// (ADMIN) Retry
	Retry(context.Context, *RetryRequest) (*RetryResponse, error)
	// (ADMIN) Cancel
	Cancel(context.Context, *CancelRequest) (*CancelResponse, error)
	// (ADMIN) FilledDeclare
	FilledDeclare(context.Context, *FilledDeclareRequest) (*FilledDeclareResponse, error)
	// (ADMIN) CommentCreate
	CommentCreate(context.Context, *CommentCreateRequest) (*CommentCreateResponse, error)
	// (ADMIN) CommentList
	CommentList(context.Context, *CommentListRequest) (*CommentListResponse, error)
	// (SYSTEM)
	MarketBuy(context.Context, *MarketBuyRequest) (*MarketBuyResponse, error)
	// (SYSTEM)
	MarketSell(context.Context, *MarketSellRequest) (*MarketSellResponse, error)
	// (ADMIN) MarketBuyManual
	MarketBuyManual(context.Context, *MarketBuyRequest) (*MarketBuyResponse, error)
	// (ADMIN) MarketSellManual
	MarketSellManual(context.Context, *MarketSellRequest) (*MarketSellResponse, error)
	mustEmbedUnimplementedExternalExchangeCoordinatorServer()
}

// UnimplementedExternalExchangeCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedExternalExchangeCoordinatorServer struct {
}

func (UnimplementedExternalExchangeCoordinatorServer) Filter(context.Context, *FilterRequest) (*FilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) Retry(context.Context, *RetryRequest) (*RetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Retry not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) Cancel(context.Context, *CancelRequest) (*CancelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) FilledDeclare(context.Context, *FilledDeclareRequest) (*FilledDeclareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilledDeclare not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) CommentCreate(context.Context, *CommentCreateRequest) (*CommentCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentCreate not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) CommentList(context.Context, *CommentListRequest) (*CommentListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentList not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) MarketBuy(context.Context, *MarketBuyRequest) (*MarketBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBuy not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) MarketSell(context.Context, *MarketSellRequest) (*MarketSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSell not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) MarketBuyManual(context.Context, *MarketBuyRequest) (*MarketBuyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBuyManual not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) MarketSellManual(context.Context, *MarketSellRequest) (*MarketSellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSellManual not implemented")
}
func (UnimplementedExternalExchangeCoordinatorServer) mustEmbedUnimplementedExternalExchangeCoordinatorServer() {
}

// UnsafeExternalExchangeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalExchangeCoordinatorServer will
// result in compilation errors.
type UnsafeExternalExchangeCoordinatorServer interface {
	mustEmbedUnimplementedExternalExchangeCoordinatorServer()
}

func RegisterExternalExchangeCoordinatorServer(s grpc.ServiceRegistrar, srv ExternalExchangeCoordinatorServer) {
	s.RegisterService(&ExternalExchangeCoordinator_ServiceDesc, srv)
}

func _ExternalExchangeCoordinator_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).Filter(ctx, req.(*FilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_Retry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).Retry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/Retry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).Retry(ctx, req.(*RetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).Cancel(ctx, req.(*CancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_FilledDeclare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilledDeclareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).FilledDeclare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/FilledDeclare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).FilledDeclare(ctx, req.(*FilledDeclareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_CommentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).CommentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/CommentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).CommentCreate(ctx, req.(*CommentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_CommentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).CommentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/CommentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).CommentList(ctx, req.(*CommentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_MarketBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).MarketBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).MarketBuy(ctx, req.(*MarketBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_MarketSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).MarketSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).MarketSell(ctx, req.(*MarketSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_MarketBuyManual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).MarketBuyManual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketBuyManual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).MarketBuyManual(ctx, req.(*MarketBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalExchangeCoordinator_MarketSellManual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarketSellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalExchangeCoordinatorServer).MarketSellManual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator/MarketSellManual",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalExchangeCoordinatorServer).MarketSellManual(ctx, req.(*MarketSellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalExchangeCoordinator_ServiceDesc is the grpc.ServiceDesc for ExternalExchangeCoordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalExchangeCoordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.financialCoordinator.exExchange.ExternalExchangeCoordinator",
	HandlerType: (*ExternalExchangeCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _ExternalExchangeCoordinator_Filter_Handler,
		},
		{
			MethodName: "Retry",
			Handler:    _ExternalExchangeCoordinator_Retry_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _ExternalExchangeCoordinator_Cancel_Handler,
		},
		{
			MethodName: "FilledDeclare",
			Handler:    _ExternalExchangeCoordinator_FilledDeclare_Handler,
		},
		{
			MethodName: "CommentCreate",
			Handler:    _ExternalExchangeCoordinator_CommentCreate_Handler,
		},
		{
			MethodName: "CommentList",
			Handler:    _ExternalExchangeCoordinator_CommentList_Handler,
		},
		{
			MethodName: "MarketBuy",
			Handler:    _ExternalExchangeCoordinator_MarketBuy_Handler,
		},
		{
			MethodName: "MarketSell",
			Handler:    _ExternalExchangeCoordinator_MarketSell_Handler,
		},
		{
			MethodName: "MarketBuyManual",
			Handler:    _ExternalExchangeCoordinator_MarketBuyManual_Handler,
		},
		{
			MethodName: "MarketSellManual",
			Handler:    _ExternalExchangeCoordinator_MarketSellManual_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "financial-coordinator/ex-exchange/services.proto",
}
