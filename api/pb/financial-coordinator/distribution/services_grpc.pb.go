// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: financial-coordinator/distribution/services.proto

package distribution

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistributionAPIClient is the client API for DistributionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionAPIClient interface {
	DistributionFilter(ctx context.Context, in *DistributionFilterRequest, opts ...grpc.CallOption) (*DistributionFilterResponse, error)
	DistributionHistory(ctx context.Context, in *DistributionHistoryRequest, opts ...grpc.CallOption) (*DistributionHistoryResponse, error)
	GetReferralSum(ctx context.Context, in *GetReferralSumRequest, opts ...grpc.CallOption) (*GetReferralSumResponse, error)
}

type distributionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionAPIClient(cc grpc.ClientConnInterface) DistributionAPIClient {
	return &distributionAPIClient{cc}
}

func (c *distributionAPIClient) DistributionFilter(ctx context.Context, in *DistributionFilterRequest, opts ...grpc.CallOption) (*DistributionFilterResponse, error) {
	out := new(DistributionFilterResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.distribution.DistributionAPI/DistributionFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionAPIClient) DistributionHistory(ctx context.Context, in *DistributionHistoryRequest, opts ...grpc.CallOption) (*DistributionHistoryResponse, error) {
	out := new(DistributionHistoryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.distribution.DistributionAPI/DistributionHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributionAPIClient) GetReferralSum(ctx context.Context, in *GetReferralSumRequest, opts ...grpc.CallOption) (*GetReferralSumResponse, error) {
	out := new(GetReferralSumResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.financialCoordinator.distribution.DistributionAPI/GetReferralSum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionAPIServer is the server API for DistributionAPI service.
// All implementations must embed UnimplementedDistributionAPIServer
// for forward compatibility
type DistributionAPIServer interface {
	DistributionFilter(context.Context, *DistributionFilterRequest) (*DistributionFilterResponse, error)
	DistributionHistory(context.Context, *DistributionHistoryRequest) (*DistributionHistoryResponse, error)
	GetReferralSum(context.Context, *GetReferralSumRequest) (*GetReferralSumResponse, error)
	mustEmbedUnimplementedDistributionAPIServer()
}

// UnimplementedDistributionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionAPIServer struct {
}

func (UnimplementedDistributionAPIServer) DistributionFilter(context.Context, *DistributionFilterRequest) (*DistributionFilterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributionFilter not implemented")
}
func (UnimplementedDistributionAPIServer) DistributionHistory(context.Context, *DistributionHistoryRequest) (*DistributionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributionHistory not implemented")
}
func (UnimplementedDistributionAPIServer) GetReferralSum(context.Context, *GetReferralSumRequest) (*GetReferralSumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralSum not implemented")
}
func (UnimplementedDistributionAPIServer) mustEmbedUnimplementedDistributionAPIServer() {}

// UnsafeDistributionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionAPIServer will
// result in compilation errors.
type UnsafeDistributionAPIServer interface {
	mustEmbedUnimplementedDistributionAPIServer()
}

func RegisterDistributionAPIServer(s grpc.ServiceRegistrar, srv DistributionAPIServer) {
	s.RegisterService(&DistributionAPI_ServiceDesc, srv)
}

func _DistributionAPI_DistributionFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionAPIServer).DistributionFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.distribution.DistributionAPI/DistributionFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionAPIServer).DistributionFilter(ctx, req.(*DistributionFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionAPI_DistributionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionAPIServer).DistributionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.distribution.DistributionAPI/DistributionHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionAPIServer).DistributionHistory(ctx, req.(*DistributionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistributionAPI_GetReferralSum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralSumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionAPIServer).GetReferralSum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.financialCoordinator.distribution.DistributionAPI/GetReferralSum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionAPIServer).GetReferralSum(ctx, req.(*GetReferralSumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DistributionAPI_ServiceDesc is the grpc.ServiceDesc for DistributionAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistributionAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.financialCoordinator.distribution.DistributionAPI",
	HandlerType: (*DistributionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributionFilter",
			Handler:    _DistributionAPI_DistributionFilter_Handler,
		},
		{
			MethodName: "DistributionHistory",
			Handler:    _DistributionAPI_DistributionHistory_Handler,
		},
		{
			MethodName: "GetReferralSum",
			Handler:    _DistributionAPI_GetReferralSum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "financial-coordinator/distribution/services.proto",
}
