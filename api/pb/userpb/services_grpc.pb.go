// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: userpb/services.proto

package userpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	commons "rabex/api/pb/commons"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUser(ctx context.Context, in *commons.TargetUser, opts ...grpc.CallOption) (*UserResponse, error)
	VerifyUserIban(ctx context.Context, in *VerifyIbanRequest, opts ...grpc.CallOption) (*VerifyIbanResponse, error)
	VerifyUserBankCard(ctx context.Context, in *VerifyBankCardRequest, opts ...grpc.CallOption) (*VerifyBankCardResponse, error)
	ListUserBankCards(ctx context.Context, in *commons.TargetUser, opts ...grpc.CallOption) (*UserBankCards, error)
	ListUserIbans(ctx context.Context, in *commons.TargetUser, opts ...grpc.CallOption) (*UserIbans, error)
	VerifyUserCID(ctx context.Context, in *VerifyCIDRequest, opts ...grpc.CallOption) (*VerifyCIDResponse, error)
	VerifyUserDeposit(ctx context.Context, in *VerifyUserDeposit, opts ...grpc.CallOption) (*VerifyUserDepositResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUser(ctx context.Context, in *commons.TargetUser, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyUserIban(ctx context.Context, in *VerifyIbanRequest, opts ...grpc.CallOption) (*VerifyIbanResponse, error) {
	out := new(VerifyIbanResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/VerifyUserIban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyUserBankCard(ctx context.Context, in *VerifyBankCardRequest, opts ...grpc.CallOption) (*VerifyBankCardResponse, error) {
	out := new(VerifyBankCardResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/VerifyUserBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUserBankCards(ctx context.Context, in *commons.TargetUser, opts ...grpc.CallOption) (*UserBankCards, error) {
	out := new(UserBankCards)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/ListUserBankCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUserIbans(ctx context.Context, in *commons.TargetUser, opts ...grpc.CallOption) (*UserIbans, error) {
	out := new(UserIbans)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/ListUserIbans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyUserCID(ctx context.Context, in *VerifyCIDRequest, opts ...grpc.CallOption) (*VerifyCIDResponse, error) {
	out := new(VerifyCIDResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/VerifyUserCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) VerifyUserDeposit(ctx context.Context, in *VerifyUserDeposit, opts ...grpc.CallOption) (*VerifyUserDepositResponse, error) {
	out := new(VerifyUserDepositResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.User/VerifyUserDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUser(context.Context, *commons.TargetUser) (*UserResponse, error)
	VerifyUserIban(context.Context, *VerifyIbanRequest) (*VerifyIbanResponse, error)
	VerifyUserBankCard(context.Context, *VerifyBankCardRequest) (*VerifyBankCardResponse, error)
	ListUserBankCards(context.Context, *commons.TargetUser) (*UserBankCards, error)
	ListUserIbans(context.Context, *commons.TargetUser) (*UserIbans, error)
	VerifyUserCID(context.Context, *VerifyCIDRequest) (*VerifyCIDResponse, error)
	VerifyUserDeposit(context.Context, *VerifyUserDeposit) (*VerifyUserDepositResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUser(context.Context, *commons.TargetUser) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) VerifyUserIban(context.Context, *VerifyIbanRequest) (*VerifyIbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserIban not implemented")
}
func (UnimplementedUserServer) VerifyUserBankCard(context.Context, *VerifyBankCardRequest) (*VerifyBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserBankCard not implemented")
}
func (UnimplementedUserServer) ListUserBankCards(context.Context, *commons.TargetUser) (*UserBankCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserBankCards not implemented")
}
func (UnimplementedUserServer) ListUserIbans(context.Context, *commons.TargetUser) (*UserIbans, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserIbans not implemented")
}
func (UnimplementedUserServer) VerifyUserCID(context.Context, *VerifyCIDRequest) (*VerifyCIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserCID not implemented")
}
func (UnimplementedUserServer) VerifyUserDeposit(context.Context, *VerifyUserDeposit) (*VerifyUserDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserDeposit not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.TargetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*commons.TargetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyUserIban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyIbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyUserIban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/VerifyUserIban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyUserIban(ctx, req.(*VerifyIbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyUserBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyUserBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/VerifyUserBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyUserBankCard(ctx, req.(*VerifyBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUserBankCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.TargetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUserBankCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/ListUserBankCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUserBankCards(ctx, req.(*commons.TargetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUserIbans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.TargetUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUserIbans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/ListUserIbans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUserIbans(ctx, req.(*commons.TargetUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyUserCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyUserCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/VerifyUserCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyUserCID(ctx, req.(*VerifyCIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_VerifyUserDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).VerifyUserDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.User/VerifyUserDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).VerifyUserDeposit(ctx, req.(*VerifyUserDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "VerifyUserIban",
			Handler:    _User_VerifyUserIban_Handler,
		},
		{
			MethodName: "VerifyUserBankCard",
			Handler:    _User_VerifyUserBankCard_Handler,
		},
		{
			MethodName: "ListUserBankCards",
			Handler:    _User_ListUserBankCards_Handler,
		},
		{
			MethodName: "ListUserIbans",
			Handler:    _User_ListUserIbans_Handler,
		},
		{
			MethodName: "VerifyUserCID",
			Handler:    _User_VerifyUserCID_Handler,
		},
		{
			MethodName: "VerifyUserDeposit",
			Handler:    _User_VerifyUserDeposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpb/services.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	VerifyToken(ctx context.Context, in *commons.InternalRequest, opts ...grpc.CallOption) (*commons.InternalResponse, error)
	AuthenticateUser(ctx context.Context, in *commons.InternalRequest, opts ...grpc.CallOption) (*commons.InternalResponse, error)
	CheckUserAnomalyStatus(ctx context.Context, in *UserAnomalyRequest, opts ...grpc.CallOption) (*UserAnomalyResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) VerifyToken(ctx context.Context, in *commons.InternalRequest, opts ...grpc.CallOption) (*commons.InternalResponse, error) {
	out := new(commons.InternalResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.Auth/VerifyToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) AuthenticateUser(ctx context.Context, in *commons.InternalRequest, opts ...grpc.CallOption) (*commons.InternalResponse, error) {
	out := new(commons.InternalResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.Auth/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CheckUserAnomalyStatus(ctx context.Context, in *UserAnomalyRequest, opts ...grpc.CallOption) (*UserAnomalyResponse, error) {
	out := new(UserAnomalyResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.user.Auth/CheckUserAnomalyStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	VerifyToken(context.Context, *commons.InternalRequest) (*commons.InternalResponse, error)
	AuthenticateUser(context.Context, *commons.InternalRequest) (*commons.InternalResponse, error)
	CheckUserAnomalyStatus(context.Context, *UserAnomalyRequest) (*UserAnomalyResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) VerifyToken(context.Context, *commons.InternalRequest) (*commons.InternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyToken not implemented")
}
func (UnimplementedAuthServer) AuthenticateUser(context.Context, *commons.InternalRequest) (*commons.InternalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedAuthServer) CheckUserAnomalyStatus(context.Context, *UserAnomalyRequest) (*UserAnomalyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAnomalyStatus not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_VerifyToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.InternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).VerifyToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.Auth/VerifyToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).VerifyToken(ctx, req.(*commons.InternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.InternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.Auth/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).AuthenticateUser(ctx, req.(*commons.InternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CheckUserAnomalyStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAnomalyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CheckUserAnomalyStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.user.Auth/CheckUserAnomalyStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CheckUserAnomalyStatus(ctx, req.(*UserAnomalyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.user.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyToken",
			Handler:    _Auth_VerifyToken_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _Auth_AuthenticateUser_Handler,
		},
		{
			MethodName: "CheckUserAnomalyStatus",
			Handler:    _Auth_CheckUserAnomalyStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userpb/services.proto",
}
