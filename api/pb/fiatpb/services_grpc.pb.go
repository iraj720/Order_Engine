// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: fiatpb/services.proto

package fiatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FiatClient is the client API for Fiat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FiatClient interface {
	/////////////////////////////////////
	// General
	/////////////////////////////////////
	SetDefaultPaymentService(ctx context.Context, in *DefaultPaymentServiceRequest, opts ...grpc.CallOption) (*DefaultPaymentServiceResponse, error)
	/////////////////////////////////////
	// Deposit
	/////////////////////////////////////
	SubmitNewDeposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error)
	GetDepositData(ctx context.Context, in *TargetOrder, opts ...grpc.CallOption) (*DepositDataResponse, error)
	GetDepositDataByInvoiceNum(ctx context.Context, in *GetDepositDataByInvoiceNumRequest, opts ...grpc.CallOption) (*GetDepositDataByInvoiceNumResponse, error)
	DepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...grpc.CallOption) (*DepositCallbackResponse, error)
	/////////////////////////////////////
	// Withdraw
	/////////////////////////////////////
	SubmitNewWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	GetWithdrawData(ctx context.Context, in *TargetOrder, opts ...grpc.CallOption) (*WithdrawDataResponse, error)
	GetWithdrawDataByInvoiceNum(ctx context.Context, in *GetWithdrawDataByInvoiceNumRequest, opts ...grpc.CallOption) (*GetWithdrawDataByInvoiceNumResponse, error)
	CancelWithdraw(ctx context.Context, in *TargetOrder, opts ...grpc.CallOption) (*CancelWithdrawResponse, error)
	WithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...grpc.CallOption) (*WithdrawCallbackResponse, error)
	ResendWithdrawToPaymentService(ctx context.Context, in *ResendWithdrawToPaymentServiceRequest, opts ...grpc.CallOption) (*ResendWithdrawToPaymentServiceResponse, error)
}

type fiatClient struct {
	cc grpc.ClientConnInterface
}

func NewFiatClient(cc grpc.ClientConnInterface) FiatClient {
	return &fiatClient{cc}
}

func (c *fiatClient) SetDefaultPaymentService(ctx context.Context, in *DefaultPaymentServiceRequest, opts ...grpc.CallOption) (*DefaultPaymentServiceResponse, error) {
	out := new(DefaultPaymentServiceResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/SetDefaultPaymentService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) SubmitNewDeposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*DepositResponse, error) {
	out := new(DepositResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/SubmitNewDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) GetDepositData(ctx context.Context, in *TargetOrder, opts ...grpc.CallOption) (*DepositDataResponse, error) {
	out := new(DepositDataResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/GetDepositData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) GetDepositDataByInvoiceNum(ctx context.Context, in *GetDepositDataByInvoiceNumRequest, opts ...grpc.CallOption) (*GetDepositDataByInvoiceNumResponse, error) {
	out := new(GetDepositDataByInvoiceNumResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/GetDepositDataByInvoiceNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) DepositCallback(ctx context.Context, in *DepositCallbackRequest, opts ...grpc.CallOption) (*DepositCallbackResponse, error) {
	out := new(DepositCallbackResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/DepositCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) SubmitNewWithdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/SubmitNewWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) GetWithdrawData(ctx context.Context, in *TargetOrder, opts ...grpc.CallOption) (*WithdrawDataResponse, error) {
	out := new(WithdrawDataResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/GetWithdrawData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) GetWithdrawDataByInvoiceNum(ctx context.Context, in *GetWithdrawDataByInvoiceNumRequest, opts ...grpc.CallOption) (*GetWithdrawDataByInvoiceNumResponse, error) {
	out := new(GetWithdrawDataByInvoiceNumResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/GetWithdrawDataByInvoiceNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) CancelWithdraw(ctx context.Context, in *TargetOrder, opts ...grpc.CallOption) (*CancelWithdrawResponse, error) {
	out := new(CancelWithdrawResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/CancelWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) WithdrawCallback(ctx context.Context, in *WithdrawCallbackRequest, opts ...grpc.CallOption) (*WithdrawCallbackResponse, error) {
	out := new(WithdrawCallbackResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/WithdrawCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fiatClient) ResendWithdrawToPaymentService(ctx context.Context, in *ResendWithdrawToPaymentServiceRequest, opts ...grpc.CallOption) (*ResendWithdrawToPaymentServiceResponse, error) {
	out := new(ResendWithdrawToPaymentServiceResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.fiat.Fiat/ResendWithdrawToPaymentService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FiatServer is the server API for Fiat service.
// All implementations must embed UnimplementedFiatServer
// for forward compatibility
type FiatServer interface {
	/////////////////////////////////////
	// General
	/////////////////////////////////////
	SetDefaultPaymentService(context.Context, *DefaultPaymentServiceRequest) (*DefaultPaymentServiceResponse, error)
	/////////////////////////////////////
	// Deposit
	/////////////////////////////////////
	SubmitNewDeposit(context.Context, *DepositRequest) (*DepositResponse, error)
	GetDepositData(context.Context, *TargetOrder) (*DepositDataResponse, error)
	GetDepositDataByInvoiceNum(context.Context, *GetDepositDataByInvoiceNumRequest) (*GetDepositDataByInvoiceNumResponse, error)
	DepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error)
	/////////////////////////////////////
	// Withdraw
	/////////////////////////////////////
	SubmitNewWithdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	GetWithdrawData(context.Context, *TargetOrder) (*WithdrawDataResponse, error)
	GetWithdrawDataByInvoiceNum(context.Context, *GetWithdrawDataByInvoiceNumRequest) (*GetWithdrawDataByInvoiceNumResponse, error)
	CancelWithdraw(context.Context, *TargetOrder) (*CancelWithdrawResponse, error)
	WithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error)
	ResendWithdrawToPaymentService(context.Context, *ResendWithdrawToPaymentServiceRequest) (*ResendWithdrawToPaymentServiceResponse, error)
	mustEmbedUnimplementedFiatServer()
}

// UnimplementedFiatServer must be embedded to have forward compatible implementations.
type UnimplementedFiatServer struct {
}

func (UnimplementedFiatServer) SetDefaultPaymentService(context.Context, *DefaultPaymentServiceRequest) (*DefaultPaymentServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDefaultPaymentService not implemented")
}
func (UnimplementedFiatServer) SubmitNewDeposit(context.Context, *DepositRequest) (*DepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewDeposit not implemented")
}
func (UnimplementedFiatServer) GetDepositData(context.Context, *TargetOrder) (*DepositDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositData not implemented")
}
func (UnimplementedFiatServer) GetDepositDataByInvoiceNum(context.Context, *GetDepositDataByInvoiceNumRequest) (*GetDepositDataByInvoiceNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositDataByInvoiceNum not implemented")
}
func (UnimplementedFiatServer) DepositCallback(context.Context, *DepositCallbackRequest) (*DepositCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositCallback not implemented")
}
func (UnimplementedFiatServer) SubmitNewWithdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitNewWithdraw not implemented")
}
func (UnimplementedFiatServer) GetWithdrawData(context.Context, *TargetOrder) (*WithdrawDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawData not implemented")
}
func (UnimplementedFiatServer) GetWithdrawDataByInvoiceNum(context.Context, *GetWithdrawDataByInvoiceNumRequest) (*GetWithdrawDataByInvoiceNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawDataByInvoiceNum not implemented")
}
func (UnimplementedFiatServer) CancelWithdraw(context.Context, *TargetOrder) (*CancelWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWithdraw not implemented")
}
func (UnimplementedFiatServer) WithdrawCallback(context.Context, *WithdrawCallbackRequest) (*WithdrawCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawCallback not implemented")
}
func (UnimplementedFiatServer) ResendWithdrawToPaymentService(context.Context, *ResendWithdrawToPaymentServiceRequest) (*ResendWithdrawToPaymentServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendWithdrawToPaymentService not implemented")
}
func (UnimplementedFiatServer) mustEmbedUnimplementedFiatServer() {}

// UnsafeFiatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FiatServer will
// result in compilation errors.
type UnsafeFiatServer interface {
	mustEmbedUnimplementedFiatServer()
}

func RegisterFiatServer(s grpc.ServiceRegistrar, srv FiatServer) {
	s.RegisterService(&Fiat_ServiceDesc, srv)
}

func _Fiat_SetDefaultPaymentService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefaultPaymentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).SetDefaultPaymentService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/SetDefaultPaymentService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).SetDefaultPaymentService(ctx, req.(*DefaultPaymentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_SubmitNewDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).SubmitNewDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/SubmitNewDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).SubmitNewDeposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_GetDepositData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).GetDepositData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/GetDepositData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).GetDepositData(ctx, req.(*TargetOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_GetDepositDataByInvoiceNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositDataByInvoiceNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).GetDepositDataByInvoiceNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/GetDepositDataByInvoiceNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).GetDepositDataByInvoiceNum(ctx, req.(*GetDepositDataByInvoiceNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_DepositCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).DepositCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/DepositCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).DepositCallback(ctx, req.(*DepositCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_SubmitNewWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).SubmitNewWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/SubmitNewWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).SubmitNewWithdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_GetWithdrawData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).GetWithdrawData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/GetWithdrawData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).GetWithdrawData(ctx, req.(*TargetOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_GetWithdrawDataByInvoiceNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawDataByInvoiceNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).GetWithdrawDataByInvoiceNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/GetWithdrawDataByInvoiceNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).GetWithdrawDataByInvoiceNum(ctx, req.(*GetWithdrawDataByInvoiceNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_CancelWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).CancelWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/CancelWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).CancelWithdraw(ctx, req.(*TargetOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_WithdrawCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).WithdrawCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/WithdrawCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).WithdrawCallback(ctx, req.(*WithdrawCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fiat_ResendWithdrawToPaymentService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendWithdrawToPaymentServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FiatServer).ResendWithdrawToPaymentService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.fiat.Fiat/ResendWithdrawToPaymentService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FiatServer).ResendWithdrawToPaymentService(ctx, req.(*ResendWithdrawToPaymentServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fiat_ServiceDesc is the grpc.ServiceDesc for Fiat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fiat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.fiat.Fiat",
	HandlerType: (*FiatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetDefaultPaymentService",
			Handler:    _Fiat_SetDefaultPaymentService_Handler,
		},
		{
			MethodName: "SubmitNewDeposit",
			Handler:    _Fiat_SubmitNewDeposit_Handler,
		},
		{
			MethodName: "GetDepositData",
			Handler:    _Fiat_GetDepositData_Handler,
		},
		{
			MethodName: "GetDepositDataByInvoiceNum",
			Handler:    _Fiat_GetDepositDataByInvoiceNum_Handler,
		},
		{
			MethodName: "DepositCallback",
			Handler:    _Fiat_DepositCallback_Handler,
		},
		{
			MethodName: "SubmitNewWithdraw",
			Handler:    _Fiat_SubmitNewWithdraw_Handler,
		},
		{
			MethodName: "GetWithdrawData",
			Handler:    _Fiat_GetWithdrawData_Handler,
		},
		{
			MethodName: "GetWithdrawDataByInvoiceNum",
			Handler:    _Fiat_GetWithdrawDataByInvoiceNum_Handler,
		},
		{
			MethodName: "CancelWithdraw",
			Handler:    _Fiat_CancelWithdraw_Handler,
		},
		{
			MethodName: "WithdrawCallback",
			Handler:    _Fiat_WithdrawCallback_Handler,
		},
		{
			MethodName: "ResendWithdrawToPaymentService",
			Handler:    _Fiat_ResendWithdrawToPaymentService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fiatpb/services.proto",
}
