// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: market/messages.proto

package market

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	commons "rabex/api/pb/commons"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListMarketsRequest_Visibility int32

const (
	ListMarketsRequest_both      ListMarketsRequest_Visibility = 0
	ListMarketsRequest_visible   ListMarketsRequest_Visibility = 1
	ListMarketsRequest_invisible ListMarketsRequest_Visibility = 2
)

// Enum value maps for ListMarketsRequest_Visibility.
var (
	ListMarketsRequest_Visibility_name = map[int32]string{
		0: "both",
		1: "visible",
		2: "invisible",
	}
	ListMarketsRequest_Visibility_value = map[string]int32{
		"both":      0,
		"visible":   1,
		"invisible": 2,
	}
)

func (x ListMarketsRequest_Visibility) Enum() *ListMarketsRequest_Visibility {
	p := new(ListMarketsRequest_Visibility)
	*p = x
	return p
}

func (x ListMarketsRequest_Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListMarketsRequest_Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_market_messages_proto_enumTypes[0].Descriptor()
}

func (ListMarketsRequest_Visibility) Type() protoreflect.EnumType {
	return &file_market_messages_proto_enumTypes[0]
}

func (x ListMarketsRequest_Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListMarketsRequest_Visibility.Descriptor instead.
func (ListMarketsRequest_Visibility) EnumDescriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{2, 0}
}

type GetMarketChartsRequest_Period int32

const (
	GetMarketChartsRequest_Daily   GetMarketChartsRequest_Period = 0
	GetMarketChartsRequest_Weekly  GetMarketChartsRequest_Period = 1
	GetMarketChartsRequest_Monthly GetMarketChartsRequest_Period = 2
	GetMarketChartsRequest_Yearly  GetMarketChartsRequest_Period = 3
)

// Enum value maps for GetMarketChartsRequest_Period.
var (
	GetMarketChartsRequest_Period_name = map[int32]string{
		0: "Daily",
		1: "Weekly",
		2: "Monthly",
		3: "Yearly",
	}
	GetMarketChartsRequest_Period_value = map[string]int32{
		"Daily":   0,
		"Weekly":  1,
		"Monthly": 2,
		"Yearly":  3,
	}
)

func (x GetMarketChartsRequest_Period) Enum() *GetMarketChartsRequest_Period {
	p := new(GetMarketChartsRequest_Period)
	*p = x
	return p
}

func (x GetMarketChartsRequest_Period) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetMarketChartsRequest_Period) Descriptor() protoreflect.EnumDescriptor {
	return file_market_messages_proto_enumTypes[1].Descriptor()
}

func (GetMarketChartsRequest_Period) Type() protoreflect.EnumType {
	return &file_market_messages_proto_enumTypes[1]
}

func (x GetMarketChartsRequest_Period) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetMarketChartsRequest_Period.Descriptor instead.
func (GetMarketChartsRequest_Period) EnumDescriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{35, 0}
}

// updateMarket
//--------------------------------------------------------------------------------
type UpdateMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Price             string      `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	BuyMl             string      `protobuf:"bytes,3,opt,name=buy_ml,json=buyMl,proto3" json:"buy_ml,omitempty"`
	BuyMin            string      `protobuf:"bytes,4,opt,name=buy_min,json=buyMin,proto3" json:"buy_min,omitempty"`
	BuyMax            string      `protobuf:"bytes,5,opt,name=buy_max,json=buyMax,proto3" json:"buy_max,omitempty"`
	SellMl            string      `protobuf:"bytes,6,opt,name=sell_ml,json=sellMl,proto3" json:"sell_ml,omitempty"`
	PriceSource       PriceSource `protobuf:"varint,7,opt,name=price_source,json=priceSource,proto3,enum=rabex.api.market.PriceSource" json:"price_source,omitempty"`
	BuyStatus         bool        `protobuf:"varint,8,opt,name=buy_status,json=buyStatus,proto3" json:"buy_status,omitempty"`
	SellMin           string      `protobuf:"bytes,9,opt,name=sell_min,json=sellMin,proto3" json:"sell_min,omitempty"`
	SellStatus        bool        `protobuf:"varint,10,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`
	SellMax           string      `protobuf:"bytes,11,opt,name=sell_max,json=sellMax,proto3" json:"sell_max,omitempty"`
	Category          MarketType  `protobuf:"varint,12,opt,name=category,proto3,enum=rabex.api.market.MarketType" json:"category,omitempty"` // category
	Tick              string      `protobuf:"bytes,13,opt,name=tick,proto3" json:"tick,omitempty"`
	BuyDesc           string      `protobuf:"bytes,14,opt,name=buy_desc,json=buyDesc,proto3" json:"buy_desc,omitempty"`
	SellDesc          string      `protobuf:"bytes,15,opt,name=sell_desc,json=sellDesc,proto3" json:"sell_desc,omitempty"`
	QuotePrecision    string      `protobuf:"bytes,16,opt,name=quote_precision,json=quotePrecision,proto3" json:"quote_precision,omitempty"`
	BasePrecision     string      `protobuf:"bytes,17,opt,name=base_precision,json=basePrecision,proto3" json:"base_precision,omitempty"`
	SellVisibility    bool        `protobuf:"varint,18,opt,name=sell_visibility,json=sellVisibility,proto3" json:"sell_visibility,omitempty"`
	BuyVisibility     bool        `protobuf:"varint,19,opt,name=buy_visibility,json=buyVisibility,proto3" json:"buy_visibility,omitempty"`
	DefaultQuoteValue string      `protobuf:"bytes,20,opt,name=default_quote_value,json=defaultQuoteValue,proto3" json:"default_quote_value,omitempty"`
	DefaultBaseValue  string      `protobuf:"bytes,21,opt,name=default_base_value,json=defaultBaseValue,proto3" json:"default_base_value,omitempty"`
	RefSymbol         string      `protobuf:"bytes,22,opt,name=ref_symbol,json=refSymbol,proto3" json:"ref_symbol,omitempty"`
}

func (x *UpdateMarketRequest) Reset() {
	*x = UpdateMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketRequest) ProtoMessage() {}

func (x *UpdateMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketRequest.ProtoReflect.Descriptor instead.
func (*UpdateMarketRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateMarketRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateMarketRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *UpdateMarketRequest) GetBuyMl() string {
	if x != nil {
		return x.BuyMl
	}
	return ""
}

func (x *UpdateMarketRequest) GetBuyMin() string {
	if x != nil {
		return x.BuyMin
	}
	return ""
}

func (x *UpdateMarketRequest) GetBuyMax() string {
	if x != nil {
		return x.BuyMax
	}
	return ""
}

func (x *UpdateMarketRequest) GetSellMl() string {
	if x != nil {
		return x.SellMl
	}
	return ""
}

func (x *UpdateMarketRequest) GetPriceSource() PriceSource {
	if x != nil {
		return x.PriceSource
	}
	return PriceSource_UNKNOWN_SOURCE
}

func (x *UpdateMarketRequest) GetBuyStatus() bool {
	if x != nil {
		return x.BuyStatus
	}
	return false
}

func (x *UpdateMarketRequest) GetSellMin() string {
	if x != nil {
		return x.SellMin
	}
	return ""
}

func (x *UpdateMarketRequest) GetSellStatus() bool {
	if x != nil {
		return x.SellStatus
	}
	return false
}

func (x *UpdateMarketRequest) GetSellMax() string {
	if x != nil {
		return x.SellMax
	}
	return ""
}

func (x *UpdateMarketRequest) GetCategory() MarketType {
	if x != nil {
		return x.Category
	}
	return MarketType_UNKNOWN
}

func (x *UpdateMarketRequest) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *UpdateMarketRequest) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *UpdateMarketRequest) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *UpdateMarketRequest) GetQuotePrecision() string {
	if x != nil {
		return x.QuotePrecision
	}
	return ""
}

func (x *UpdateMarketRequest) GetBasePrecision() string {
	if x != nil {
		return x.BasePrecision
	}
	return ""
}

func (x *UpdateMarketRequest) GetSellVisibility() bool {
	if x != nil {
		return x.SellVisibility
	}
	return false
}

func (x *UpdateMarketRequest) GetBuyVisibility() bool {
	if x != nil {
		return x.BuyVisibility
	}
	return false
}

func (x *UpdateMarketRequest) GetDefaultQuoteValue() string {
	if x != nil {
		return x.DefaultQuoteValue
	}
	return ""
}

func (x *UpdateMarketRequest) GetDefaultBaseValue() string {
	if x != nil {
		return x.DefaultBaseValue
	}
	return ""
}

func (x *UpdateMarketRequest) GetRefSymbol() string {
	if x != nil {
		return x.RefSymbol
	}
	return ""
}

type UpdateMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RabexMarket `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateMarketResponse) Reset() {
	*x = UpdateMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarketResponse) ProtoMessage() {}

func (x *UpdateMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarketResponse.ProtoReflect.Descriptor instead.
func (*UpdateMarketResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateMarketResponse) GetData() *RabexMarket {
	if x != nil {
		return x.Data
	}
	return nil
}

// ListMarkets
//--------------------------------------------------------------------------------
type ListMarketsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketName string                        `protobuf:"bytes,1,opt,name=market_name,json=marketName,proto3" json:"market_name,omitempty"`
	Category   MarketType                    `protobuf:"varint,2,opt,name=category,proto3,enum=rabex.api.market.MarketType" json:"category,omitempty"`
	Visibility ListMarketsRequest_Visibility `protobuf:"varint,3,opt,name=visibility,proto3,enum=rabex.api.market.ListMarketsRequest_Visibility" json:"visibility,omitempty"`
	Pagination *Pagination                   `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	WithCsv    bool                          `protobuf:"varint,5,opt,name=with_csv,json=withCsv,proto3" json:"with_csv,omitempty"`
}

func (x *ListMarketsRequest) Reset() {
	*x = ListMarketsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsRequest) ProtoMessage() {}

func (x *ListMarketsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsRequest.ProtoReflect.Descriptor instead.
func (*ListMarketsRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{2}
}

func (x *ListMarketsRequest) GetMarketName() string {
	if x != nil {
		return x.MarketName
	}
	return ""
}

func (x *ListMarketsRequest) GetCategory() MarketType {
	if x != nil {
		return x.Category
	}
	return MarketType_UNKNOWN
}

func (x *ListMarketsRequest) GetVisibility() ListMarketsRequest_Visibility {
	if x != nil {
		return x.Visibility
	}
	return ListMarketsRequest_both
}

func (x *ListMarketsRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListMarketsRequest) GetWithCsv() bool {
	if x != nil {
		return x.WithCsv
	}
	return false
}

type ListMarketsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *ListMarketsResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ListMarketsResponse) Reset() {
	*x = ListMarketsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsResponse) ProtoMessage() {}

func (x *ListMarketsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsResponse.ProtoReflect.Descriptor instead.
func (*ListMarketsResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{3}
}

func (x *ListMarketsResponse) GetData() *ListMarketsResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetMarket
//--------------------------------------------------------------------------------
type GetMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMarketRequest) Reset() {
	*x = GetMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketRequest) ProtoMessage() {}

func (x *GetMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketRequest.ProtoReflect.Descriptor instead.
func (*GetMarketRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{4}
}

func (x *GetMarketRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RabexMarket `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMarketResponse) Reset() {
	*x = GetMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketResponse) ProtoMessage() {}

func (x *GetMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketResponse.ProtoReflect.Descriptor instead.
func (*GetMarketResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{5}
}

func (x *GetMarketResponse) GetData() *RabexMarket {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetOtcMarketStatus
//--------------------------------------------------------------------------------
type GetOtcMarketStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetOtcMarketStatusResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetOtcMarketStatusResponse) Reset() {
	*x = GetOtcMarketStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtcMarketStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtcMarketStatusResponse) ProtoMessage() {}

func (x *GetOtcMarketStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtcMarketStatusResponse.ProtoReflect.Descriptor instead.
func (*GetOtcMarketStatusResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{6}
}

func (x *GetOtcMarketStatusResponse) GetData() *GetOtcMarketStatusResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// UpdateOtcMarketStatus
//--------------------------------------------------------------------------------
type UpdateOtcMarketStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtcSellDesc   string  `protobuf:"bytes,1,opt,name=otc_sell_desc,json=otcSellDesc,proto3" json:"otc_sell_desc,omitempty"`
	OtcBuyStatus  bool    `protobuf:"varint,2,opt,name=otc_buy_status,json=otcBuyStatus,proto3" json:"otc_buy_status,omitempty"`
	OtcBuyDesc    string  `protobuf:"bytes,3,opt,name=otc_buy_desc,json=otcBuyDesc,proto3" json:"otc_buy_desc,omitempty"`
	OtcSellStatus bool    `protobuf:"varint,4,opt,name=otc_sell_status,json=otcSellStatus,proto3" json:"otc_sell_status,omitempty"`
	UsdtBuyPrice  float32 `protobuf:"fixed32,5,opt,name=usdt_buy_price,json=usdtBuyPrice,proto3" json:"usdt_buy_price,omitempty"`
	UsdtSellPrice float32 `protobuf:"fixed32,6,opt,name=usdt_sell_price,json=usdtSellPrice,proto3" json:"usdt_sell_price,omitempty"`
}

func (x *UpdateOtcMarketStatusRequest) Reset() {
	*x = UpdateOtcMarketStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOtcMarketStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOtcMarketStatusRequest) ProtoMessage() {}

func (x *UpdateOtcMarketStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOtcMarketStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateOtcMarketStatusRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateOtcMarketStatusRequest) GetOtcSellDesc() string {
	if x != nil {
		return x.OtcSellDesc
	}
	return ""
}

func (x *UpdateOtcMarketStatusRequest) GetOtcBuyStatus() bool {
	if x != nil {
		return x.OtcBuyStatus
	}
	return false
}

func (x *UpdateOtcMarketStatusRequest) GetOtcBuyDesc() string {
	if x != nil {
		return x.OtcBuyDesc
	}
	return ""
}

func (x *UpdateOtcMarketStatusRequest) GetOtcSellStatus() bool {
	if x != nil {
		return x.OtcSellStatus
	}
	return false
}

func (x *UpdateOtcMarketStatusRequest) GetUsdtBuyPrice() float32 {
	if x != nil {
		return x.UsdtBuyPrice
	}
	return 0
}

func (x *UpdateOtcMarketStatusRequest) GetUsdtSellPrice() float32 {
	if x != nil {
		return x.UsdtSellPrice
	}
	return 0
}

type UpdateOtcMarketStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *UpdateOtcMarketStatusResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateOtcMarketStatusResponse) Reset() {
	*x = UpdateOtcMarketStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOtcMarketStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOtcMarketStatusResponse) ProtoMessage() {}

func (x *UpdateOtcMarketStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOtcMarketStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateOtcMarketStatusResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOtcMarketStatusResponse) GetData() *UpdateOtcMarketStatusResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

// AddMarketRequest
//--------------------------------------------------------------------------------
type AddMarketRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market *AddMarket `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
}

func (x *AddMarketRequest) Reset() {
	*x = AddMarketRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMarketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMarketRequest) ProtoMessage() {}

func (x *AddMarketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMarketRequest.ProtoReflect.Descriptor instead.
func (*AddMarketRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{9}
}

func (x *AddMarketRequest) GetMarket() *AddMarket {
	if x != nil {
		return x.Market
	}
	return nil
}

type AddMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RefSymbol         string      `protobuf:"bytes,3,opt,name=ref_symbol,json=refSymbol,proto3" json:"ref_symbol,omitempty"`
	BuyPrice          string      `protobuf:"bytes,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SellPrice         string      `protobuf:"bytes,5,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	BuyMl             string      `protobuf:"bytes,6,opt,name=buy_ml,json=buyMl,proto3" json:"buy_ml,omitempty"`
	BuyMin            string      `protobuf:"bytes,7,opt,name=buy_min,json=buyMin,proto3" json:"buy_min,omitempty"`
	BuyMax            string      `protobuf:"bytes,8,opt,name=buy_max,json=buyMax,proto3" json:"buy_max,omitempty"`
	SellMl            string      `protobuf:"bytes,9,opt,name=sell_ml,json=sellMl,proto3" json:"sell_ml,omitempty"`
	BuyStatus         bool        `protobuf:"varint,10,opt,name=buy_status,json=buyStatus,proto3" json:"buy_status,omitempty"`
	SellMin           string      `protobuf:"bytes,11,opt,name=sell_min,json=sellMin,proto3" json:"sell_min,omitempty"`
	SellStatus        bool        `protobuf:"varint,12,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`
	SellMax           string      `protobuf:"bytes,13,opt,name=sell_max,json=sellMax,proto3" json:"sell_max,omitempty"`
	Category          MarketType  `protobuf:"varint,14,opt,name=category,proto3,enum=rabex.api.market.MarketType" json:"category,omitempty"` // category
	Tick              string      `protobuf:"bytes,15,opt,name=tick,proto3" json:"tick,omitempty"`
	PriceSource       PriceSource `protobuf:"varint,16,opt,name=price_source,json=priceSource,proto3,enum=rabex.api.market.PriceSource" json:"price_source,omitempty"`
	Base              string      `protobuf:"bytes,17,opt,name=base,proto3" json:"base,omitempty"`
	Quote             string      `protobuf:"bytes,18,opt,name=quote,proto3" json:"quote,omitempty"`
	BuyDesc           string      `protobuf:"bytes,19,opt,name=buy_desc,json=buyDesc,proto3" json:"buy_desc,omitempty"`
	SellDesc          string      `protobuf:"bytes,20,opt,name=sell_desc,json=sellDesc,proto3" json:"sell_desc,omitempty"`
	RefPrice          string      `protobuf:"bytes,21,opt,name=ref_price,json=refPrice,proto3" json:"ref_price,omitempty"`
	LastUpdate        string      `protobuf:"bytes,22,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	QuotePrecision    string      `protobuf:"bytes,23,opt,name=quote_precision,json=quotePrecision,proto3" json:"quote_precision,omitempty"`
	BasePrecision     string      `protobuf:"bytes,24,opt,name=base_precision,json=basePrecision,proto3" json:"base_precision,omitempty"`
	SellVisibility    bool        `protobuf:"varint,25,opt,name=sell_visibility,json=sellVisibility,proto3" json:"sell_visibility,omitempty"`
	BuyVisibility     bool        `protobuf:"varint,26,opt,name=buy_visibility,json=buyVisibility,proto3" json:"buy_visibility,omitempty"`
	DefaultQuoteValue string      `protobuf:"bytes,27,opt,name=default_quote_value,json=defaultQuoteValue,proto3" json:"default_quote_value,omitempty"`
	DefaultBaseValue  string      `protobuf:"bytes,28,opt,name=default_base_value,json=defaultBaseValue,proto3" json:"default_base_value,omitempty"`
}

func (x *AddMarket) Reset() {
	*x = AddMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMarket) ProtoMessage() {}

func (x *AddMarket) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMarket.ProtoReflect.Descriptor instead.
func (*AddMarket) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{10}
}

func (x *AddMarket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddMarket) GetRefSymbol() string {
	if x != nil {
		return x.RefSymbol
	}
	return ""
}

func (x *AddMarket) GetBuyPrice() string {
	if x != nil {
		return x.BuyPrice
	}
	return ""
}

func (x *AddMarket) GetSellPrice() string {
	if x != nil {
		return x.SellPrice
	}
	return ""
}

func (x *AddMarket) GetBuyMl() string {
	if x != nil {
		return x.BuyMl
	}
	return ""
}

func (x *AddMarket) GetBuyMin() string {
	if x != nil {
		return x.BuyMin
	}
	return ""
}

func (x *AddMarket) GetBuyMax() string {
	if x != nil {
		return x.BuyMax
	}
	return ""
}

func (x *AddMarket) GetSellMl() string {
	if x != nil {
		return x.SellMl
	}
	return ""
}

func (x *AddMarket) GetBuyStatus() bool {
	if x != nil {
		return x.BuyStatus
	}
	return false
}

func (x *AddMarket) GetSellMin() string {
	if x != nil {
		return x.SellMin
	}
	return ""
}

func (x *AddMarket) GetSellStatus() bool {
	if x != nil {
		return x.SellStatus
	}
	return false
}

func (x *AddMarket) GetSellMax() string {
	if x != nil {
		return x.SellMax
	}
	return ""
}

func (x *AddMarket) GetCategory() MarketType {
	if x != nil {
		return x.Category
	}
	return MarketType_UNKNOWN
}

func (x *AddMarket) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *AddMarket) GetPriceSource() PriceSource {
	if x != nil {
		return x.PriceSource
	}
	return PriceSource_UNKNOWN_SOURCE
}

func (x *AddMarket) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *AddMarket) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *AddMarket) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *AddMarket) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *AddMarket) GetRefPrice() string {
	if x != nil {
		return x.RefPrice
	}
	return ""
}

func (x *AddMarket) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *AddMarket) GetQuotePrecision() string {
	if x != nil {
		return x.QuotePrecision
	}
	return ""
}

func (x *AddMarket) GetBasePrecision() string {
	if x != nil {
		return x.BasePrecision
	}
	return ""
}

func (x *AddMarket) GetSellVisibility() bool {
	if x != nil {
		return x.SellVisibility
	}
	return false
}

func (x *AddMarket) GetBuyVisibility() bool {
	if x != nil {
		return x.BuyVisibility
	}
	return false
}

func (x *AddMarket) GetDefaultQuoteValue() string {
	if x != nil {
		return x.DefaultQuoteValue
	}
	return ""
}

func (x *AddMarket) GetDefaultBaseValue() string {
	if x != nil {
		return x.DefaultBaseValue
	}
	return ""
}

type AddMarketResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *RabexMarket `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddMarketResponse) Reset() {
	*x = AddMarketResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMarketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMarketResponse) ProtoMessage() {}

func (x *AddMarketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMarketResponse.ProtoReflect.Descriptor instead.
func (*AddMarketResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{11}
}

func (x *AddMarketResponse) GetData() *RabexMarket {
	if x != nil {
		return x.Data
	}
	return nil
}

//--------------------------------------------------------------------------------
// GetSelectorRequest
type GetSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketType MarketType `protobuf:"varint,1,opt,name=market_type,json=marketType,proto3,enum=rabex.api.market.MarketType" json:"market_type,omitempty"`
}

func (x *GetSelectorRequest) Reset() {
	*x = GetSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelectorRequest) ProtoMessage() {}

func (x *GetSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelectorRequest.ProtoReflect.Descriptor instead.
func (*GetSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{12}
}

func (x *GetSelectorRequest) GetMarketType() MarketType {
	if x != nil {
		return x.MarketType
	}
	return MarketType_UNKNOWN
}

type GetSelectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector []*Selector `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *GetSelectorResponse) Reset() {
	*x = GetSelectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelectorResponse) ProtoMessage() {}

func (x *GetSelectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelectorResponse.ProtoReflect.Descriptor instead.
func (*GetSelectorResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{13}
}

func (x *GetSelectorResponse) GetSelector() []*Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

// GetSimpleResponse
//--------------------------------------------------------------------------------
type GetSimpleSelectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimpleSelector []*SimpleSelector `protobuf:"bytes,1,rep,name=simple_selector,json=simpleSelector,proto3" json:"simple_selector,omitempty"`
}

func (x *GetSimpleSelectorResponse) Reset() {
	*x = GetSimpleSelectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSimpleSelectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSimpleSelectorResponse) ProtoMessage() {}

func (x *GetSimpleSelectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSimpleSelectorResponse.ProtoReflect.Descriptor instead.
func (*GetSimpleSelectorResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{14}
}

func (x *GetSimpleSelectorResponse) GetSimpleSelector() []*SimpleSelector {
	if x != nil {
		return x.SimpleSelector
	}
	return nil
}

// GetMarketsPrice
//--------------------------------------------------------------------------------
type GetMarketsPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market []string `protobuf:"bytes,1,rep,name=market,proto3" json:"market,omitempty"`
}

func (x *GetMarketsPriceRequest) Reset() {
	*x = GetMarketsPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketsPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketsPriceRequest) ProtoMessage() {}

func (x *GetMarketsPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketsPriceRequest.ProtoReflect.Descriptor instead.
func (*GetMarketsPriceRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{15}
}

func (x *GetMarketsPriceRequest) GetMarket() []string {
	if x != nil {
		return x.Market
	}
	return nil
}

type GetMarketsPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetMarketsPriceResponse_Price `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMarketsPriceResponse) Reset() {
	*x = GetMarketsPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketsPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketsPriceResponse) ProtoMessage() {}

func (x *GetMarketsPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketsPriceResponse.ProtoReflect.Descriptor instead.
func (*GetMarketsPriceResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{16}
}

func (x *GetMarketsPriceResponse) GetData() []*GetMarketsPriceResponse_Price {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddBaseSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AddBaseSelectorRequest) Reset() {
	*x = AddBaseSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBaseSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBaseSelectorRequest) ProtoMessage() {}

func (x *AddBaseSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBaseSelectorRequest.ProtoReflect.Descriptor instead.
func (*AddBaseSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{17}
}

func (x *AddBaseSelectorRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBaseSelectorRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AddBaseSelectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AddBaseSelectorResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddBaseSelectorResponse) Reset() {
	*x = AddBaseSelectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBaseSelectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBaseSelectorResponse) ProtoMessage() {}

func (x *AddBaseSelectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBaseSelectorResponse.ProtoReflect.Descriptor instead.
func (*AddBaseSelectorResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{18}
}

func (x *AddBaseSelectorResponse) GetData() *AddBaseSelectorResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddQuoteSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuoteName string `protobuf:"bytes,1,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	BaseId    uint64 `protobuf:"varint,2,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Order     int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AddQuoteSelectorRequest) Reset() {
	*x = AddQuoteSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuoteSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuoteSelectorRequest) ProtoMessage() {}

func (x *AddQuoteSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuoteSelectorRequest.ProtoReflect.Descriptor instead.
func (*AddQuoteSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{19}
}

func (x *AddQuoteSelectorRequest) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *AddQuoteSelectorRequest) GetBaseId() uint64 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *AddQuoteSelectorRequest) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AddQuoteSelectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *AddQuoteSelectorResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *AddQuoteSelectorResponse) Reset() {
	*x = AddQuoteSelectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuoteSelectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuoteSelectorResponse) ProtoMessage() {}

func (x *AddQuoteSelectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuoteSelectorResponse.ProtoReflect.Descriptor instead.
func (*AddQuoteSelectorResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{20}
}

func (x *AddQuoteSelectorResponse) GetData() *AddQuoteSelectorResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketSelectors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketSelectors_Base `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketSelectors) Reset() {
	*x = MarketSelectors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectors) ProtoMessage() {}

func (x *MarketSelectors) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectors.ProtoReflect.Descriptor instead.
func (*MarketSelectors) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{21}
}

func (x *MarketSelectors) GetData() []*MarketSelectors_Base {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketSelectorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketSelectorsResponse_Selector `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketSelectorsResponse) Reset() {
	*x = MarketSelectorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorsResponse) ProtoMessage() {}

func (x *MarketSelectorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorsResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorsResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{22}
}

func (x *MarketSelectorsResponse) GetData() []*MarketSelectorsResponse_Selector {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketSelectorGetResponseBaseGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *MarketSelectorGetResponseBaseGetResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketSelectorGetResponseBaseGetResponse) Reset() {
	*x = MarketSelectorGetResponseBaseGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorGetResponseBaseGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorGetResponseBaseGetResponse) ProtoMessage() {}

func (x *MarketSelectorGetResponseBaseGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorGetResponseBaseGetResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorGetResponseBaseGetResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{23}
}

func (x *MarketSelectorGetResponseBaseGetResponse) GetData() *MarketSelectorGetResponseBaseGetResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketSelectorGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketSelectorGetResponse_BaseGetResponse `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketSelectorGetResponse) Reset() {
	*x = MarketSelectorGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorGetResponse) ProtoMessage() {}

func (x *MarketSelectorGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorGetResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorGetResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{24}
}

func (x *MarketSelectorGetResponse) GetData() []*MarketSelectorGetResponse_BaseGetResponse {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateBaseSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bases []*UpdateBaseSelectorRequest_Base `protobuf:"bytes,1,rep,name=bases,proto3" json:"bases,omitempty"`
}

func (x *UpdateBaseSelectorRequest) Reset() {
	*x = UpdateBaseSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBaseSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBaseSelectorRequest) ProtoMessage() {}

func (x *UpdateBaseSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBaseSelectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateBaseSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{25}
}

func (x *UpdateBaseSelectorRequest) GetBases() []*UpdateBaseSelectorRequest_Base {
	if x != nil {
		return x.Bases
	}
	return nil
}

type UpdateQuoteSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quotes []*UpdateQuoteSelectorRequest_Quote `protobuf:"bytes,1,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *UpdateQuoteSelectorRequest) Reset() {
	*x = UpdateQuoteSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuoteSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuoteSelectorRequest) ProtoMessage() {}

func (x *UpdateQuoteSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuoteSelectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateQuoteSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateQuoteSelectorRequest) GetQuotes() []*UpdateQuoteSelectorRequest_Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type SimpleSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol  string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"` // BTCUSDT
	Base    string `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Quote   string `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	LogoUrl string `protobuf:"bytes,4,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
}

func (x *SimpleSelector) Reset() {
	*x = SimpleSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleSelector) ProtoMessage() {}

func (x *SimpleSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleSelector.ProtoReflect.Descriptor instead.
func (*SimpleSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{27}
}

func (x *SimpleSelector) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SimpleSelector) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *SimpleSelector) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *SimpleSelector) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

type FiatSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`     // Bitcoin
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"` // BTC
}

func (x *FiatSelector) Reset() {
	*x = FiatSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatSelector) ProtoMessage() {}

func (x *FiatSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatSelector.ProtoReflect.Descriptor instead.
func (*FiatSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{28}
}

func (x *FiatSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FiatSelector) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                               // Bitcoin
	FromSymbol  string         `protobuf:"bytes,2,opt,name=from_symbol,json=fromSymbol,proto3" json:"from_symbol,omitempty"` // BTC
	LogoUrl     string         `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	SubSelector []*SubSelector `protobuf:"bytes,4,rep,name=sub_selector,json=subSelector,proto3" json:"sub_selector,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{29}
}

func (x *Selector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Selector) GetFromSymbol() string {
	if x != nil {
		return x.FromSymbol
	}
	return ""
}

func (x *Selector) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Selector) GetSubSelector() []*SubSelector {
	if x != nil {
		return x.SubSelector
	}
	return nil
}

type SubSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                         // Bitcoin
	ToSymbol string `protobuf:"bytes,2,opt,name=to_symbol,json=toSymbol,proto3" json:"to_symbol,omitempty"` // BTC
	LogoUrl  string `protobuf:"bytes,3,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url,omitempty"`
	BuyDesc  string `protobuf:"bytes,7,opt,name=buy_desc,json=buyDesc,proto3" json:"buy_desc,omitempty"`
	SellDesc string `protobuf:"bytes,8,opt,name=sell_desc,json=sellDesc,proto3" json:"sell_desc,omitempty"`
	MinSell  string `protobuf:"bytes,9,opt,name=min_sell,json=minSell,proto3" json:"min_sell,omitempty"`
	MaxSell  string `protobuf:"bytes,10,opt,name=max_sell,json=maxSell,proto3" json:"max_sell,omitempty"`
	MinBuy   string `protobuf:"bytes,11,opt,name=min_buy,json=minBuy,proto3" json:"min_buy,omitempty"`
	MaxBuy   string `protobuf:"bytes,12,opt,name=max_buy,json=maxBuy,proto3" json:"max_buy,omitempty"`
}

func (x *SubSelector) Reset() {
	*x = SubSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubSelector) ProtoMessage() {}

func (x *SubSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubSelector.ProtoReflect.Descriptor instead.
func (*SubSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{30}
}

func (x *SubSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubSelector) GetToSymbol() string {
	if x != nil {
		return x.ToSymbol
	}
	return ""
}

func (x *SubSelector) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *SubSelector) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *SubSelector) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *SubSelector) GetMinSell() string {
	if x != nil {
		return x.MinSell
	}
	return ""
}

func (x *SubSelector) GetMaxSell() string {
	if x != nil {
		return x.MaxSell
	}
	return ""
}

func (x *SubSelector) GetMinBuy() string {
	if x != nil {
		return x.MinBuy
	}
	return ""
}

func (x *SubSelector) GetMaxBuy() string {
	if x != nil {
		return x.MaxBuy
	}
	return ""
}

type GetMiniListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiniPairList []*MiniMarketList `protobuf:"bytes,1,rep,name=mini_pair_list,json=miniPairList,proto3" json:"mini_pair_list,omitempty"`
}

func (x *GetMiniListResponse) Reset() {
	*x = GetMiniListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiniListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiniListResponse) ProtoMessage() {}

func (x *GetMiniListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiniListResponse.ProtoReflect.Descriptor instead.
func (*GetMiniListResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{31}
}

func (x *GetMiniListResponse) GetMiniPairList() []*MiniMarketList {
	if x != nil {
		return x.MiniPairList
	}
	return nil
}

type MiniMarketList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pair       string `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair,omitempty"`
	Base       string `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
	Quote      string `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`
	Exchange   bool   `protobuf:"varint,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
	SellStatus bool   `protobuf:"varint,5,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`
	BuyStatus  bool   `protobuf:"varint,6,opt,name=buy_status,json=buyStatus,proto3" json:"buy_status,omitempty"`
	BuyDesc    string `protobuf:"bytes,7,opt,name=buy_desc,json=buyDesc,proto3" json:"buy_desc,omitempty"`
	SellDesc   string `protobuf:"bytes,8,opt,name=sell_desc,json=sellDesc,proto3" json:"sell_desc,omitempty"`
	MinSell    string `protobuf:"bytes,9,opt,name=min_sell,json=minSell,proto3" json:"min_sell,omitempty"`
	MaxSell    string `protobuf:"bytes,10,opt,name=max_sell,json=maxSell,proto3" json:"max_sell,omitempty"`
	MinBuy     string `protobuf:"bytes,11,opt,name=min_buy,json=minBuy,proto3" json:"min_buy,omitempty"`
	MaxBuy     string `protobuf:"bytes,12,opt,name=max_buy,json=maxBuy,proto3" json:"max_buy,omitempty"`
}

func (x *MiniMarketList) Reset() {
	*x = MiniMarketList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiniMarketList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiniMarketList) ProtoMessage() {}

func (x *MiniMarketList) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiniMarketList.ProtoReflect.Descriptor instead.
func (*MiniMarketList) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{32}
}

func (x *MiniMarketList) GetPair() string {
	if x != nil {
		return x.Pair
	}
	return ""
}

func (x *MiniMarketList) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *MiniMarketList) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *MiniMarketList) GetExchange() bool {
	if x != nil {
		return x.Exchange
	}
	return false
}

func (x *MiniMarketList) GetSellStatus() bool {
	if x != nil {
		return x.SellStatus
	}
	return false
}

func (x *MiniMarketList) GetBuyStatus() bool {
	if x != nil {
		return x.BuyStatus
	}
	return false
}

func (x *MiniMarketList) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *MiniMarketList) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *MiniMarketList) GetMinSell() string {
	if x != nil {
		return x.MinSell
	}
	return ""
}

func (x *MiniMarketList) GetMaxSell() string {
	if x != nil {
		return x.MaxSell
	}
	return ""
}

func (x *MiniMarketList) GetMinBuy() string {
	if x != nil {
		return x.MinBuy
	}
	return ""
}

func (x *MiniMarketList) GetMaxBuy() string {
	if x != nil {
		return x.MaxBuy
	}
	return ""
}

type RabexMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Symbol            string      `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	RefSymbol         string      `protobuf:"bytes,3,opt,name=ref_symbol,json=refSymbol,proto3" json:"ref_symbol,omitempty"`
	BuyPrice          string      `protobuf:"bytes,4,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	SellPrice         string      `protobuf:"bytes,5,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	BuyMl             string      `protobuf:"bytes,6,opt,name=buy_ml,json=buyMl,proto3" json:"buy_ml,omitempty"`
	BuyMin            string      `protobuf:"bytes,7,opt,name=buy_min,json=buyMin,proto3" json:"buy_min,omitempty"`
	BuyMax            string      `protobuf:"bytes,8,opt,name=buy_max,json=buyMax,proto3" json:"buy_max,omitempty"`
	SellMl            string      `protobuf:"bytes,9,opt,name=sell_ml,json=sellMl,proto3" json:"sell_ml,omitempty"`
	BuyStatus         bool        `protobuf:"varint,10,opt,name=buy_status,json=buyStatus,proto3" json:"buy_status,omitempty"`
	SellMin           string      `protobuf:"bytes,11,opt,name=sell_min,json=sellMin,proto3" json:"sell_min,omitempty"`
	SellStatus        bool        `protobuf:"varint,12,opt,name=sell_status,json=sellStatus,proto3" json:"sell_status,omitempty"`
	SellMax           string      `protobuf:"bytes,13,opt,name=sell_max,json=sellMax,proto3" json:"sell_max,omitempty"`
	Category          MarketType  `protobuf:"varint,14,opt,name=category,proto3,enum=rabex.api.market.MarketType" json:"category,omitempty"` // category
	Tick              string      `protobuf:"bytes,15,opt,name=tick,proto3" json:"tick,omitempty"`
	PriceSource       PriceSource `protobuf:"varint,16,opt,name=price_source,json=priceSource,proto3,enum=rabex.api.market.PriceSource" json:"price_source,omitempty"`
	Base              string      `protobuf:"bytes,17,opt,name=base,proto3" json:"base,omitempty"`
	Quote             string      `protobuf:"bytes,18,opt,name=quote,proto3" json:"quote,omitempty"`
	BuyDesc           string      `protobuf:"bytes,19,opt,name=buy_desc,json=buyDesc,proto3" json:"buy_desc,omitempty"`
	SellDesc          string      `protobuf:"bytes,20,opt,name=sell_desc,json=sellDesc,proto3" json:"sell_desc,omitempty"`
	RefPrice          string      `protobuf:"bytes,21,opt,name=ref_price,json=refPrice,proto3" json:"ref_price,omitempty"`
	LastUpdate        string      `protobuf:"bytes,22,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	QuotePrecision    string      `protobuf:"bytes,23,opt,name=quote_precision,json=quotePrecision,proto3" json:"quote_precision,omitempty"`
	BasePrecision     string      `protobuf:"bytes,24,opt,name=base_precision,json=basePrecision,proto3" json:"base_precision,omitempty"`
	SellVisibility    bool        `protobuf:"varint,25,opt,name=sell_visibility,json=sellVisibility,proto3" json:"sell_visibility,omitempty"`
	BuyVisibility     bool        `protobuf:"varint,26,opt,name=buy_visibility,json=buyVisibility,proto3" json:"buy_visibility,omitempty"`
	DefaultQuoteValue string      `protobuf:"bytes,27,opt,name=default_quote_value,json=defaultQuoteValue,proto3" json:"default_quote_value,omitempty"`
	DefaultBaseValue  string      `protobuf:"bytes,28,opt,name=default_base_value,json=defaultBaseValue,proto3" json:"default_base_value,omitempty"`
}

func (x *RabexMarket) Reset() {
	*x = RabexMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexMarket) ProtoMessage() {}

func (x *RabexMarket) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexMarket.ProtoReflect.Descriptor instead.
func (*RabexMarket) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{33}
}

func (x *RabexMarket) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RabexMarket) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *RabexMarket) GetRefSymbol() string {
	if x != nil {
		return x.RefSymbol
	}
	return ""
}

func (x *RabexMarket) GetBuyPrice() string {
	if x != nil {
		return x.BuyPrice
	}
	return ""
}

func (x *RabexMarket) GetSellPrice() string {
	if x != nil {
		return x.SellPrice
	}
	return ""
}

func (x *RabexMarket) GetBuyMl() string {
	if x != nil {
		return x.BuyMl
	}
	return ""
}

func (x *RabexMarket) GetBuyMin() string {
	if x != nil {
		return x.BuyMin
	}
	return ""
}

func (x *RabexMarket) GetBuyMax() string {
	if x != nil {
		return x.BuyMax
	}
	return ""
}

func (x *RabexMarket) GetSellMl() string {
	if x != nil {
		return x.SellMl
	}
	return ""
}

func (x *RabexMarket) GetBuyStatus() bool {
	if x != nil {
		return x.BuyStatus
	}
	return false
}

func (x *RabexMarket) GetSellMin() string {
	if x != nil {
		return x.SellMin
	}
	return ""
}

func (x *RabexMarket) GetSellStatus() bool {
	if x != nil {
		return x.SellStatus
	}
	return false
}

func (x *RabexMarket) GetSellMax() string {
	if x != nil {
		return x.SellMax
	}
	return ""
}

func (x *RabexMarket) GetCategory() MarketType {
	if x != nil {
		return x.Category
	}
	return MarketType_UNKNOWN
}

func (x *RabexMarket) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *RabexMarket) GetPriceSource() PriceSource {
	if x != nil {
		return x.PriceSource
	}
	return PriceSource_UNKNOWN_SOURCE
}

func (x *RabexMarket) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *RabexMarket) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *RabexMarket) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *RabexMarket) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *RabexMarket) GetRefPrice() string {
	if x != nil {
		return x.RefPrice
	}
	return ""
}

func (x *RabexMarket) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *RabexMarket) GetQuotePrecision() string {
	if x != nil {
		return x.QuotePrecision
	}
	return ""
}

func (x *RabexMarket) GetBasePrecision() string {
	if x != nil {
		return x.BasePrecision
	}
	return ""
}

func (x *RabexMarket) GetSellVisibility() bool {
	if x != nil {
		return x.SellVisibility
	}
	return false
}

func (x *RabexMarket) GetBuyVisibility() bool {
	if x != nil {
		return x.BuyVisibility
	}
	return false
}

func (x *RabexMarket) GetDefaultQuoteValue() string {
	if x != nil {
		return x.DefaultQuoteValue
	}
	return ""
}

func (x *RabexMarket) GetDefaultBaseValue() string {
	if x != nil {
		return x.DefaultBaseValue
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Desc   bool  `protobuf:"varint,3,opt,name=desc,proto3" json:"desc,omitempty"` // descending
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{34}
}

func (x *Pagination) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Pagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *Pagination) GetDesc() bool {
	if x != nil {
		return x.Desc
	}
	return false
}

// GetMarketsCharts
//--------------------------------------------------------------------------------
type GetMarketChartsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefSymbol string                        `protobuf:"bytes,1,opt,name=ref_symbol,json=refSymbol,proto3" json:"ref_symbol,omitempty"`
	Period    GetMarketChartsRequest_Period `protobuf:"varint,2,opt,name=period,proto3,enum=rabex.api.market.GetMarketChartsRequest_Period" json:"period,omitempty"`
}

func (x *GetMarketChartsRequest) Reset() {
	*x = GetMarketChartsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketChartsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketChartsRequest) ProtoMessage() {}

func (x *GetMarketChartsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketChartsRequest.ProtoReflect.Descriptor instead.
func (*GetMarketChartsRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{35}
}

func (x *GetMarketChartsRequest) GetRefSymbol() string {
	if x != nil {
		return x.RefSymbol
	}
	return ""
}

func (x *GetMarketChartsRequest) GetPeriod() GetMarketChartsRequest_Period {
	if x != nil {
		return x.Period
	}
	return GetMarketChartsRequest_Daily
}

type GetMarketChartsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *GetMarketChartsResponse_Data `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *GetMarketChartsResponse) Reset() {
	*x = GetMarketChartsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketChartsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketChartsResponse) ProtoMessage() {}

func (x *GetMarketChartsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketChartsResponse.ProtoReflect.Descriptor instead.
func (*GetMarketChartsResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{36}
}

func (x *GetMarketChartsResponse) GetData() *GetMarketChartsResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type UpdateSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Selector []*UpdateSelectorRequest_Selector `protobuf:"bytes,1,rep,name=selector,proto3" json:"selector,omitempty"`
}

func (x *UpdateSelectorRequest) Reset() {
	*x = UpdateSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelectorRequest) ProtoMessage() {}

func (x *UpdateSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateSelectorRequest) GetSelector() []*UpdateSelectorRequest_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

type UpdateSelectorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateSelectorResponse) Reset() {
	*x = UpdateSelectorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSelectorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelectorResponse) ProtoMessage() {}

func (x *UpdateSelectorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelectorResponse.ProtoReflect.Descriptor instead.
func (*UpdateSelectorResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{38}
}

type UpdateSubSelectorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubSelector []*UpdateSubSelectorRequest_SubSelector `protobuf:"bytes,1,rep,name=sub_selector,json=subSelector,proto3" json:"sub_selector,omitempty"`
}

func (x *UpdateSubSelectorRequest) Reset() {
	*x = UpdateSubSelectorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubSelectorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubSelectorRequest) ProtoMessage() {}

func (x *UpdateSubSelectorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubSelectorRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubSelectorRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{39}
}

func (x *UpdateSubSelectorRequest) GetSubSelector() []*UpdateSubSelectorRequest_SubSelector {
	if x != nil {
		return x.SubSelector
	}
	return nil
}

type MarketSelectorsGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*GetSelector `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketSelectorsGetResponse) Reset() {
	*x = MarketSelectorsGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorsGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorsGetResponse) ProtoMessage() {}

func (x *MarketSelectorsGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorsGetResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorsGetResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{40}
}

func (x *MarketSelectorsGetResponse) GetData() []*GetSelector {
	if x != nil {
		return x.Data
	}
	return nil
}

type GetSubSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn     string     `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa     string     `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol     string     `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo       string     `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	SelectorId uint64     `protobuf:"varint,6,opt,name=selector_id,json=selectorId,proto3" json:"selector_id,omitempty"`
	Order      int32      `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
	Market     string     `protobuf:"bytes,8,opt,name=Market,proto3" json:"Market,omitempty"`
	MarketInfo *GetMarket `protobuf:"bytes,9,opt,name=MarketInfo,proto3" json:"MarketInfo,omitempty"`
}

func (x *GetSubSelector) Reset() {
	*x = GetSubSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubSelector) ProtoMessage() {}

func (x *GetSubSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubSelector.ProtoReflect.Descriptor instead.
func (*GetSubSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{41}
}

func (x *GetSubSelector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSubSelector) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *GetSubSelector) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *GetSubSelector) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetSubSelector) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *GetSubSelector) GetSelectorId() uint64 {
	if x != nil {
		return x.SelectorId
	}
	return 0
}

func (x *GetSubSelector) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *GetSubSelector) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *GetSubSelector) GetMarketInfo() *GetMarket {
	if x != nil {
		return x.MarketInfo
	}
	return nil
}

type GetSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn      string            `protobuf:"bytes,2,opt,name=NameEn,proto3" json:"NameEn,omitempty"`
	NameFa      string            `protobuf:"bytes,3,opt,name=NameFa,proto3" json:"NameFa,omitempty"`
	Symbol      string            `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo        string            `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Order       int32             `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	SubSelector []*GetSubSelector `protobuf:"bytes,7,rep,name=SubSelector,proto3" json:"SubSelector,omitempty"`
}

func (x *GetSelector) Reset() {
	*x = GetSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSelector) ProtoMessage() {}

func (x *GetSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSelector.ProtoReflect.Descriptor instead.
func (*GetSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{42}
}

func (x *GetSelector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetSelector) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *GetSelector) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *GetSelector) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetSelector) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *GetSelector) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *GetSelector) GetSubSelector() []*GetSubSelector {
	if x != nil {
		return x.SubSelector
	}
	return nil
}

type GetMarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BuyStatus         bool   `protobuf:"varint,1,opt,name=BuyStatus,proto3" json:"BuyStatus,omitempty"`
	SellStatus        bool   `protobuf:"varint,2,opt,name=SellStatus,proto3" json:"SellStatus,omitempty"`
	Quote             string `protobuf:"bytes,3,opt,name=Quote,proto3" json:"Quote,omitempty"`
	Base              string `protobuf:"bytes,4,opt,name=Base,proto3" json:"Base,omitempty"`
	BuyDesc           string `protobuf:"bytes,5,opt,name=BuyDesc,proto3" json:"BuyDesc,omitempty"`
	SellDesc          string `protobuf:"bytes,6,opt,name=SellDesc,proto3" json:"SellDesc,omitempty"`
	MinSell           string `protobuf:"bytes,7,opt,name=MinSell,proto3" json:"MinSell,omitempty"`
	MaxSell           string `protobuf:"bytes,8,opt,name=MaxSell,proto3" json:"MaxSell,omitempty"`
	MinBuy            string `protobuf:"bytes,9,opt,name=MinBuy,proto3" json:"MinBuy,omitempty"`
	MaxBuy            string `protobuf:"bytes,10,opt,name=MaxBuy,proto3" json:"MaxBuy,omitempty"`
	Tick              string `protobuf:"bytes,11,opt,name=Tick,proto3" json:"Tick,omitempty"`
	Category          string `protobuf:"bytes,12,opt,name=Category,proto3" json:"Category,omitempty"`
	BasePrecision     int32  `protobuf:"varint,13,opt,name=BasePrecision,proto3" json:"BasePrecision,omitempty"`
	QuotePrecision    int32  `protobuf:"varint,14,opt,name=QuotePrecision,proto3" json:"QuotePrecision,omitempty"`
	DefaultQuoteValue string `protobuf:"bytes,15,opt,name=DefaultQuoteValue,proto3" json:"DefaultQuoteValue,omitempty"`
	DefaultBaseValue  string `protobuf:"bytes,16,opt,name=DefaultBaseValue,proto3" json:"DefaultBaseValue,omitempty"`
	SellVisibility    bool   `protobuf:"varint,17,opt,name=SellVisibility,proto3" json:"SellVisibility,omitempty"`
	BuyVisibility     bool   `protobuf:"varint,18,opt,name=BuyVisibility,proto3" json:"BuyVisibility,omitempty"`
	RefSymbol         string `protobuf:"bytes,19,opt,name=RefSymbol,proto3" json:"RefSymbol,omitempty"`
}

func (x *GetMarket) Reset() {
	*x = GetMarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarket) ProtoMessage() {}

func (x *GetMarket) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarket.ProtoReflect.Descriptor instead.
func (*GetMarket) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{43}
}

func (x *GetMarket) GetBuyStatus() bool {
	if x != nil {
		return x.BuyStatus
	}
	return false
}

func (x *GetMarket) GetSellStatus() bool {
	if x != nil {
		return x.SellStatus
	}
	return false
}

func (x *GetMarket) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *GetMarket) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *GetMarket) GetBuyDesc() string {
	if x != nil {
		return x.BuyDesc
	}
	return ""
}

func (x *GetMarket) GetSellDesc() string {
	if x != nil {
		return x.SellDesc
	}
	return ""
}

func (x *GetMarket) GetMinSell() string {
	if x != nil {
		return x.MinSell
	}
	return ""
}

func (x *GetMarket) GetMaxSell() string {
	if x != nil {
		return x.MaxSell
	}
	return ""
}

func (x *GetMarket) GetMinBuy() string {
	if x != nil {
		return x.MinBuy
	}
	return ""
}

func (x *GetMarket) GetMaxBuy() string {
	if x != nil {
		return x.MaxBuy
	}
	return ""
}

func (x *GetMarket) GetTick() string {
	if x != nil {
		return x.Tick
	}
	return ""
}

func (x *GetMarket) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *GetMarket) GetBasePrecision() int32 {
	if x != nil {
		return x.BasePrecision
	}
	return 0
}

func (x *GetMarket) GetQuotePrecision() int32 {
	if x != nil {
		return x.QuotePrecision
	}
	return 0
}

func (x *GetMarket) GetDefaultQuoteValue() string {
	if x != nil {
		return x.DefaultQuoteValue
	}
	return ""
}

func (x *GetMarket) GetDefaultBaseValue() string {
	if x != nil {
		return x.DefaultBaseValue
	}
	return ""
}

func (x *GetMarket) GetSellVisibility() bool {
	if x != nil {
		return x.SellVisibility
	}
	return false
}

func (x *GetMarket) GetBuyVisibility() bool {
	if x != nil {
		return x.BuyVisibility
	}
	return false
}

func (x *GetMarket) GetRefSymbol() string {
	if x != nil {
		return x.RefSymbol
	}
	return ""
}

type MarketKline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTime        string `protobuf:"bytes,1,opt,name=eventTime,proto3" json:"eventTime,omitempty"`
	TypeEvent        string `protobuf:"bytes,2,opt,name=typeEvent,proto3" json:"typeEvent,omitempty"`
	Symbol           string `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`
	LastBinancePrice string `protobuf:"bytes,4,opt,name=lastBinancePrice,proto3" json:"lastBinancePrice,omitempty"`
	PriceChange      string `protobuf:"bytes,5,opt,name=priceChange,proto3" json:"priceChange,omitempty"`
	PriceBuy         string `protobuf:"bytes,6,opt,name=priceBuy,proto3" json:"priceBuy,omitempty"`
	PriceSell        string `protobuf:"bytes,7,opt,name=priceSell,proto3" json:"priceSell,omitempty"`
}

func (x *MarketKline) Reset() {
	*x = MarketKline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketKline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketKline) ProtoMessage() {}

func (x *MarketKline) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketKline.ProtoReflect.Descriptor instead.
func (*MarketKline) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{44}
}

func (x *MarketKline) GetEventTime() string {
	if x != nil {
		return x.EventTime
	}
	return ""
}

func (x *MarketKline) GetTypeEvent() string {
	if x != nil {
		return x.TypeEvent
	}
	return ""
}

func (x *MarketKline) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketKline) GetLastBinancePrice() string {
	if x != nil {
		return x.LastBinancePrice
	}
	return ""
}

func (x *MarketKline) GetPriceChange() string {
	if x != nil {
		return x.PriceChange
	}
	return ""
}

func (x *MarketKline) GetPriceBuy() string {
	if x != nil {
		return x.PriceBuy
	}
	return ""
}

func (x *MarketKline) GetPriceSell() string {
	if x != nil {
		return x.PriceSell
	}
	return ""
}

type MarketKlineStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketKline []*MarketKline `protobuf:"bytes,1,rep,name=marketKline,proto3" json:"marketKline,omitempty"`
}

func (x *MarketKlineStream) Reset() {
	*x = MarketKlineStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketKlineStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketKlineStream) ProtoMessage() {}

func (x *MarketKlineStream) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketKlineStream.ProtoReflect.Descriptor instead.
func (*MarketKlineStream) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{45}
}

func (x *MarketKlineStream) GetMarketKline() []*MarketKline {
	if x != nil {
		return x.MarketKline
	}
	return nil
}

type MarketRefPrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefMarket string `protobuf:"bytes,1,opt,name=ref_market,json=refMarket,proto3" json:"ref_market,omitempty"`
	RefPrice  string `protobuf:"bytes,2,opt,name=ref_price,json=refPrice,proto3" json:"ref_price,omitempty"`
}

func (x *MarketRefPrice) Reset() {
	*x = MarketRefPrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketRefPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketRefPrice) ProtoMessage() {}

func (x *MarketRefPrice) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketRefPrice.ProtoReflect.Descriptor instead.
func (*MarketRefPrice) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{46}
}

func (x *MarketRefPrice) GetRefMarket() string {
	if x != nil {
		return x.RefMarket
	}
	return ""
}

func (x *MarketRefPrice) GetRefPrice() string {
	if x != nil {
		return x.RefPrice
	}
	return ""
}

type MarketRefPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RefMarket []string `protobuf:"bytes,1,rep,name=ref_market,json=refMarket,proto3" json:"ref_market,omitempty"`
}

func (x *MarketRefPriceRequest) Reset() {
	*x = MarketRefPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketRefPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketRefPriceRequest) ProtoMessage() {}

func (x *MarketRefPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketRefPriceRequest.ProtoReflect.Descriptor instead.
func (*MarketRefPriceRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{47}
}

func (x *MarketRefPriceRequest) GetRefMarket() []string {
	if x != nil {
		return x.RefMarket
	}
	return nil
}

type MarketRefPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketRefPrice `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketRefPriceResponse) Reset() {
	*x = MarketRefPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketRefPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketRefPriceResponse) ProtoMessage() {}

func (x *MarketRefPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketRefPriceResponse.ProtoReflect.Descriptor instead.
func (*MarketRefPriceResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{48}
}

func (x *MarketRefPriceResponse) GetData() []*MarketRefPrice {
	if x != nil {
		return x.Data
	}
	return nil
}

type MarketPriceSanityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketPriceSanity []*MarketPriceSanityRequestData `protobuf:"bytes,1,rep,name=market_price_sanity,json=marketPriceSanity,proto3" json:"market_price_sanity,omitempty"`
}

func (x *MarketPriceSanityRequest) Reset() {
	*x = MarketPriceSanityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceSanityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceSanityRequest) ProtoMessage() {}

func (x *MarketPriceSanityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceSanityRequest.ProtoReflect.Descriptor instead.
func (*MarketPriceSanityRequest) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{49}
}

func (x *MarketPriceSanityRequest) GetMarketPriceSanity() []*MarketPriceSanityRequestData {
	if x != nil {
		return x.MarketPriceSanity
	}
	return nil
}

type MarketPriceSanityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketPriceSanityResponse_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *MarketPriceSanityResponse) Reset() {
	*x = MarketPriceSanityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceSanityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceSanityResponse) ProtoMessage() {}

func (x *MarketPriceSanityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceSanityResponse.ProtoReflect.Descriptor instead.
func (*MarketPriceSanityResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{50}
}

func (x *MarketPriceSanityResponse) GetData() []*MarketPriceSanityResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type TickerHealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*TickerHealthCheckResponse_Data `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *TickerHealthCheckResponse) Reset() {
	*x = TickerHealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerHealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerHealthCheckResponse) ProtoMessage() {}

func (x *TickerHealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerHealthCheckResponse.ProtoReflect.Descriptor instead.
func (*TickerHealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{51}
}

func (x *TickerHealthCheckResponse) GetData() []*TickerHealthCheckResponse_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListMarketsResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total   int32          `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Markets []*RabexMarket `protobuf:"bytes,2,rep,name=markets,proto3" json:"markets,omitempty"`
	CsvName string         `protobuf:"bytes,3,opt,name=csv_name,json=csvName,proto3" json:"csv_name,omitempty"`
}

func (x *ListMarketsResponse_Data) Reset() {
	*x = ListMarketsResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMarketsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMarketsResponse_Data) ProtoMessage() {}

func (x *ListMarketsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMarketsResponse_Data.ProtoReflect.Descriptor instead.
func (*ListMarketsResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListMarketsResponse_Data) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListMarketsResponse_Data) GetMarkets() []*RabexMarket {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *ListMarketsResponse_Data) GetCsvName() string {
	if x != nil {
		return x.CsvName
	}
	return ""
}

type GetOtcMarketStatusResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtcBuyStatus  bool    `protobuf:"varint,1,opt,name=otc_buy_status,json=otcBuyStatus,proto3" json:"otc_buy_status,omitempty"`
	OtcBuyDesc    string  `protobuf:"bytes,2,opt,name=otc_buy_desc,json=otcBuyDesc,proto3" json:"otc_buy_desc,omitempty"`
	OtcSellStatus bool    `protobuf:"varint,3,opt,name=otc_sell_status,json=otcSellStatus,proto3" json:"otc_sell_status,omitempty"`
	OtcSellDesc   string  `protobuf:"bytes,4,opt,name=otc_sell_desc,json=otcSellDesc,proto3" json:"otc_sell_desc,omitempty"`
	UsdtBuyPrice  float32 `protobuf:"fixed32,5,opt,name=usdt_buy_price,json=usdtBuyPrice,proto3" json:"usdt_buy_price,omitempty"`
	UsdtSellPrice float32 `protobuf:"fixed32,6,opt,name=usdt_sell_price,json=usdtSellPrice,proto3" json:"usdt_sell_price,omitempty"`
}

func (x *GetOtcMarketStatusResponse_Data) Reset() {
	*x = GetOtcMarketStatusResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOtcMarketStatusResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOtcMarketStatusResponse_Data) ProtoMessage() {}

func (x *GetOtcMarketStatusResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOtcMarketStatusResponse_Data.ProtoReflect.Descriptor instead.
func (*GetOtcMarketStatusResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{6, 0}
}

func (x *GetOtcMarketStatusResponse_Data) GetOtcBuyStatus() bool {
	if x != nil {
		return x.OtcBuyStatus
	}
	return false
}

func (x *GetOtcMarketStatusResponse_Data) GetOtcBuyDesc() string {
	if x != nil {
		return x.OtcBuyDesc
	}
	return ""
}

func (x *GetOtcMarketStatusResponse_Data) GetOtcSellStatus() bool {
	if x != nil {
		return x.OtcSellStatus
	}
	return false
}

func (x *GetOtcMarketStatusResponse_Data) GetOtcSellDesc() string {
	if x != nil {
		return x.OtcSellDesc
	}
	return ""
}

func (x *GetOtcMarketStatusResponse_Data) GetUsdtBuyPrice() float32 {
	if x != nil {
		return x.UsdtBuyPrice
	}
	return 0
}

func (x *GetOtcMarketStatusResponse_Data) GetUsdtSellPrice() float32 {
	if x != nil {
		return x.UsdtSellPrice
	}
	return 0
}

type UpdateOtcMarketStatusResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtcSellDesc   string  `protobuf:"bytes,1,opt,name=otc_sell_desc,json=otcSellDesc,proto3" json:"otc_sell_desc,omitempty"`
	OtcBuyStatus  bool    `protobuf:"varint,2,opt,name=otc_buy_status,json=otcBuyStatus,proto3" json:"otc_buy_status,omitempty"`
	OtcBuyDesc    string  `protobuf:"bytes,3,opt,name=otc_buy_desc,json=otcBuyDesc,proto3" json:"otc_buy_desc,omitempty"`
	OtcSellStatus bool    `protobuf:"varint,4,opt,name=otc_sell_status,json=otcSellStatus,proto3" json:"otc_sell_status,omitempty"`
	UsdtBuyPrice  float32 `protobuf:"fixed32,5,opt,name=usdt_buy_price,json=usdtBuyPrice,proto3" json:"usdt_buy_price,omitempty"`
	UsdtSellPrice float32 `protobuf:"fixed32,6,opt,name=usdt_sell_price,json=usdtSellPrice,proto3" json:"usdt_sell_price,omitempty"`
}

func (x *UpdateOtcMarketStatusResponse_Data) Reset() {
	*x = UpdateOtcMarketStatusResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOtcMarketStatusResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOtcMarketStatusResponse_Data) ProtoMessage() {}

func (x *UpdateOtcMarketStatusResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOtcMarketStatusResponse_Data.ProtoReflect.Descriptor instead.
func (*UpdateOtcMarketStatusResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{8, 0}
}

func (x *UpdateOtcMarketStatusResponse_Data) GetOtcSellDesc() string {
	if x != nil {
		return x.OtcSellDesc
	}
	return ""
}

func (x *UpdateOtcMarketStatusResponse_Data) GetOtcBuyStatus() bool {
	if x != nil {
		return x.OtcBuyStatus
	}
	return false
}

func (x *UpdateOtcMarketStatusResponse_Data) GetOtcBuyDesc() string {
	if x != nil {
		return x.OtcBuyDesc
	}
	return ""
}

func (x *UpdateOtcMarketStatusResponse_Data) GetOtcSellStatus() bool {
	if x != nil {
		return x.OtcSellStatus
	}
	return false
}

func (x *UpdateOtcMarketStatusResponse_Data) GetUsdtBuyPrice() float32 {
	if x != nil {
		return x.UsdtBuyPrice
	}
	return 0
}

func (x *UpdateOtcMarketStatusResponse_Data) GetUsdtSellPrice() float32 {
	if x != nil {
		return x.UsdtSellPrice
	}
	return 0
}

type GetMarketsPriceResponse_Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Market    string `protobuf:"bytes,1,opt,name=market,proto3" json:"market,omitempty"`
	Price     string `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	Time      string `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	SellPrice string `protobuf:"bytes,4,opt,name=sell_price,json=sellPrice,proto3" json:"sell_price,omitempty"`
	BuyPrice  string `protobuf:"bytes,5,opt,name=buy_price,json=buyPrice,proto3" json:"buy_price,omitempty"`
	RealPrice string `protobuf:"bytes,6,opt,name=real_price,json=realPrice,proto3" json:"real_price,omitempty"`
}

func (x *GetMarketsPriceResponse_Price) Reset() {
	*x = GetMarketsPriceResponse_Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketsPriceResponse_Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketsPriceResponse_Price) ProtoMessage() {}

func (x *GetMarketsPriceResponse_Price) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketsPriceResponse_Price.ProtoReflect.Descriptor instead.
func (*GetMarketsPriceResponse_Price) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{16, 0}
}

func (x *GetMarketsPriceResponse_Price) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *GetMarketsPriceResponse_Price) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *GetMarketsPriceResponse_Price) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *GetMarketsPriceResponse_Price) GetSellPrice() string {
	if x != nil {
		return x.SellPrice
	}
	return ""
}

func (x *GetMarketsPriceResponse_Price) GetBuyPrice() string {
	if x != nil {
		return x.BuyPrice
	}
	return ""
}

func (x *GetMarketsPriceResponse_Price) GetRealPrice() string {
	if x != nil {
		return x.RealPrice
	}
	return ""
}

type AddBaseSelectorResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order int32  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AddBaseSelectorResponse_Data) Reset() {
	*x = AddBaseSelectorResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddBaseSelectorResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBaseSelectorResponse_Data) ProtoMessage() {}

func (x *AddBaseSelectorResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBaseSelectorResponse_Data.ProtoReflect.Descriptor instead.
func (*AddBaseSelectorResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{18, 0}
}

func (x *AddBaseSelectorResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddBaseSelectorResponse_Data) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddBaseSelectorResponse_Data) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type AddQuoteSelectorResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QuoteName string `protobuf:"bytes,2,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	BaseId    uint64 `protobuf:"varint,3,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Order     int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *AddQuoteSelectorResponse_Data) Reset() {
	*x = AddQuoteSelectorResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddQuoteSelectorResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddQuoteSelectorResponse_Data) ProtoMessage() {}

func (x *AddQuoteSelectorResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddQuoteSelectorResponse_Data.ProtoReflect.Descriptor instead.
func (*AddQuoteSelectorResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{20, 0}
}

func (x *AddQuoteSelectorResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddQuoteSelectorResponse_Data) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *AddQuoteSelectorResponse_Data) GetBaseId() uint64 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *AddQuoteSelectorResponse_Data) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MarketSelectors_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string                   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order  int32                    `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Quotes []*MarketSelectors_Quote `protobuf:"bytes,4,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *MarketSelectors_Base) Reset() {
	*x = MarketSelectors_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectors_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectors_Base) ProtoMessage() {}

func (x *MarketSelectors_Base) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectors_Base.ProtoReflect.Descriptor instead.
func (*MarketSelectors_Base) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{21, 0}
}

func (x *MarketSelectors_Base) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectors_Base) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketSelectors_Base) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *MarketSelectors_Base) GetQuotes() []*MarketSelectors_Quote {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type MarketSelectors_Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	QuoteName string `protobuf:"bytes,2,opt,name=quote_name,json=quoteName,proto3" json:"quote_name,omitempty"`
	BaseId    uint64 `protobuf:"varint,3,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Order     int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MarketSelectors_Quote) Reset() {
	*x = MarketSelectors_Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectors_Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectors_Quote) ProtoMessage() {}

func (x *MarketSelectors_Quote) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectors_Quote.ProtoReflect.Descriptor instead.
func (*MarketSelectors_Quote) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{21, 1}
}

func (x *MarketSelectors_Quote) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectors_Quote) GetQuoteName() string {
	if x != nil {
		return x.QuoteName
	}
	return ""
}

func (x *MarketSelectors_Quote) GetBaseId() uint64 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *MarketSelectors_Quote) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MarketSelectorsResponse_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string                                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Order       int32                                  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Subselector []*MarketSelectorsResponse_SubSelector `protobuf:"bytes,4,rep,name=subselector,proto3" json:"subselector,omitempty"`
}

func (x *MarketSelectorsResponse_Selector) Reset() {
	*x = MarketSelectorsResponse_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorsResponse_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorsResponse_Selector) ProtoMessage() {}

func (x *MarketSelectorsResponse_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorsResponse_Selector.ProtoReflect.Descriptor instead.
func (*MarketSelectorsResponse_Selector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{22, 0}
}

func (x *MarketSelectorsResponse_Selector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectorsResponse_Selector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketSelectorsResponse_Selector) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *MarketSelectorsResponse_Selector) GetSubselector() []*MarketSelectorsResponse_SubSelector {
	if x != nil {
		return x.Subselector
	}
	return nil
}

type MarketSelectorsResponse_SubSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	SelectorId uint64 `protobuf:"varint,3,opt,name=selector_id,json=selectorId,proto3" json:"selector_id,omitempty"`
	Order      int32  `protobuf:"varint,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MarketSelectorsResponse_SubSelector) Reset() {
	*x = MarketSelectorsResponse_SubSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorsResponse_SubSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorsResponse_SubSelector) ProtoMessage() {}

func (x *MarketSelectorsResponse_SubSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorsResponse_SubSelector.ProtoReflect.Descriptor instead.
func (*MarketSelectorsResponse_SubSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{22, 1}
}

func (x *MarketSelectorsResponse_SubSelector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectorsResponse_SubSelector) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarketSelectorsResponse_SubSelector) GetSelectorId() uint64 {
	if x != nil {
		return x.SelectorId
	}
	return 0
}

func (x *MarketSelectorsResponse_SubSelector) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MarketSelectorGetResponseBaseGetResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64                                                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn string                                                       `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa string                                                       `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol string                                                       `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo   string                                                       `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Order  int32                                                        `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	Quotes []*MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse `protobuf:"bytes,7,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) Reset() {
	*x = MarketSelectorGetResponseBaseGetResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorGetResponseBaseGetResponse_Data) ProtoMessage() {}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorGetResponseBaseGetResponse_Data.ProtoReflect.Descriptor instead.
func (*MarketSelectorGetResponseBaseGetResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{23, 0}
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *MarketSelectorGetResponseBaseGetResponse_Data) GetQuotes() []*MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo   string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	BaseId uint64 `protobuf:"varint,6,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Order  int32  `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) Reset() {
	*x = MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) ProtoMessage() {}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{23, 1}
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetBaseId() uint64 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MarketSelectorGetResponse_BaseGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64                                        `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn string                                        `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa string                                        `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol string                                        `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo   string                                        `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Order  int32                                         `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	Quotes []*MarketSelectorGetResponse_QuoteGetResponse `protobuf:"bytes,7,rep,name=quotes,proto3" json:"quotes,omitempty"`
}

func (x *MarketSelectorGetResponse_BaseGetResponse) Reset() {
	*x = MarketSelectorGetResponse_BaseGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorGetResponse_BaseGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorGetResponse_BaseGetResponse) ProtoMessage() {}

func (x *MarketSelectorGetResponse_BaseGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorGetResponse_BaseGetResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorGetResponse_BaseGetResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{24, 0}
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *MarketSelectorGetResponse_BaseGetResponse) GetQuotes() []*MarketSelectorGetResponse_QuoteGetResponse {
	if x != nil {
		return x.Quotes
	}
	return nil
}

type MarketSelectorGetResponse_QuoteGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameFa string `protobuf:"bytes,3,opt,name=name_fa,json=nameFa,proto3" json:"name_fa,omitempty"`
	Symbol string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Logo   string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	BaseId uint64 `protobuf:"varint,6,opt,name=base_id,json=baseId,proto3" json:"base_id,omitempty"`
	Order  int32  `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) Reset() {
	*x = MarketSelectorGetResponse_QuoteGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketSelectorGetResponse_QuoteGetResponse) ProtoMessage() {}

func (x *MarketSelectorGetResponse_QuoteGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketSelectorGetResponse_QuoteGetResponse.ProtoReflect.Descriptor instead.
func (*MarketSelectorGetResponse_QuoteGetResponse) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{24, 1}
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetNameFa() string {
	if x != nil {
		return x.NameFa
	}
	return ""
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetBaseId() uint64 {
	if x != nil {
		return x.BaseId
	}
	return 0
}

func (x *MarketSelectorGetResponse_QuoteGetResponse) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateBaseSelectorRequest_Base struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateBaseSelectorRequest_Base) Reset() {
	*x = UpdateBaseSelectorRequest_Base{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBaseSelectorRequest_Base) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBaseSelectorRequest_Base) ProtoMessage() {}

func (x *UpdateBaseSelectorRequest_Base) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBaseSelectorRequest_Base.ProtoReflect.Descriptor instead.
func (*UpdateBaseSelectorRequest_Base) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{25, 0}
}

func (x *UpdateBaseSelectorRequest_Base) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBaseSelectorRequest_Base) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateQuoteSelectorRequest_Quote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateQuoteSelectorRequest_Quote) Reset() {
	*x = UpdateQuoteSelectorRequest_Quote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateQuoteSelectorRequest_Quote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateQuoteSelectorRequest_Quote) ProtoMessage() {}

func (x *UpdateQuoteSelectorRequest_Quote) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateQuoteSelectorRequest_Quote.ProtoReflect.Descriptor instead.
func (*UpdateQuoteSelectorRequest_Quote) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{26, 0}
}

func (x *UpdateQuoteSelectorRequest_Quote) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateQuoteSelectorRequest_Quote) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type GetMarketChartsResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Daily   []*GetMarketChartsResponse_Data_Kline `protobuf:"bytes,1,rep,name=Daily,proto3" json:"Daily,omitempty"`
	Weekly  []*GetMarketChartsResponse_Data_Kline `protobuf:"bytes,2,rep,name=Weekly,proto3" json:"Weekly,omitempty"`
	Monthly []*GetMarketChartsResponse_Data_Kline `protobuf:"bytes,3,rep,name=Monthly,proto3" json:"Monthly,omitempty"`
	Yearly  []*GetMarketChartsResponse_Data_Kline `protobuf:"bytes,4,rep,name=Yearly,proto3" json:"Yearly,omitempty"`
}

func (x *GetMarketChartsResponse_Data) Reset() {
	*x = GetMarketChartsResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketChartsResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketChartsResponse_Data) ProtoMessage() {}

func (x *GetMarketChartsResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketChartsResponse_Data.ProtoReflect.Descriptor instead.
func (*GetMarketChartsResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{36, 0}
}

func (x *GetMarketChartsResponse_Data) GetDaily() []*GetMarketChartsResponse_Data_Kline {
	if x != nil {
		return x.Daily
	}
	return nil
}

func (x *GetMarketChartsResponse_Data) GetWeekly() []*GetMarketChartsResponse_Data_Kline {
	if x != nil {
		return x.Weekly
	}
	return nil
}

func (x *GetMarketChartsResponse_Data) GetMonthly() []*GetMarketChartsResponse_Data_Kline {
	if x != nil {
		return x.Monthly
	}
	return nil
}

func (x *GetMarketChartsResponse_Data) GetYearly() []*GetMarketChartsResponse_Data_Kline {
	if x != nil {
		return x.Yearly
	}
	return nil
}

type GetMarketChartsResponse_Data_Kline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Close    string `protobuf:"bytes,1,opt,name=Close,proto3" json:"Close,omitempty"`
	Symbol   string `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	EndTime  int64  `protobuf:"varint,3,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	Interval string `protobuf:"bytes,4,opt,name=Interval,proto3" json:"Interval,omitempty"`
}

func (x *GetMarketChartsResponse_Data_Kline) Reset() {
	*x = GetMarketChartsResponse_Data_Kline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarketChartsResponse_Data_Kline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketChartsResponse_Data_Kline) ProtoMessage() {}

func (x *GetMarketChartsResponse_Data_Kline) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketChartsResponse_Data_Kline.ProtoReflect.Descriptor instead.
func (*GetMarketChartsResponse_Data_Kline) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{36, 0, 0}
}

func (x *GetMarketChartsResponse_Data_Kline) GetClose() string {
	if x != nil {
		return x.Close
	}
	return ""
}

func (x *GetMarketChartsResponse_Data_Kline) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetMarketChartsResponse_Data_Kline) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *GetMarketChartsResponse_Data_Kline) GetInterval() string {
	if x != nil {
		return x.Interval
	}
	return ""
}

type UpdateSelectorRequest_Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateSelectorRequest_Selector) Reset() {
	*x = UpdateSelectorRequest_Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSelectorRequest_Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSelectorRequest_Selector) ProtoMessage() {}

func (x *UpdateSelectorRequest_Selector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSelectorRequest_Selector.ProtoReflect.Descriptor instead.
func (*UpdateSelectorRequest_Selector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{37, 0}
}

func (x *UpdateSelectorRequest_Selector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSelectorRequest_Selector) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type UpdateSubSelectorRequest_SubSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Order int32  `protobuf:"varint,2,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *UpdateSubSelectorRequest_SubSelector) Reset() {
	*x = UpdateSubSelectorRequest_SubSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubSelectorRequest_SubSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubSelectorRequest_SubSelector) ProtoMessage() {}

func (x *UpdateSubSelectorRequest_SubSelector) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubSelectorRequest_SubSelector.ProtoReflect.Descriptor instead.
func (*UpdateSubSelectorRequest_SubSelector) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{39, 0}
}

func (x *UpdateSubSelectorRequest_SubSelector) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateSubSelectorRequest_SubSelector) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type MarketPriceSanityRequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base     string       `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Quote    string       `protobuf:"bytes,2,opt,name=quote,proto3" json:"quote,omitempty"`
	Side     commons.Side `protobuf:"varint,3,opt,name=side,proto3,enum=rabex.api.commons.Side" json:"side,omitempty"`
	MakerQty string       `protobuf:"bytes,4,opt,name=maker_qty,json=makerQty,proto3" json:"maker_qty,omitempty"`
	TakerQty string       `protobuf:"bytes,5,opt,name=taker_qty,json=takerQty,proto3" json:"taker_qty,omitempty"`
}

func (x *MarketPriceSanityRequestData) Reset() {
	*x = MarketPriceSanityRequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceSanityRequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceSanityRequestData) ProtoMessage() {}

func (x *MarketPriceSanityRequestData) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceSanityRequestData.ProtoReflect.Descriptor instead.
func (*MarketPriceSanityRequestData) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{49, 0}
}

func (x *MarketPriceSanityRequestData) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *MarketPriceSanityRequestData) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *MarketPriceSanityRequestData) GetSide() commons.Side {
	if x != nil {
		return x.Side
	}
	return commons.Side(0)
}

func (x *MarketPriceSanityRequestData) GetMakerQty() string {
	if x != nil {
		return x.MakerQty
	}
	return ""
}

func (x *MarketPriceSanityRequestData) GetTakerQty() string {
	if x != nil {
		return x.TakerQty
	}
	return ""
}

type MarketPriceSanityResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MarketSymbol        string  `protobuf:"bytes,1,opt,name=market_symbol,json=marketSymbol,proto3" json:"market_symbol,omitempty"`
	Price               string  `protobuf:"bytes,2,opt,name=price,proto3" json:"price,omitempty"`
	LastUpdate          string  `protobuf:"bytes,3,opt,name=last_update,json=lastUpdate,proto3" json:"last_update,omitempty"`
	IsAllowed           bool    `protobuf:"varint,4,opt,name=is_allowed,json=isAllowed,proto3" json:"is_allowed,omitempty"`
	Message             string  `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	TakerAssetPrecision int32   `protobuf:"varint,6,opt,name=taker_asset_precision,json=takerAssetPrecision,proto3" json:"taker_asset_precision,omitempty"`
	MakerAssetPrecision int32   `protobuf:"varint,7,opt,name=maker_asset_precision,json=makerAssetPrecision,proto3" json:"maker_asset_precision,omitempty"`
	BaseTmnPrice        string  `protobuf:"bytes,8,opt,name=base_tmn_price,json=baseTmnPrice,proto3" json:"base_tmn_price,omitempty"`
	PriceMultiplier     float32 `protobuf:"fixed32,9,opt,name=priceMultiplier,proto3" json:"priceMultiplier,omitempty"`
	BaseRefPrice        string  `protobuf:"bytes,10,opt,name=base_ref_price,json=baseRefPrice,proto3" json:"base_ref_price,omitempty"`
	UsdtPrice           string  `protobuf:"bytes,11,opt,name=usdt_price,json=usdtPrice,proto3" json:"usdt_price,omitempty"`
}

func (x *MarketPriceSanityResponse_Data) Reset() {
	*x = MarketPriceSanityResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketPriceSanityResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketPriceSanityResponse_Data) ProtoMessage() {}

func (x *MarketPriceSanityResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketPriceSanityResponse_Data.ProtoReflect.Descriptor instead.
func (*MarketPriceSanityResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{50, 0}
}

func (x *MarketPriceSanityResponse_Data) GetMarketSymbol() string {
	if x != nil {
		return x.MarketSymbol
	}
	return ""
}

func (x *MarketPriceSanityResponse_Data) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *MarketPriceSanityResponse_Data) GetLastUpdate() string {
	if x != nil {
		return x.LastUpdate
	}
	return ""
}

func (x *MarketPriceSanityResponse_Data) GetIsAllowed() bool {
	if x != nil {
		return x.IsAllowed
	}
	return false
}

func (x *MarketPriceSanityResponse_Data) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MarketPriceSanityResponse_Data) GetTakerAssetPrecision() int32 {
	if x != nil {
		return x.TakerAssetPrecision
	}
	return 0
}

func (x *MarketPriceSanityResponse_Data) GetMakerAssetPrecision() int32 {
	if x != nil {
		return x.MakerAssetPrecision
	}
	return 0
}

func (x *MarketPriceSanityResponse_Data) GetBaseTmnPrice() string {
	if x != nil {
		return x.BaseTmnPrice
	}
	return ""
}

func (x *MarketPriceSanityResponse_Data) GetPriceMultiplier() float32 {
	if x != nil {
		return x.PriceMultiplier
	}
	return 0
}

func (x *MarketPriceSanityResponse_Data) GetBaseRefPrice() string {
	if x != nil {
		return x.BaseRefPrice
	}
	return ""
}

func (x *MarketPriceSanityResponse_Data) GetUsdtPrice() string {
	if x != nil {
		return x.UsdtPrice
	}
	return ""
}

type TickerHealthCheckResponse_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url        string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Health     bool   `protobuf:"varint,2,opt,name=health,proto3" json:"health,omitempty"`
	ChangeDate string `protobuf:"bytes,3,opt,name=changeDate,proto3" json:"changeDate,omitempty"`
}

func (x *TickerHealthCheckResponse_Data) Reset() {
	*x = TickerHealthCheckResponse_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_market_messages_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickerHealthCheckResponse_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerHealthCheckResponse_Data) ProtoMessage() {}

func (x *TickerHealthCheckResponse_Data) ProtoReflect() protoreflect.Message {
	mi := &file_market_messages_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerHealthCheckResponse_Data.ProtoReflect.Descriptor instead.
func (*TickerHealthCheckResponse_Data) Descriptor() ([]byte, []int) {
	return file_market_messages_proto_rawDescGZIP(), []int{51, 0}
}

func (x *TickerHealthCheckResponse_Data) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *TickerHealthCheckResponse_Data) GetHealth() bool {
	if x != nil {
		return x.Health
	}
	return false
}

func (x *TickerHealthCheckResponse_Data) GetChangeDate() string {
	if x != nil {
		return x.ChangeDate
	}
	return ""
}

var File_market_messages_proto protoreflect.FileDescriptor

var file_market_messages_proto_rawDesc = []byte{
	0x0a, 0x15, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x1a, 0x12, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf8, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x62, 0x75, 0x79, 0x4d, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c,
	0x4d, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x75, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x79,
	0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x49, 0x0a,
	0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x63, 0x73, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x77, 0x69, 0x74,
	0x68, 0x43, 0x73, 0x76, 0x22, 0x32, 0x0a, 0x0a, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x68, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x22, 0xc7, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x70, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x37,
	0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x07,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x73, 0x76, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x73, 0x76, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x62,
	0x65, 0x78, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xce,
	0x02, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4f, 0x74, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x74, 0x63, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xe8, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x74, 0x63, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x74, 0x63, 0x42, 0x75, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x74, 0x63, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x74, 0x63, 0x42, 0x75,
	0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x6f, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x0d, 0x6f, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x64, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x73, 0x64, 0x74, 0x42,
	0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x64, 0x74, 0x5f,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x75, 0x73, 0x64, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x80, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x63, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x74, 0x63, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x74,
	0x63, 0x42, 0x75, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x74,
	0x63, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x6f, 0x74, 0x63, 0x42, 0x75, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f,
	0x6f, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x73, 0x64, 0x74, 0x5f, 0x62, 0x75, 0x79,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x73,
	0x64, 0x74, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73,
	0x64, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x75, 0x73, 0x64, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x22, 0xd4, 0x02, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x63,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x74, 0x63, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xe8,
	0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x74, 0x63, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x74, 0x63, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x74, 0x63, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6f, 0x74, 0x63, 0x42, 0x75, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x74, 0x63, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x74, 0x63, 0x42, 0x75, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x74,
	0x63, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75,
	0x73, 0x64, 0x74, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x75, 0x73, 0x64, 0x74, 0x42, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x64, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x75, 0x73, 0x64, 0x74,
	0x53, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x22, 0xfc, 0x06, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62,
	0x75, 0x79, 0x5f, 0x6d, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79,
	0x4d, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x62,
	0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75,
	0x79, 0x4d, 0x61, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x6c, 0x12, 0x1d, 0x0a,
	0x0a, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x62, 0x75, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x6d, 0x61, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c,
	0x4d, 0x61, 0x78, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x69, 0x63, 0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x62, 0x75, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65,
	0x6c, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x62, 0x75, 0x79, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x75, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71,
	0x75, 0x6f, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x46, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3d, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x66, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x30, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xa4, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x42, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x9f, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x41, 0x64, 0x64, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x40, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x67, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x51, 0x75, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xc5,
	0x01, 0x0a, 0x18, 0x41, 0x64, 0x64, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x41, 0x64, 0x64,
	0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x64, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75,
	0x6f, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0xb8, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x42, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x81, 0x01, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x2e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x05, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x22, 0xeb, 0x02, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x9d, 0x01, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x57, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x62,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x68, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0xa3, 0x04, 0x0a, 0x28, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x1a, 0xef, 0x01, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x63,
	0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4b,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x73, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x8c, 0x04, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0xeb, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x73, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x06,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x62, 0x61, 0x73, 0x65, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x42,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x62, 0x61, 0x73, 0x65, 0x73, 0x1a, 0x2c, 0x0a, 0x04, 0x42, 0x61,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x06, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x06, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x73, 0x1a, 0x2d, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x6d, 0x0a, 0x0e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72,
	0x6c, 0x22, 0x3a, 0x0a, 0x0c, 0x46, 0x69, 0x61, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x9c, 0x01,
	0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x19, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0c, 0x73, 0x75,
	0x62, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xf9, 0x01, 0x0a,
	0x0b, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x44,
	0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d,
	0x61, 0x78, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x12,
	0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x22, 0x5d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x69, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x50,
	0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x69, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x75, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x19, 0x0a, 0x08,
	0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x6c, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d,
	0x61, 0x78, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x78, 0x42, 0x75, 0x79, 0x22, 0x96, 0x07, 0x0a, 0x0b, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x66, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x75, 0x79, 0x5f, 0x6d,
	0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x75, 0x79, 0x4d, 0x6c, 0x12, 0x17,
	0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x5f, 0x6d,
	0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62,
	0x75, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c,
	0x4d, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x4d, 0x61, 0x78, 0x12,
	0x38, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x63,
	0x6b, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x40, 0x0a,
	0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x75, 0x79,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x79,
	0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x62, 0x75, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x71, 0x75, 0x6f, 0x74, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4e, 0x0a,
	0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0xba, 0x01,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x47, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x22, 0x38, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x10, 0x03, 0x22, 0x8b, 0x04, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xab, 0x03, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4a, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12,
	0x4c, 0x0a, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e,
	0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x4e, 0x0a,
	0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4b,
	0x6c, 0x69, 0x6e, 0x65, 0x52, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12, 0x4c, 0x0a,
	0x06, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x52, 0x06, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x1a, 0x6b, 0x0a, 0x05, 0x4b,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x1a, 0x30, 0x0a, 0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x22, 0x18, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xaa, 0x01, 0x0a,
	0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x73, 0x75, 0x62,
	0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x1a, 0x33, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x4f, 0x0a, 0x1a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x02, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x0a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd3, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x45,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x6f, 0x67, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x53, 0x75, 0x62,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x53, 0x75, 0x62, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xd1, 0x04,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x42,
	0x75, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x42, 0x75, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6c,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42,
	0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x44, 0x65, 0x73, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x75, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x53, 0x65, 0x6c, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x69, 0x6e, 0x53,
	0x65, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x6c, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x69, 0x6e, 0x42, 0x75, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d,
	0x69, 0x6e, 0x42, 0x75, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x61, 0x78, 0x42, 0x75, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x54, 0x69, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x63,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x6c, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x53,
	0x65, 0x6c, 0x6c, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a,
	0x0d, 0x42, 0x75, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x42, 0x75, 0x79, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x66, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x22, 0xe9, 0x01, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x75, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x75, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x6c, 0x22, 0x54, 0x0a,
	0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4b, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4b, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x4c, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x5f, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x22, 0x36, 0x0a, 0x15, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x66, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x66, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x66, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x22, 0x4e, 0x0a, 0x16, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x66, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x95, 0x02, 0x0a, 0x18, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x13, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x11, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x1a, 0x97, 0x01, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x73, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x51, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x51, 0x74,
	0x79, 0x22, 0xfc, 0x03, 0x0a, 0x19, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x53, 0x61, 0x6e, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x61, 0x6e, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x98, 0x03, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x69, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x5f, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x74, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61, 0x6b, 0x65, 0x72,
	0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x6d, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x54, 0x6d, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x66, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x64, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x64, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xb3, 0x01, 0x0a, 0x19, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x1a, 0x50, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x65, 0x42, 0x1c, 0x5a, 0x1a, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x3b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_market_messages_proto_rawDescOnce sync.Once
	file_market_messages_proto_rawDescData = file_market_messages_proto_rawDesc
)

func file_market_messages_proto_rawDescGZIP() []byte {
	file_market_messages_proto_rawDescOnce.Do(func() {
		file_market_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_market_messages_proto_rawDescData)
	})
	return file_market_messages_proto_rawDescData
}

var file_market_messages_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_market_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_market_messages_proto_goTypes = []interface{}{
	(ListMarketsRequest_Visibility)(0),                                // 0: rabex.api.market.ListMarketsRequest.Visibility
	(GetMarketChartsRequest_Period)(0),                                // 1: rabex.api.market.GetMarketChartsRequest.Period
	(*UpdateMarketRequest)(nil),                                       // 2: rabex.api.market.UpdateMarketRequest
	(*UpdateMarketResponse)(nil),                                      // 3: rabex.api.market.UpdateMarketResponse
	(*ListMarketsRequest)(nil),                                        // 4: rabex.api.market.ListMarketsRequest
	(*ListMarketsResponse)(nil),                                       // 5: rabex.api.market.ListMarketsResponse
	(*GetMarketRequest)(nil),                                          // 6: rabex.api.market.GetMarketRequest
	(*GetMarketResponse)(nil),                                         // 7: rabex.api.market.GetMarketResponse
	(*GetOtcMarketStatusResponse)(nil),                                // 8: rabex.api.market.GetOtcMarketStatusResponse
	(*UpdateOtcMarketStatusRequest)(nil),                              // 9: rabex.api.market.UpdateOtcMarketStatusRequest
	(*UpdateOtcMarketStatusResponse)(nil),                             // 10: rabex.api.market.UpdateOtcMarketStatusResponse
	(*AddMarketRequest)(nil),                                          // 11: rabex.api.market.AddMarketRequest
	(*AddMarket)(nil),                                                 // 12: rabex.api.market.AddMarket
	(*AddMarketResponse)(nil),                                         // 13: rabex.api.market.AddMarketResponse
	(*GetSelectorRequest)(nil),                                        // 14: rabex.api.market.GetSelectorRequest
	(*GetSelectorResponse)(nil),                                       // 15: rabex.api.market.GetSelectorResponse
	(*GetSimpleSelectorResponse)(nil),                                 // 16: rabex.api.market.GetSimpleSelectorResponse
	(*GetMarketsPriceRequest)(nil),                                    // 17: rabex.api.market.GetMarketsPriceRequest
	(*GetMarketsPriceResponse)(nil),                                   // 18: rabex.api.market.GetMarketsPriceResponse
	(*AddBaseSelectorRequest)(nil),                                    // 19: rabex.api.market.AddBaseSelectorRequest
	(*AddBaseSelectorResponse)(nil),                                   // 20: rabex.api.market.AddBaseSelectorResponse
	(*AddQuoteSelectorRequest)(nil),                                   // 21: rabex.api.market.AddQuoteSelectorRequest
	(*AddQuoteSelectorResponse)(nil),                                  // 22: rabex.api.market.AddQuoteSelectorResponse
	(*MarketSelectors)(nil),                                           // 23: rabex.api.market.MarketSelectors
	(*MarketSelectorsResponse)(nil),                                   // 24: rabex.api.market.MarketSelectorsResponse
	(*MarketSelectorGetResponseBaseGetResponse)(nil),                  // 25: rabex.api.market.MarketSelectorGetResponseBaseGetResponse
	(*MarketSelectorGetResponse)(nil),                                 // 26: rabex.api.market.MarketSelectorGetResponse
	(*UpdateBaseSelectorRequest)(nil),                                 // 27: rabex.api.market.UpdateBaseSelectorRequest
	(*UpdateQuoteSelectorRequest)(nil),                                // 28: rabex.api.market.UpdateQuoteSelectorRequest
	(*SimpleSelector)(nil),                                            // 29: rabex.api.market.SimpleSelector
	(*FiatSelector)(nil),                                              // 30: rabex.api.market.FiatSelector
	(*Selector)(nil),                                                  // 31: rabex.api.market.Selector
	(*SubSelector)(nil),                                               // 32: rabex.api.market.SubSelector
	(*GetMiniListResponse)(nil),                                       // 33: rabex.api.market.GetMiniListResponse
	(*MiniMarketList)(nil),                                            // 34: rabex.api.market.MiniMarketList
	(*RabexMarket)(nil),                                               // 35: rabex.api.market.RabexMarket
	(*Pagination)(nil),                                                // 36: rabex.api.market.Pagination
	(*GetMarketChartsRequest)(nil),                                    // 37: rabex.api.market.GetMarketChartsRequest
	(*GetMarketChartsResponse)(nil),                                   // 38: rabex.api.market.GetMarketChartsResponse
	(*UpdateSelectorRequest)(nil),                                     // 39: rabex.api.market.UpdateSelectorRequest
	(*UpdateSelectorResponse)(nil),                                    // 40: rabex.api.market.UpdateSelectorResponse
	(*UpdateSubSelectorRequest)(nil),                                  // 41: rabex.api.market.UpdateSubSelectorRequest
	(*MarketSelectorsGetResponse)(nil),                                // 42: rabex.api.market.MarketSelectorsGetResponse
	(*GetSubSelector)(nil),                                            // 43: rabex.api.market.GetSubSelector
	(*GetSelector)(nil),                                               // 44: rabex.api.market.GetSelector
	(*GetMarket)(nil),                                                 // 45: rabex.api.market.GetMarket
	(*MarketKline)(nil),                                               // 46: rabex.api.market.MarketKline
	(*MarketKlineStream)(nil),                                         // 47: rabex.api.market.MarketKlineStream
	(*MarketRefPrice)(nil),                                            // 48: rabex.api.market.MarketRefPrice
	(*MarketRefPriceRequest)(nil),                                     // 49: rabex.api.market.MarketRefPriceRequest
	(*MarketRefPriceResponse)(nil),                                    // 50: rabex.api.market.MarketRefPriceResponse
	(*MarketPriceSanityRequest)(nil),                                  // 51: rabex.api.market.MarketPriceSanityRequest
	(*MarketPriceSanityResponse)(nil),                                 // 52: rabex.api.market.MarketPriceSanityResponse
	(*TickerHealthCheckResponse)(nil),                                 // 53: rabex.api.market.TickerHealthCheckResponse
	(*ListMarketsResponse_Data)(nil),                                  // 54: rabex.api.market.ListMarketsResponse.Data
	(*GetOtcMarketStatusResponse_Data)(nil),                           // 55: rabex.api.market.GetOtcMarketStatusResponse.Data
	(*UpdateOtcMarketStatusResponse_Data)(nil),                        // 56: rabex.api.market.UpdateOtcMarketStatusResponse.Data
	(*GetMarketsPriceResponse_Price)(nil),                             // 57: rabex.api.market.GetMarketsPriceResponse.Price
	(*AddBaseSelectorResponse_Data)(nil),                              // 58: rabex.api.market.AddBaseSelectorResponse.Data
	(*AddQuoteSelectorResponse_Data)(nil),                             // 59: rabex.api.market.AddQuoteSelectorResponse.Data
	(*MarketSelectors_Base)(nil),                                      // 60: rabex.api.market.MarketSelectors.Base
	(*MarketSelectors_Quote)(nil),                                     // 61: rabex.api.market.MarketSelectors.Quote
	(*MarketSelectorsResponse_Selector)(nil),                          // 62: rabex.api.market.MarketSelectorsResponse.Selector
	(*MarketSelectorsResponse_SubSelector)(nil),                       // 63: rabex.api.market.MarketSelectorsResponse.SubSelector
	(*MarketSelectorGetResponseBaseGetResponse_Data)(nil),             // 64: rabex.api.market.MarketSelectorGetResponseBaseGetResponse.Data
	(*MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse)(nil), // 65: rabex.api.market.MarketSelectorGetResponseBaseGetResponse.QuoteGetResponse
	(*MarketSelectorGetResponse_BaseGetResponse)(nil),                 // 66: rabex.api.market.MarketSelectorGetResponse.BaseGetResponse
	(*MarketSelectorGetResponse_QuoteGetResponse)(nil),                // 67: rabex.api.market.MarketSelectorGetResponse.QuoteGetResponse
	(*UpdateBaseSelectorRequest_Base)(nil),                            // 68: rabex.api.market.UpdateBaseSelectorRequest.Base
	(*UpdateQuoteSelectorRequest_Quote)(nil),                          // 69: rabex.api.market.UpdateQuoteSelectorRequest.Quote
	(*GetMarketChartsResponse_Data)(nil),                              // 70: rabex.api.market.GetMarketChartsResponse.Data
	(*GetMarketChartsResponse_Data_Kline)(nil),                        // 71: rabex.api.market.GetMarketChartsResponse.Data.Kline
	(*UpdateSelectorRequest_Selector)(nil),                            // 72: rabex.api.market.UpdateSelectorRequest.Selector
	(*UpdateSubSelectorRequest_SubSelector)(nil),                      // 73: rabex.api.market.UpdateSubSelectorRequest.SubSelector
	(*MarketPriceSanityRequestData)(nil),                              // 74: rabex.api.market.MarketPriceSanityRequest.data
	(*MarketPriceSanityResponse_Data)(nil),                            // 75: rabex.api.market.MarketPriceSanityResponse.Data
	(*TickerHealthCheckResponse_Data)(nil),                            // 76: rabex.api.market.TickerHealthCheckResponse.Data
	(PriceSource)(0),                                                  // 77: rabex.api.market.PriceSource
	(MarketType)(0),                                                   // 78: rabex.api.market.MarketType
	(commons.Side)(0),                                                 // 79: rabex.api.commons.Side
}
var file_market_messages_proto_depIdxs = []int32{
	77, // 0: rabex.api.market.UpdateMarketRequest.price_source:type_name -> rabex.api.market.PriceSource
	78, // 1: rabex.api.market.UpdateMarketRequest.category:type_name -> rabex.api.market.MarketType
	35, // 2: rabex.api.market.UpdateMarketResponse.data:type_name -> rabex.api.market.RabexMarket
	78, // 3: rabex.api.market.ListMarketsRequest.category:type_name -> rabex.api.market.MarketType
	0,  // 4: rabex.api.market.ListMarketsRequest.visibility:type_name -> rabex.api.market.ListMarketsRequest.Visibility
	36, // 5: rabex.api.market.ListMarketsRequest.pagination:type_name -> rabex.api.market.Pagination
	54, // 6: rabex.api.market.ListMarketsResponse.data:type_name -> rabex.api.market.ListMarketsResponse.Data
	35, // 7: rabex.api.market.GetMarketResponse.data:type_name -> rabex.api.market.RabexMarket
	55, // 8: rabex.api.market.GetOtcMarketStatusResponse.data:type_name -> rabex.api.market.GetOtcMarketStatusResponse.Data
	56, // 9: rabex.api.market.UpdateOtcMarketStatusResponse.data:type_name -> rabex.api.market.UpdateOtcMarketStatusResponse.Data
	12, // 10: rabex.api.market.AddMarketRequest.market:type_name -> rabex.api.market.AddMarket
	78, // 11: rabex.api.market.AddMarket.category:type_name -> rabex.api.market.MarketType
	77, // 12: rabex.api.market.AddMarket.price_source:type_name -> rabex.api.market.PriceSource
	35, // 13: rabex.api.market.AddMarketResponse.data:type_name -> rabex.api.market.RabexMarket
	78, // 14: rabex.api.market.GetSelectorRequest.market_type:type_name -> rabex.api.market.MarketType
	31, // 15: rabex.api.market.GetSelectorResponse.selector:type_name -> rabex.api.market.Selector
	29, // 16: rabex.api.market.GetSimpleSelectorResponse.simple_selector:type_name -> rabex.api.market.SimpleSelector
	57, // 17: rabex.api.market.GetMarketsPriceResponse.data:type_name -> rabex.api.market.GetMarketsPriceResponse.Price
	58, // 18: rabex.api.market.AddBaseSelectorResponse.data:type_name -> rabex.api.market.AddBaseSelectorResponse.Data
	59, // 19: rabex.api.market.AddQuoteSelectorResponse.data:type_name -> rabex.api.market.AddQuoteSelectorResponse.Data
	60, // 20: rabex.api.market.MarketSelectors.data:type_name -> rabex.api.market.MarketSelectors.Base
	62, // 21: rabex.api.market.MarketSelectorsResponse.data:type_name -> rabex.api.market.MarketSelectorsResponse.Selector
	64, // 22: rabex.api.market.MarketSelectorGetResponseBaseGetResponse.data:type_name -> rabex.api.market.MarketSelectorGetResponseBaseGetResponse.Data
	66, // 23: rabex.api.market.MarketSelectorGetResponse.data:type_name -> rabex.api.market.MarketSelectorGetResponse.BaseGetResponse
	68, // 24: rabex.api.market.UpdateBaseSelectorRequest.bases:type_name -> rabex.api.market.UpdateBaseSelectorRequest.Base
	69, // 25: rabex.api.market.UpdateQuoteSelectorRequest.quotes:type_name -> rabex.api.market.UpdateQuoteSelectorRequest.Quote
	32, // 26: rabex.api.market.Selector.sub_selector:type_name -> rabex.api.market.SubSelector
	34, // 27: rabex.api.market.GetMiniListResponse.mini_pair_list:type_name -> rabex.api.market.MiniMarketList
	78, // 28: rabex.api.market.RabexMarket.category:type_name -> rabex.api.market.MarketType
	77, // 29: rabex.api.market.RabexMarket.price_source:type_name -> rabex.api.market.PriceSource
	1,  // 30: rabex.api.market.GetMarketChartsRequest.period:type_name -> rabex.api.market.GetMarketChartsRequest.Period
	70, // 31: rabex.api.market.GetMarketChartsResponse.data:type_name -> rabex.api.market.GetMarketChartsResponse.Data
	72, // 32: rabex.api.market.UpdateSelectorRequest.selector:type_name -> rabex.api.market.UpdateSelectorRequest.Selector
	73, // 33: rabex.api.market.UpdateSubSelectorRequest.sub_selector:type_name -> rabex.api.market.UpdateSubSelectorRequest.SubSelector
	44, // 34: rabex.api.market.MarketSelectorsGetResponse.data:type_name -> rabex.api.market.GetSelector
	45, // 35: rabex.api.market.GetSubSelector.MarketInfo:type_name -> rabex.api.market.GetMarket
	43, // 36: rabex.api.market.GetSelector.SubSelector:type_name -> rabex.api.market.GetSubSelector
	46, // 37: rabex.api.market.MarketKlineStream.marketKline:type_name -> rabex.api.market.MarketKline
	48, // 38: rabex.api.market.MarketRefPriceResponse.data:type_name -> rabex.api.market.MarketRefPrice
	74, // 39: rabex.api.market.MarketPriceSanityRequest.market_price_sanity:type_name -> rabex.api.market.MarketPriceSanityRequest.data
	75, // 40: rabex.api.market.MarketPriceSanityResponse.data:type_name -> rabex.api.market.MarketPriceSanityResponse.Data
	76, // 41: rabex.api.market.TickerHealthCheckResponse.data:type_name -> rabex.api.market.TickerHealthCheckResponse.Data
	35, // 42: rabex.api.market.ListMarketsResponse.Data.markets:type_name -> rabex.api.market.RabexMarket
	61, // 43: rabex.api.market.MarketSelectors.Base.quotes:type_name -> rabex.api.market.MarketSelectors.Quote
	63, // 44: rabex.api.market.MarketSelectorsResponse.Selector.subselector:type_name -> rabex.api.market.MarketSelectorsResponse.SubSelector
	65, // 45: rabex.api.market.MarketSelectorGetResponseBaseGetResponse.Data.quotes:type_name -> rabex.api.market.MarketSelectorGetResponseBaseGetResponse.QuoteGetResponse
	67, // 46: rabex.api.market.MarketSelectorGetResponse.BaseGetResponse.quotes:type_name -> rabex.api.market.MarketSelectorGetResponse.QuoteGetResponse
	71, // 47: rabex.api.market.GetMarketChartsResponse.Data.Daily:type_name -> rabex.api.market.GetMarketChartsResponse.Data.Kline
	71, // 48: rabex.api.market.GetMarketChartsResponse.Data.Weekly:type_name -> rabex.api.market.GetMarketChartsResponse.Data.Kline
	71, // 49: rabex.api.market.GetMarketChartsResponse.Data.Monthly:type_name -> rabex.api.market.GetMarketChartsResponse.Data.Kline
	71, // 50: rabex.api.market.GetMarketChartsResponse.Data.Yearly:type_name -> rabex.api.market.GetMarketChartsResponse.Data.Kline
	79, // 51: rabex.api.market.MarketPriceSanityRequest.data.side:type_name -> rabex.api.commons.Side
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_market_messages_proto_init() }
func file_market_messages_proto_init() {
	if File_market_messages_proto != nil {
		return
	}
	file_market_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_market_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtcMarketStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOtcMarketStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOtcMarketStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMarketRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMarketResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSimpleSelectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketsPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketsPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBaseSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBaseSelectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuoteSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuoteSelectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorGetResponseBaseGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBaseSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuoteSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiniListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiniMarketList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pagination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketChartsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketChartsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSelectorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubSelectorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorsGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketKline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketKlineStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketRefPrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketRefPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketRefPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceSanityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceSanityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerHealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMarketsResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOtcMarketStatusResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOtcMarketStatusResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketsPriceResponse_Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddBaseSelectorResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddQuoteSelectorResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectors_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectors_Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorsResponse_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorsResponse_SubSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorGetResponseBaseGetResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorGetResponseBaseGetResponse_QuoteGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorGetResponse_BaseGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketSelectorGetResponse_QuoteGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBaseSelectorRequest_Base); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateQuoteSelectorRequest_Quote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketChartsResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarketChartsResponse_Data_Kline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSelectorRequest_Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubSelectorRequest_SubSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceSanityRequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketPriceSanityResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_market_messages_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickerHealthCheckResponse_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_market_messages_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_market_messages_proto_goTypes,
		DependencyIndexes: file_market_messages_proto_depIdxs,
		EnumInfos:         file_market_messages_proto_enumTypes,
		MessageInfos:      file_market_messages_proto_msgTypes,
	}.Build()
	File_market_messages_proto = out.File
	file_market_messages_proto_rawDesc = nil
	file_market_messages_proto_goTypes = nil
	file_market_messages_proto_depIdxs = nil
}
