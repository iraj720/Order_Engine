// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: warehouse/admin.service.proto

package warehouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	commons "rabex/api/pb/commons"
	transaction "rabex/api/pb/warehouse/transaction"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminOperationsClient is the client API for AdminOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminOperationsClient interface {
	SearchFiatDeposits(ctx context.Context, in *SearchFiatDepositsRequest, opts ...grpc.CallOption) (*SearchFiatDepositsResponse, error)
	DepositDetails(ctx context.Context, in *transaction.Request, opts ...grpc.CallOption) (*TransactionDetailsResponse, error)
	ManualFiatDeposit(ctx context.Context, in *ManualFiatDeposit, opts ...grpc.CallOption) (*WarehouseReceipt, error)
	TakeActionOnDeposit(ctx context.Context, in *TakeActionDepositRequest, opts ...grpc.CallOption) (*TakeActionDepositResponse, error)
	//  Withdraw
	SearchWithdraw(ctx context.Context, in *SearchFiatWithdrawalsRequest, opts ...grpc.CallOption) (*SearchFiatWithdrawalsResponse, error)
	WithdrawDetails(ctx context.Context, in *transaction.Request, opts ...grpc.CallOption) (*WithdrawalDetailsResponse, error)
	ManualFiatWithdraw(ctx context.Context, in *ManualFiatWithrawalRequest, opts ...grpc.CallOption) (*WarehouseReceipt, error)
	// Search account
	SearchAccount(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error)
	// Create proxy account
	CreateProxyAccount(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error)
	// admin can see all warehouse balance
	// if they have multiple assets, they would see many records
	GetTreasuryBalances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*TreasuryAccounts, error)
	CreateBrokerWarehouseAccount(ctx context.Context, in *BrokerWarehouseAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateBrokerTreasuryAccount(ctx context.Context, in *BrokerTreasuryAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAsset(ctx context.Context, in *NewAsset, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddNetwork(ctx context.Context, in *NewNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAssetNetwork(ctx context.Context, in *NewAssetNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetBrokerAccounts(ctx context.Context, in *BrokersFilter, opts ...grpc.CallOption) (*BrokerAccountsList, error)
	GetAccountsByAsset(ctx context.Context, in *commons.AssetList, opts ...grpc.CallOption) (*TotalAccounts, error)
}

type adminOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminOperationsClient(cc grpc.ClientConnInterface) AdminOperationsClient {
	return &adminOperationsClient{cc}
}

func (c *adminOperationsClient) SearchFiatDeposits(ctx context.Context, in *SearchFiatDepositsRequest, opts ...grpc.CallOption) (*SearchFiatDepositsResponse, error) {
	out := new(SearchFiatDepositsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/SearchFiatDeposits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) DepositDetails(ctx context.Context, in *transaction.Request, opts ...grpc.CallOption) (*TransactionDetailsResponse, error) {
	out := new(TransactionDetailsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/DepositDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) ManualFiatDeposit(ctx context.Context, in *ManualFiatDeposit, opts ...grpc.CallOption) (*WarehouseReceipt, error) {
	out := new(WarehouseReceipt)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/ManualFiatDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) TakeActionOnDeposit(ctx context.Context, in *TakeActionDepositRequest, opts ...grpc.CallOption) (*TakeActionDepositResponse, error) {
	out := new(TakeActionDepositResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/TakeActionOnDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) SearchWithdraw(ctx context.Context, in *SearchFiatWithdrawalsRequest, opts ...grpc.CallOption) (*SearchFiatWithdrawalsResponse, error) {
	out := new(SearchFiatWithdrawalsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/SearchWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) WithdrawDetails(ctx context.Context, in *transaction.Request, opts ...grpc.CallOption) (*WithdrawalDetailsResponse, error) {
	out := new(WithdrawalDetailsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/WithdrawDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) ManualFiatWithdraw(ctx context.Context, in *ManualFiatWithrawalRequest, opts ...grpc.CallOption) (*WarehouseReceipt, error) {
	out := new(WarehouseReceipt)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/ManualFiatWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) SearchAccount(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error) {
	out := new(BalancesResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/SearchAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) CreateProxyAccount(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*BalancesResponse, error) {
	out := new(BalancesResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/CreateProxyAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) GetTreasuryBalances(ctx context.Context, in *BalancesRequest, opts ...grpc.CallOption) (*TreasuryAccounts, error) {
	out := new(TreasuryAccounts)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/GetTreasuryBalances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) CreateBrokerWarehouseAccount(ctx context.Context, in *BrokerWarehouseAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/CreateBrokerWarehouseAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) CreateBrokerTreasuryAccount(ctx context.Context, in *BrokerTreasuryAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/CreateBrokerTreasuryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) AddAsset(ctx context.Context, in *NewAsset, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/AddAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) AddNetwork(ctx context.Context, in *NewNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/AddNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) AddAssetNetwork(ctx context.Context, in *NewAssetNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/AddAssetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) GetBrokerAccounts(ctx context.Context, in *BrokersFilter, opts ...grpc.CallOption) (*BrokerAccountsList, error) {
	out := new(BrokerAccountsList)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/GetBrokerAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminOperationsClient) GetAccountsByAsset(ctx context.Context, in *commons.AssetList, opts ...grpc.CallOption) (*TotalAccounts, error) {
	out := new(TotalAccounts)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.AdminOperations/GetAccountsByAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminOperationsServer is the server API for AdminOperations service.
// All implementations must embed UnimplementedAdminOperationsServer
// for forward compatibility
type AdminOperationsServer interface {
	SearchFiatDeposits(context.Context, *SearchFiatDepositsRequest) (*SearchFiatDepositsResponse, error)
	DepositDetails(context.Context, *transaction.Request) (*TransactionDetailsResponse, error)
	ManualFiatDeposit(context.Context, *ManualFiatDeposit) (*WarehouseReceipt, error)
	TakeActionOnDeposit(context.Context, *TakeActionDepositRequest) (*TakeActionDepositResponse, error)
	//  Withdraw
	SearchWithdraw(context.Context, *SearchFiatWithdrawalsRequest) (*SearchFiatWithdrawalsResponse, error)
	WithdrawDetails(context.Context, *transaction.Request) (*WithdrawalDetailsResponse, error)
	ManualFiatWithdraw(context.Context, *ManualFiatWithrawalRequest) (*WarehouseReceipt, error)
	// Search account
	SearchAccount(context.Context, *BalancesRequest) (*BalancesResponse, error)
	// Create proxy account
	CreateProxyAccount(context.Context, *BalancesRequest) (*BalancesResponse, error)
	// admin can see all warehouse balance
	// if they have multiple assets, they would see many records
	GetTreasuryBalances(context.Context, *BalancesRequest) (*TreasuryAccounts, error)
	CreateBrokerWarehouseAccount(context.Context, *BrokerWarehouseAccountRequest) (*emptypb.Empty, error)
	CreateBrokerTreasuryAccount(context.Context, *BrokerTreasuryAccountRequest) (*emptypb.Empty, error)
	AddAsset(context.Context, *NewAsset) (*emptypb.Empty, error)
	AddNetwork(context.Context, *NewNetwork) (*emptypb.Empty, error)
	AddAssetNetwork(context.Context, *NewAssetNetwork) (*emptypb.Empty, error)
	GetBrokerAccounts(context.Context, *BrokersFilter) (*BrokerAccountsList, error)
	GetAccountsByAsset(context.Context, *commons.AssetList) (*TotalAccounts, error)
	mustEmbedUnimplementedAdminOperationsServer()
}

// UnimplementedAdminOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedAdminOperationsServer struct {
}

func (UnimplementedAdminOperationsServer) SearchFiatDeposits(context.Context, *SearchFiatDepositsRequest) (*SearchFiatDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFiatDeposits not implemented")
}
func (UnimplementedAdminOperationsServer) DepositDetails(context.Context, *transaction.Request) (*TransactionDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositDetails not implemented")
}
func (UnimplementedAdminOperationsServer) ManualFiatDeposit(context.Context, *ManualFiatDeposit) (*WarehouseReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualFiatDeposit not implemented")
}
func (UnimplementedAdminOperationsServer) TakeActionOnDeposit(context.Context, *TakeActionDepositRequest) (*TakeActionDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeActionOnDeposit not implemented")
}
func (UnimplementedAdminOperationsServer) SearchWithdraw(context.Context, *SearchFiatWithdrawalsRequest) (*SearchFiatWithdrawalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWithdraw not implemented")
}
func (UnimplementedAdminOperationsServer) WithdrawDetails(context.Context, *transaction.Request) (*WithdrawalDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawDetails not implemented")
}
func (UnimplementedAdminOperationsServer) ManualFiatWithdraw(context.Context, *ManualFiatWithrawalRequest) (*WarehouseReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualFiatWithdraw not implemented")
}
func (UnimplementedAdminOperationsServer) SearchAccount(context.Context, *BalancesRequest) (*BalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccount not implemented")
}
func (UnimplementedAdminOperationsServer) CreateProxyAccount(context.Context, *BalancesRequest) (*BalancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProxyAccount not implemented")
}
func (UnimplementedAdminOperationsServer) GetTreasuryBalances(context.Context, *BalancesRequest) (*TreasuryAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTreasuryBalances not implemented")
}
func (UnimplementedAdminOperationsServer) CreateBrokerWarehouseAccount(context.Context, *BrokerWarehouseAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerWarehouseAccount not implemented")
}
func (UnimplementedAdminOperationsServer) CreateBrokerTreasuryAccount(context.Context, *BrokerTreasuryAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBrokerTreasuryAccount not implemented")
}
func (UnimplementedAdminOperationsServer) AddAsset(context.Context, *NewAsset) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAsset not implemented")
}
func (UnimplementedAdminOperationsServer) AddNetwork(context.Context, *NewNetwork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetwork not implemented")
}
func (UnimplementedAdminOperationsServer) AddAssetNetwork(context.Context, *NewAssetNetwork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAssetNetwork not implemented")
}
func (UnimplementedAdminOperationsServer) GetBrokerAccounts(context.Context, *BrokersFilter) (*BrokerAccountsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerAccounts not implemented")
}
func (UnimplementedAdminOperationsServer) GetAccountsByAsset(context.Context, *commons.AssetList) (*TotalAccounts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountsByAsset not implemented")
}
func (UnimplementedAdminOperationsServer) mustEmbedUnimplementedAdminOperationsServer() {}

// UnsafeAdminOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminOperationsServer will
// result in compilation errors.
type UnsafeAdminOperationsServer interface {
	mustEmbedUnimplementedAdminOperationsServer()
}

func RegisterAdminOperationsServer(s grpc.ServiceRegistrar, srv AdminOperationsServer) {
	s.RegisterService(&AdminOperations_ServiceDesc, srv)
}

func _AdminOperations_SearchFiatDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFiatDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).SearchFiatDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/SearchFiatDeposits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).SearchFiatDeposits(ctx, req.(*SearchFiatDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_DepositDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).DepositDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/DepositDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).DepositDetails(ctx, req.(*transaction.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_ManualFiatDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualFiatDeposit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).ManualFiatDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/ManualFiatDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).ManualFiatDeposit(ctx, req.(*ManualFiatDeposit))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_TakeActionOnDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeActionDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).TakeActionOnDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/TakeActionOnDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).TakeActionOnDeposit(ctx, req.(*TakeActionDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_SearchWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchFiatWithdrawalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).SearchWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/SearchWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).SearchWithdraw(ctx, req.(*SearchFiatWithdrawalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_WithdrawDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(transaction.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).WithdrawDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/WithdrawDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).WithdrawDetails(ctx, req.(*transaction.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_ManualFiatWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualFiatWithrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).ManualFiatWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/ManualFiatWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).ManualFiatWithdraw(ctx, req.(*ManualFiatWithrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_SearchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).SearchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/SearchAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).SearchAccount(ctx, req.(*BalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_CreateProxyAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).CreateProxyAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/CreateProxyAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).CreateProxyAccount(ctx, req.(*BalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_GetTreasuryBalances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).GetTreasuryBalances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/GetTreasuryBalances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).GetTreasuryBalances(ctx, req.(*BalancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_CreateBrokerWarehouseAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerWarehouseAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).CreateBrokerWarehouseAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/CreateBrokerWarehouseAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).CreateBrokerWarehouseAccount(ctx, req.(*BrokerWarehouseAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_CreateBrokerTreasuryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokerTreasuryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).CreateBrokerTreasuryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/CreateBrokerTreasuryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).CreateBrokerTreasuryAccount(ctx, req.(*BrokerTreasuryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_AddAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).AddAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/AddAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).AddAsset(ctx, req.(*NewAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_AddNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).AddNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/AddNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).AddNetwork(ctx, req.(*NewNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_AddAssetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAssetNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).AddAssetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/AddAssetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).AddAssetNetwork(ctx, req.(*NewAssetNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_GetBrokerAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BrokersFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).GetBrokerAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/GetBrokerAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).GetBrokerAccounts(ctx, req.(*BrokersFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminOperations_GetAccountsByAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commons.AssetList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminOperationsServer).GetAccountsByAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.AdminOperations/GetAccountsByAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminOperationsServer).GetAccountsByAsset(ctx, req.(*commons.AssetList))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminOperations_ServiceDesc is the grpc.ServiceDesc for AdminOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.warehouse.AdminOperations",
	HandlerType: (*AdminOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchFiatDeposits",
			Handler:    _AdminOperations_SearchFiatDeposits_Handler,
		},
		{
			MethodName: "DepositDetails",
			Handler:    _AdminOperations_DepositDetails_Handler,
		},
		{
			MethodName: "ManualFiatDeposit",
			Handler:    _AdminOperations_ManualFiatDeposit_Handler,
		},
		{
			MethodName: "TakeActionOnDeposit",
			Handler:    _AdminOperations_TakeActionOnDeposit_Handler,
		},
		{
			MethodName: "SearchWithdraw",
			Handler:    _AdminOperations_SearchWithdraw_Handler,
		},
		{
			MethodName: "WithdrawDetails",
			Handler:    _AdminOperations_WithdrawDetails_Handler,
		},
		{
			MethodName: "ManualFiatWithdraw",
			Handler:    _AdminOperations_ManualFiatWithdraw_Handler,
		},
		{
			MethodName: "SearchAccount",
			Handler:    _AdminOperations_SearchAccount_Handler,
		},
		{
			MethodName: "CreateProxyAccount",
			Handler:    _AdminOperations_CreateProxyAccount_Handler,
		},
		{
			MethodName: "GetTreasuryBalances",
			Handler:    _AdminOperations_GetTreasuryBalances_Handler,
		},
		{
			MethodName: "CreateBrokerWarehouseAccount",
			Handler:    _AdminOperations_CreateBrokerWarehouseAccount_Handler,
		},
		{
			MethodName: "CreateBrokerTreasuryAccount",
			Handler:    _AdminOperations_CreateBrokerTreasuryAccount_Handler,
		},
		{
			MethodName: "AddAsset",
			Handler:    _AdminOperations_AddAsset_Handler,
		},
		{
			MethodName: "AddNetwork",
			Handler:    _AdminOperations_AddNetwork_Handler,
		},
		{
			MethodName: "AddAssetNetwork",
			Handler:    _AdminOperations_AddAssetNetwork_Handler,
		},
		{
			MethodName: "GetBrokerAccounts",
			Handler:    _AdminOperations_GetBrokerAccounts_Handler,
		},
		{
			MethodName: "GetAccountsByAsset",
			Handler:    _AdminOperations_GetAccountsByAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse/admin.service.proto",
}
