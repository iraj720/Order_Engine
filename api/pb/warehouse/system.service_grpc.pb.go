// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: warehouse/system.service.proto

package warehouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceOperationsClient is the client API for ServiceOperations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceOperationsClient interface {
	// #####################################
	// CorrectingDeposit (when a service wants to make a straight deposit)
	// #####################################
	MakeCorrectingDeposit(ctx context.Context, in *CorrectingRequest, opts ...grpc.CallOption) (*WarehouseReceipt, error)
	// #####################################
	// When a gateway wants to notify service about status of a deposit
	// #####################################
	VerifyDeposit(ctx context.Context, in *DepositFundsEvent, opts ...grpc.CallOption) (*WarehouseReceipt, error)
	// #####################################
	// When a gateway wants to notify service about status of a withdrawal
	// #####################################
	VerifyWithdraw(ctx context.Context, in *WithdrawEvent, opts ...grpc.CallOption) (*WithdrawResponse, error)
}

type serviceOperationsClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceOperationsClient(cc grpc.ClientConnInterface) ServiceOperationsClient {
	return &serviceOperationsClient{cc}
}

func (c *serviceOperationsClient) MakeCorrectingDeposit(ctx context.Context, in *CorrectingRequest, opts ...grpc.CallOption) (*WarehouseReceipt, error) {
	out := new(WarehouseReceipt)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.ServiceOperations/MakeCorrectingDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceOperationsClient) VerifyDeposit(ctx context.Context, in *DepositFundsEvent, opts ...grpc.CallOption) (*WarehouseReceipt, error) {
	out := new(WarehouseReceipt)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.ServiceOperations/VerifyDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceOperationsClient) VerifyWithdraw(ctx context.Context, in *WithdrawEvent, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.warehouse.ServiceOperations/VerifyWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceOperationsServer is the server API for ServiceOperations service.
// All implementations must embed UnimplementedServiceOperationsServer
// for forward compatibility
type ServiceOperationsServer interface {
	// #####################################
	// CorrectingDeposit (when a service wants to make a straight deposit)
	// #####################################
	MakeCorrectingDeposit(context.Context, *CorrectingRequest) (*WarehouseReceipt, error)
	// #####################################
	// When a gateway wants to notify service about status of a deposit
	// #####################################
	VerifyDeposit(context.Context, *DepositFundsEvent) (*WarehouseReceipt, error)
	// #####################################
	// When a gateway wants to notify service about status of a withdrawal
	// #####################################
	VerifyWithdraw(context.Context, *WithdrawEvent) (*WithdrawResponse, error)
	mustEmbedUnimplementedServiceOperationsServer()
}

// UnimplementedServiceOperationsServer must be embedded to have forward compatible implementations.
type UnimplementedServiceOperationsServer struct {
}

func (UnimplementedServiceOperationsServer) MakeCorrectingDeposit(context.Context, *CorrectingRequest) (*WarehouseReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCorrectingDeposit not implemented")
}
func (UnimplementedServiceOperationsServer) VerifyDeposit(context.Context, *DepositFundsEvent) (*WarehouseReceipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDeposit not implemented")
}
func (UnimplementedServiceOperationsServer) VerifyWithdraw(context.Context, *WithdrawEvent) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyWithdraw not implemented")
}
func (UnimplementedServiceOperationsServer) mustEmbedUnimplementedServiceOperationsServer() {}

// UnsafeServiceOperationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceOperationsServer will
// result in compilation errors.
type UnsafeServiceOperationsServer interface {
	mustEmbedUnimplementedServiceOperationsServer()
}

func RegisterServiceOperationsServer(s grpc.ServiceRegistrar, srv ServiceOperationsServer) {
	s.RegisterService(&ServiceOperations_ServiceDesc, srv)
}

func _ServiceOperations_MakeCorrectingDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CorrectingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceOperationsServer).MakeCorrectingDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.ServiceOperations/MakeCorrectingDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceOperationsServer).MakeCorrectingDeposit(ctx, req.(*CorrectingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceOperations_VerifyDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositFundsEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceOperationsServer).VerifyDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.ServiceOperations/VerifyDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceOperationsServer).VerifyDeposit(ctx, req.(*DepositFundsEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceOperations_VerifyWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceOperationsServer).VerifyWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.warehouse.ServiceOperations/VerifyWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceOperationsServer).VerifyWithdraw(ctx, req.(*WithdrawEvent))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceOperations_ServiceDesc is the grpc.ServiceDesc for ServiceOperations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceOperations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.warehouse.ServiceOperations",
	HandlerType: (*ServiceOperationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeCorrectingDeposit",
			Handler:    _ServiceOperations_MakeCorrectingDeposit_Handler,
		},
		{
			MethodName: "VerifyDeposit",
			Handler:    _ServiceOperations_VerifyDeposit_Handler,
		},
		{
			MethodName: "VerifyWithdraw",
			Handler:    _ServiceOperations_VerifyWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "warehouse/system.service.proto",
}
