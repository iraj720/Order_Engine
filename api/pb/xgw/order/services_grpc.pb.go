// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: xgw/order/services.proto

package order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderApiClient is the client API for OrderApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderApiClient interface {
	MarketBuy(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	MarketSell(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
}

type orderApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderApiClient(cc grpc.ClientConnInterface) OrderApiClient {
	return &orderApiClient{cc}
}

func (c *orderApiClient) MarketBuy(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderApi/MarketBuy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderApiClient) MarketSell(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, "/order.OrderApi/MarketSell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderApiServer is the server API for OrderApi service.
// All implementations must embed UnimplementedOrderApiServer
// for forward compatibility
type OrderApiServer interface {
	MarketBuy(context.Context, *OrderRequest) (*OrderResponse, error)
	MarketSell(context.Context, *OrderRequest) (*OrderResponse, error)
	mustEmbedUnimplementedOrderApiServer()
}

// UnimplementedOrderApiServer must be embedded to have forward compatible implementations.
type UnimplementedOrderApiServer struct {
}

func (UnimplementedOrderApiServer) MarketBuy(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketBuy not implemented")
}
func (UnimplementedOrderApiServer) MarketSell(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSell not implemented")
}
func (UnimplementedOrderApiServer) mustEmbedUnimplementedOrderApiServer() {}

// UnsafeOrderApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderApiServer will
// result in compilation errors.
type UnsafeOrderApiServer interface {
	mustEmbedUnimplementedOrderApiServer()
}

func RegisterOrderApiServer(s grpc.ServiceRegistrar, srv OrderApiServer) {
	s.RegisterService(&OrderApi_ServiceDesc, srv)
}

func _OrderApi_MarketBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).MarketBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderApi/MarketBuy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).MarketBuy(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderApi_MarketSell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderApiServer).MarketSell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderApi/MarketSell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderApiServer).MarketSell(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderApi_ServiceDesc is the grpc.ServiceDesc for OrderApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderApi",
	HandlerType: (*OrderApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MarketBuy",
			Handler:    _OrderApi_MarketBuy_Handler,
		},
		{
			MethodName: "MarketSell",
			Handler:    _OrderApi_MarketSell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xgw/order/services.proto",
}
