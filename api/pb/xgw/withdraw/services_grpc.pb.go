// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: xgw/withdraw/services.proto

package withdraw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WithdrawApiClient is the client API for WithdrawApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WithdrawApiClient interface {
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	WithdrawHistory(ctx context.Context, in *WithdrawHistoryRequest, opts ...grpc.CallOption) (*WithdrawHistoryResponse, error)
}

type withdrawApiClient struct {
	cc grpc.ClientConnInterface
}

func NewWithdrawApiClient(cc grpc.ClientConnInterface) WithdrawApiClient {
	return &withdrawApiClient{cc}
}

func (c *withdrawApiClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/withdraw.WithdrawApi/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *withdrawApiClient) WithdrawHistory(ctx context.Context, in *WithdrawHistoryRequest, opts ...grpc.CallOption) (*WithdrawHistoryResponse, error) {
	out := new(WithdrawHistoryResponse)
	err := c.cc.Invoke(ctx, "/withdraw.WithdrawApi/WithdrawHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WithdrawApiServer is the server API for WithdrawApi service.
// All implementations must embed UnimplementedWithdrawApiServer
// for forward compatibility
type WithdrawApiServer interface {
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	WithdrawHistory(context.Context, *WithdrawHistoryRequest) (*WithdrawHistoryResponse, error)
	mustEmbedUnimplementedWithdrawApiServer()
}

// UnimplementedWithdrawApiServer must be embedded to have forward compatible implementations.
type UnimplementedWithdrawApiServer struct {
}

func (UnimplementedWithdrawApiServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWithdrawApiServer) WithdrawHistory(context.Context, *WithdrawHistoryRequest) (*WithdrawHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawHistory not implemented")
}
func (UnimplementedWithdrawApiServer) mustEmbedUnimplementedWithdrawApiServer() {}

// UnsafeWithdrawApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WithdrawApiServer will
// result in compilation errors.
type UnsafeWithdrawApiServer interface {
	mustEmbedUnimplementedWithdrawApiServer()
}

func RegisterWithdrawApiServer(s grpc.ServiceRegistrar, srv WithdrawApiServer) {
	s.RegisterService(&WithdrawApi_ServiceDesc, srv)
}

func _WithdrawApi_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawApiServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/withdraw.WithdrawApi/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawApiServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WithdrawApi_WithdrawHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WithdrawApiServer).WithdrawHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/withdraw.WithdrawApi/WithdrawHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WithdrawApiServer).WithdrawHistory(ctx, req.(*WithdrawHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WithdrawApi_ServiceDesc is the grpc.ServiceDesc for WithdrawApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WithdrawApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "withdraw.WithdrawApi",
	HandlerType: (*WithdrawApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Withdraw",
			Handler:    _WithdrawApi_Withdraw_Handler,
		},
		{
			MethodName: "WithdrawHistory",
			Handler:    _WithdrawApi_WithdrawHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xgw/withdraw/services.proto",
}
