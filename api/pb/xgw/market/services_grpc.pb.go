// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: xgw/market/services.proto

package market

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketApiClient is the client API for MarketApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketApiClient interface {
	GetKlineData(ctx context.Context, in *GetKlineDataRequest, opts ...grpc.CallOption) (*GetKlineDataResponse, error)
}

type marketApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketApiClient(cc grpc.ClientConnInterface) MarketApiClient {
	return &marketApiClient{cc}
}

func (c *marketApiClient) GetKlineData(ctx context.Context, in *GetKlineDataRequest, opts ...grpc.CallOption) (*GetKlineDataResponse, error) {
	out := new(GetKlineDataResponse)
	err := c.cc.Invoke(ctx, "/market.MarketApi/GetKlineData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketApiServer is the server API for MarketApi service.
// All implementations must embed UnimplementedMarketApiServer
// for forward compatibility
type MarketApiServer interface {
	GetKlineData(context.Context, *GetKlineDataRequest) (*GetKlineDataResponse, error)
	mustEmbedUnimplementedMarketApiServer()
}

// UnimplementedMarketApiServer must be embedded to have forward compatible implementations.
type UnimplementedMarketApiServer struct {
}

func (UnimplementedMarketApiServer) GetKlineData(context.Context, *GetKlineDataRequest) (*GetKlineDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKlineData not implemented")
}
func (UnimplementedMarketApiServer) mustEmbedUnimplementedMarketApiServer() {}

// UnsafeMarketApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketApiServer will
// result in compilation errors.
type UnsafeMarketApiServer interface {
	mustEmbedUnimplementedMarketApiServer()
}

func RegisterMarketApiServer(s grpc.ServiceRegistrar, srv MarketApiServer) {
	s.RegisterService(&MarketApi_ServiceDesc, srv)
}

func _MarketApi_GetKlineData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKlineDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketApiServer).GetKlineData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/market.MarketApi/GetKlineData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketApiServer).GetKlineData(ctx, req.(*GetKlineDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketApi_ServiceDesc is the grpc.ServiceDesc for MarketApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "market.MarketApi",
	HandlerType: (*MarketApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKlineData",
			Handler:    _MarketApi_GetKlineData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "xgw/market/services.proto",
}
