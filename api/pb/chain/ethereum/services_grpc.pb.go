// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: chain/ethereum/services.proto

package ethereum

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	chain "rabex/api/pb/chain"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EthereumClient is the client API for Ethereum service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EthereumClient interface {
	ListenNetworkEvents(ctx context.Context, in *chain.NetworkSubscription, opts ...grpc.CallOption) (Ethereum_ListenNetworkEventsClient, error)
}

type ethereumClient struct {
	cc grpc.ClientConnInterface
}

func NewEthereumClient(cc grpc.ClientConnInterface) EthereumClient {
	return &ethereumClient{cc}
}

func (c *ethereumClient) ListenNetworkEvents(ctx context.Context, in *chain.NetworkSubscription, opts ...grpc.CallOption) (Ethereum_ListenNetworkEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ethereum_ServiceDesc.Streams[0], "/rabex.api.chain.ethereum.Ethereum/ListenNetworkEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &ethereumListenNetworkEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ethereum_ListenNetworkEventsClient interface {
	Recv() (*chain.NetworkEvent, error)
	grpc.ClientStream
}

type ethereumListenNetworkEventsClient struct {
	grpc.ClientStream
}

func (x *ethereumListenNetworkEventsClient) Recv() (*chain.NetworkEvent, error) {
	m := new(chain.NetworkEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EthereumServer is the server API for Ethereum service.
// All implementations must embed UnimplementedEthereumServer
// for forward compatibility
type EthereumServer interface {
	ListenNetworkEvents(*chain.NetworkSubscription, Ethereum_ListenNetworkEventsServer) error
	mustEmbedUnimplementedEthereumServer()
}

// UnimplementedEthereumServer must be embedded to have forward compatible implementations.
type UnimplementedEthereumServer struct {
}

func (UnimplementedEthereumServer) ListenNetworkEvents(*chain.NetworkSubscription, Ethereum_ListenNetworkEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListenNetworkEvents not implemented")
}
func (UnimplementedEthereumServer) mustEmbedUnimplementedEthereumServer() {}

// UnsafeEthereumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EthereumServer will
// result in compilation errors.
type UnsafeEthereumServer interface {
	mustEmbedUnimplementedEthereumServer()
}

func RegisterEthereumServer(s grpc.ServiceRegistrar, srv EthereumServer) {
	s.RegisterService(&Ethereum_ServiceDesc, srv)
}

func _Ethereum_ListenNetworkEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(chain.NetworkSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EthereumServer).ListenNetworkEvents(m, &ethereumListenNetworkEventsServer{stream})
}

type Ethereum_ListenNetworkEventsServer interface {
	Send(*chain.NetworkEvent) error
	grpc.ServerStream
}

type ethereumListenNetworkEventsServer struct {
	grpc.ServerStream
}

func (x *ethereumListenNetworkEventsServer) Send(m *chain.NetworkEvent) error {
	return x.ServerStream.SendMsg(m)
}

// Ethereum_ServiceDesc is the grpc.ServiceDesc for Ethereum service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ethereum_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.chain.ethereum.Ethereum",
	HandlerType: (*EthereumServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListenNetworkEvents",
			Handler:       _Ethereum_ListenNetworkEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chain/ethereum/services.proto",
}
