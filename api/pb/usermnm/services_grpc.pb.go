// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: usermnm/services.proto

package usermnm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserManagementClient is the client API for UserManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagementClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	FilterUser(ctx context.Context, in *FilterUserRequest, opts ...grpc.CallOption) (*FilterUserResponse, error)
	GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	GetUserSettingsByUserId(ctx context.Context, in *GetUserSettingsByUserIdRequest, opts ...grpc.CallOption) (*AddUserSettingsResponse, error)
	UpdateUserSettings(ctx context.Context, in *UpdateUserSettingsRequest, opts ...grpc.CallOption) (*AddUserSettingsResponse, error)
	ChangeUserFlag(ctx context.Context, in *UpdateUserFlagRequest, opts ...grpc.CallOption) (*AddUserSettingsResponse, error)
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
	UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
	AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error)
	GetRoleByUserId(ctx context.Context, in *GetRoleByUserIdRequest, opts ...grpc.CallOption) (*GetRoleByUserIdResponse, error)
	SelectAllRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelectAllRoleResponse, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	//Permission
	AddPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*PermissionResponse, error)
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error)
	SelectAllPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllPermissionResponse, error)
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error)
	FilterPermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*AllPermissionResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	ResetToken(ctx context.Context, in *ResetTokenRequest, opts ...grpc.CallOption) (*ResetTokenResponse, error)
	ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error)
	UserActivityPerDevice(ctx context.Context, in *UserActivityPerDeviceRequest, opts ...grpc.CallOption) (*UserActivityPerDeviceResponse, error)
	UserActivityPerDeviceUser(ctx context.Context, in *UserActivityPerDeviceUserRequest, opts ...grpc.CallOption) (*UserActivityPerUserDeviceResponse, error)
	CountOfChildRefferal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountOfChildRefferalResponse, error)
	SendForgetPasswordCode(ctx context.Context, in *SendForgetPasswordCodeRequest, opts ...grpc.CallOption) (*SendForgetPasswordCodeResponse, error)
	VerifyForgetPasswordCode(ctx context.Context, in *VerifyForgetPasswordCodeRequest, opts ...grpc.CallOption) (*SendForgetPasswordCodeResponse, error)
	ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, opts ...grpc.CallOption) (*ForgetPasswordResponse, error)
	VerifyRegister(ctx context.Context, in *VerifyRegisterRequest, opts ...grpc.CallOption) (*VerifyRegisterResponse, error)
	AddBasicInfo(ctx context.Context, in *BasicInfoRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	UpdateBasicInfo(ctx context.Context, in *BasicInfoRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	GetUserKYCData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	ChangeBasicInfoState(ctx context.Context, in *ChangeBasicInfoRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	//bank account
	AddCardAdmin(ctx context.Context, in *AddCardAdminRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	AddIbanAdmin(ctx context.Context, in *AddIbanAdminRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	AddUserBankAccountCard(ctx context.Context, in *AddUserBankAccountCardRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	GetWatingForAdminBankAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWatingForAdminBankAccountResponse, error)
	UpdateBankAccountStatus(ctx context.Context, in *UpdateBankAccountStatusRequest, opts ...grpc.CallOption) (*UpdateBankAccountStatusResponse, error)
	UpdateBankAccountByUser(ctx context.Context, in *UpdateBankAccountByUserRequest, opts ...grpc.CallOption) (*UpdateBankAccountByUserResponse, error)
	UpdateUserBankAccountCard(ctx context.Context, in *UpdateUserBankAccountCardRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	UpdateUserBankAccountIBAN(ctx context.Context, in *UpdateUserBankAccountIBANRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	GetBankAccountByUserId(ctx context.Context, in *GetBankAccountByUserIdRequest, opts ...grpc.CallOption) (*GetByUserIdBankAccountResponse, error)
	DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error)
	AddUserBankAccountIBAN(ctx context.Context, in *AddUserBankAccountIBANRequest, opts ...grpc.CallOption) (*BankAccountResponse, error)
	//userComment
	GetUserCommentByUserId(ctx context.Context, in *GetUserCommentByUserIdRequest, opts ...grpc.CallOption) (*GetUserCommentByUserIdResponse, error)
	AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error)
	DeleteUserComment(ctx context.Context, in *DeleteUserCommentRequest, opts ...grpc.CallOption) (*DeleteUserCommentResponse, error)
	VerifyDocument(ctx context.Context, in *VerifyDocumentRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	VerifyIban(ctx context.Context, in *VerifyIbanRequest, opts ...grpc.CallOption) (*VerifyIbanResponse, error)
	VerifyCardBank(ctx context.Context, in *VerifyCardNumberRequest, opts ...grpc.CallOption) (*VerifyCardNumberResponse, error)
	AdminLoginHistory(ctx context.Context, in *AdminLoginHistoryRequest, opts ...grpc.CallOption) (*AdminLoginHistoryResponse, error)
	UserLoginHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserLoginHistoryResponse, error)
	GetUserByIP(ctx context.Context, in *GetUserByIPRequest, opts ...grpc.CallOption) (*GetUserByIPResponse, error)
	GetReferralDataById(ctx context.Context, in *GetUserReferralByIdRequest, opts ...grpc.CallOption) (*GetUserReferralByIdResponse, error)
	GetUserChildReferralById(ctx context.Context, in *GetUserReferralByIdRequest, opts ...grpc.CallOption) (*ReferralUserResponse, error)
	GetListOfUserDevicesByAdmin(ctx context.Context, in *GetListOfUserDevicesByAdminRequest, opts ...grpc.CallOption) (*GetListOfUserDevicesByAdminResponse, error)
	GetListOfUserDevicesByUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListOfUserDevicesByUserResponse, error)
	RevokeUser(ctx context.Context, in *RevokeUserRequest, opts ...grpc.CallOption) (*RevokeUserResponse, error)
	LogOutByDevice(ctx context.Context, in *LogOutByDeviceRequest, opts ...grpc.CallOption) (*LogOutByDeviceResponse, error)
	LogOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogOutResponse, error)
	EditUserById(ctx context.Context, in *EditUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error)
	GetUserBankAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserBankAccountResponse, error)
	VerifyMFA(ctx context.Context, in *VerifyMFARequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error)
	SendMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ActiveEmailMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error)
	VerifyEmailMFAActivation(ctx context.Context, in *VerifyMFAActivationRequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error)
	ActiveSMSMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error)
	VerifySMSMFAActivation(ctx context.Context, in *VerifyMFAActivationRequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error)
	ActiveGAMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error)
	VerifyGAMFAActivation(ctx context.Context, in *VerifyMFAActivationRequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error)
	ResendMFAActivationCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error)
	RemoveReferralById(ctx context.Context, in *RemoveParentReferralRequest, opts ...grpc.CallOption) (*RemoveParentReferralResponse, error)
	ChangeKycStatus(ctx context.Context, in *ChangeKycStatusRequest, opts ...grpc.CallOption) (*ChangeKycStatusResponse, error)
	GetKycList(ctx context.Context, in *GetAllUsersKycRequest, opts ...grpc.CallOption) (*GetAllUsersKycResponse, error)
	AssignKycToAdmin(ctx context.Context, in *AssignKycToAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValidateBasicInfo(ctx context.Context, in *ValidateBasicInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetValidatedBasicInfo(ctx context.Context, in *ValidateBasicInfoRequest, opts ...grpc.CallOption) (*GetValidatedBasicInfoResponse, error)
	GetValidatedCardBank(ctx context.Context, in *ValidateBankCardRequest, opts ...grpc.CallOption) (*ValidatedBankCardResponse, error)
	GetValidatedIban(ctx context.Context, in *ValidateBankCardRequest, opts ...grpc.CallOption) (*ValidatedIbanResponse, error)
	ResendRegisterSMS(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResendRegisterSMSResponse, error)
	ChangeKycAllStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChangeKycAllStatusResponse, error)
	CallLandLineNumber(ctx context.Context, in *CallLandLineNumberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	VerifyLandLineNumber(ctx context.Context, in *VerifyLandLineNumberRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	VerifyLandLineNumberByAdmin(ctx context.Context, in *VerifyLandLineNumberByAdminRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	ChangeKYCStatusAll(ctx context.Context, in *ChangeKYCStatusAllRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error)
	AssignKycToMe(ctx context.Context, in *AssignKycToMeRequest, opts ...grpc.CallOption) (*AssignKycToMeResponse, error)
	RevokeAdminKyc(ctx context.Context, in *RevokeAdminKycRequest, opts ...grpc.CallOption) (*RevokeAdminKycResponse, error)
	RetryCheckCardAndIban(ctx context.Context, in *RetryCheckCardAndIbanRequest, opts ...grpc.CallOption) (*RetryCheckCardAndIbanResponse, error)
	ListCardsAndIban(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCardsAndIbanResponse, error)
	UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error)
	GetBasicInfo(ctx context.Context, in *GetBasicInfoRequest, opts ...grpc.CallOption) (*GetBasicInfoResponse, error)
	UpdateBasicInfoByAdmin(ctx context.Context, in *UpdateBasicInfoRequest, opts ...grpc.CallOption) (*GetBasicInfoResponse, error)
	ResendForgetPasswordSMS(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResendForgetPasswordSMSResponse, error)
	FlagList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FlagListResponse, error)
	GetRejectionReasons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRejectionReasonsResponse, error)
	AddParentReferralById(ctx context.Context, in *AddParentReferralRequest, opts ...grpc.CallOption) (*AddParentReferralResponse, error)
	GetALLAdmin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetALLAdminResponse, error)
	// user management  sanity
	IbanSanity(ctx context.Context, in *IbanSanityRequest, opts ...grpc.CallOption) (*IbanSanityResponse, error)
	CardSanity(ctx context.Context, in *CardSanityRequest, opts ...grpc.CallOption) (*CardSanityResponse, error)
	GetUserSanity(ctx context.Context, in *GetUserSanityRequest, opts ...grpc.CallOption) (*GetUserSanityResponse, error)
	FilterUserSanity(ctx context.Context, in *FilterUserSanityRequest, opts ...grpc.CallOption) (*FilterUserSanityResponse, error)
	GetRefererInfoSanity(ctx context.Context, in *GetRefererInfoSanityRequest, opts ...grpc.CallOption) (*GetRefererInfoSanityResponse, error)
	// (SYSTEM) get address returns user data
	GetUserByAddress(ctx context.Context, in *GetUserByAddressRequest, opts ...grpc.CallOption) (*GetUserByAddressResponse, error)
	// (SYSTEM) get memo returns user data
	GetUserByMemo(ctx context.Context, in *GetUserByMemoRequest, opts ...grpc.CallOption) (*GetUserByMemoResponse, error)
	// (USER) get asset va network returns address va memo
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error)
	// (ADMIN) get user id  returns users address and memo
	GetAddressByUserID(ctx context.Context, in *GetAddressByUserIDRequest, opts ...grpc.CallOption) (*GetAddressByUserIDResponse, error)
	// (ADMIN) GetAndroidConfig returns force_update  and  optional_update
	GetAndroidConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAndroidConfigResponse, error)
	// (ADMIN) UpdateAndroidConfig set force_update  and  optional_update returns force_update  and  optional_update
	UpdateAndroidConfig(ctx context.Context, in *UpdateAndroidConfigRequest, opts ...grpc.CallOption) (*UpdateAndroidConfigResponse, error)
	// (SYSTEM) DoesAddressBelongsToRabex get address  returns error if address does not belong to rabex
	DoesAddressBelongsToRabex(ctx context.Context, in *DoesAddressBelongsToRabexRequest, opts ...grpc.CallOption) (*DoesAddressBelongsToRabexResponse, error)
}

type userManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagementClient(cc grpc.ClientConnInterface) UserManagementClient {
	return &userManagementClient{cc}
}

func (c *userManagementClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) FilterUser(ctx context.Context, in *FilterUserRequest, opts ...grpc.CallOption) (*FilterUserResponse, error) {
	out := new(FilterUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/FilterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserById(ctx context.Context, in *GetUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	out := new(GetUserByIdResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserSettingsByUserId(ctx context.Context, in *GetUserSettingsByUserIdRequest, opts ...grpc.CallOption) (*AddUserSettingsResponse, error) {
	out := new(AddUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserSettingsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateUserSettings(ctx context.Context, in *UpdateUserSettingsRequest, opts ...grpc.CallOption) (*AddUserSettingsResponse, error) {
	out := new(AddUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateUserSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ChangeUserFlag(ctx context.Context, in *UpdateUserFlagRequest, opts ...grpc.CallOption) (*AddUserSettingsResponse, error) {
	out := new(AddUserSettingsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ChangeUserFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateGroup(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddRole(ctx context.Context, in *AddRoleRequest, opts ...grpc.CallOption) (*AddRoleResponse, error) {
	out := new(AddRoleResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*UpdateRoleResponse, error) {
	out := new(UpdateRoleResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetRoleByUserId(ctx context.Context, in *GetRoleByUserIdRequest, opts ...grpc.CallOption) (*GetRoleByUserIdResponse, error) {
	out := new(GetRoleByUserIdResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetRoleByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) SelectAllRole(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SelectAllRoleResponse, error) {
	out := new(SelectAllRoleResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/SelectAllRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddPermission(ctx context.Context, in *Permission, opts ...grpc.CallOption) (*PermissionResponse, error) {
	out := new(PermissionResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*PermissionResponse, error) {
	out := new(PermissionResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdatePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) SelectAllPermission(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllPermissionResponse, error) {
	out := new(AllPermissionResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/SelectAllPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*DeletePermissionResponse, error) {
	out := new(DeletePermissionResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/DeletePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) FilterPermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*AllPermissionResponse, error) {
	out := new(AllPermissionResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/FilterPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ResetToken(ctx context.Context, in *ResetTokenRequest, opts ...grpc.CallOption) (*ResetTokenResponse, error) {
	out := new(ResetTokenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ResetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ResetPassword(ctx context.Context, in *ResetPasswordRequest, opts ...grpc.CallOption) (*ResetPasswordResponse, error) {
	out := new(ResetPasswordResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UserActivityPerDevice(ctx context.Context, in *UserActivityPerDeviceRequest, opts ...grpc.CallOption) (*UserActivityPerDeviceResponse, error) {
	out := new(UserActivityPerDeviceResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UserActivityPerDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UserActivityPerDeviceUser(ctx context.Context, in *UserActivityPerDeviceUserRequest, opts ...grpc.CallOption) (*UserActivityPerUserDeviceResponse, error) {
	out := new(UserActivityPerUserDeviceResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UserActivityPerDeviceUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) CountOfChildRefferal(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountOfChildRefferalResponse, error) {
	out := new(CountOfChildRefferalResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/CountOfChildRefferal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) SendForgetPasswordCode(ctx context.Context, in *SendForgetPasswordCodeRequest, opts ...grpc.CallOption) (*SendForgetPasswordCodeResponse, error) {
	out := new(SendForgetPasswordCodeResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/SendForgetPasswordCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyForgetPasswordCode(ctx context.Context, in *VerifyForgetPasswordCodeRequest, opts ...grpc.CallOption) (*SendForgetPasswordCodeResponse, error) {
	out := new(SendForgetPasswordCodeResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyForgetPasswordCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ForgetPassword(ctx context.Context, in *ForgetPasswordRequest, opts ...grpc.CallOption) (*ForgetPasswordResponse, error) {
	out := new(ForgetPasswordResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ForgetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyRegister(ctx context.Context, in *VerifyRegisterRequest, opts ...grpc.CallOption) (*VerifyRegisterResponse, error) {
	out := new(VerifyRegisterResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddBasicInfo(ctx context.Context, in *BasicInfoRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateBasicInfo(ctx context.Context, in *BasicInfoRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserKYCData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserKYCData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ChangeBasicInfoState(ctx context.Context, in *ChangeBasicInfoRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ChangeBasicInfoState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddCardAdmin(ctx context.Context, in *AddCardAdminRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddCardAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddIbanAdmin(ctx context.Context, in *AddIbanAdminRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddIbanAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddUserBankAccountCard(ctx context.Context, in *AddUserBankAccountCardRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddUserBankAccountCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetWatingForAdminBankAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetWatingForAdminBankAccountResponse, error) {
	out := new(GetWatingForAdminBankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetWatingForAdminBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateBankAccountStatus(ctx context.Context, in *UpdateBankAccountStatusRequest, opts ...grpc.CallOption) (*UpdateBankAccountStatusResponse, error) {
	out := new(UpdateBankAccountStatusResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateBankAccountStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateBankAccountByUser(ctx context.Context, in *UpdateBankAccountByUserRequest, opts ...grpc.CallOption) (*UpdateBankAccountByUserResponse, error) {
	out := new(UpdateBankAccountByUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateBankAccountByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateUserBankAccountCard(ctx context.Context, in *UpdateUserBankAccountCardRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateUserBankAccountCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateUserBankAccountIBAN(ctx context.Context, in *UpdateUserBankAccountIBANRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateUserBankAccountIBAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetBankAccountByUserId(ctx context.Context, in *GetBankAccountByUserIdRequest, opts ...grpc.CallOption) (*GetByUserIdBankAccountResponse, error) {
	out := new(GetByUserIdBankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetBankAccountByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) DeleteBankAccount(ctx context.Context, in *DeleteBankAccountRequest, opts ...grpc.CallOption) (*DeleteBankAccountResponse, error) {
	out := new(DeleteBankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/DeleteBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddUserBankAccountIBAN(ctx context.Context, in *AddUserBankAccountIBANRequest, opts ...grpc.CallOption) (*BankAccountResponse, error) {
	out := new(BankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddUserBankAccountIBAN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserCommentByUserId(ctx context.Context, in *GetUserCommentByUserIdRequest, opts ...grpc.CallOption) (*GetUserCommentByUserIdResponse, error) {
	out := new(GetUserCommentByUserIdResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserCommentByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddUserComment(ctx context.Context, in *AddUserCommentRequest, opts ...grpc.CallOption) (*AddUserCommentResponse, error) {
	out := new(AddUserCommentResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddUserComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) DeleteUserComment(ctx context.Context, in *DeleteUserCommentRequest, opts ...grpc.CallOption) (*DeleteUserCommentResponse, error) {
	out := new(DeleteUserCommentResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/DeleteUserComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyDocument(ctx context.Context, in *VerifyDocumentRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyDocument", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyIban(ctx context.Context, in *VerifyIbanRequest, opts ...grpc.CallOption) (*VerifyIbanResponse, error) {
	out := new(VerifyIbanResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyIban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyCardBank(ctx context.Context, in *VerifyCardNumberRequest, opts ...grpc.CallOption) (*VerifyCardNumberResponse, error) {
	out := new(VerifyCardNumberResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyCardBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AdminLoginHistory(ctx context.Context, in *AdminLoginHistoryRequest, opts ...grpc.CallOption) (*AdminLoginHistoryResponse, error) {
	out := new(AdminLoginHistoryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AdminLoginHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UserLoginHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserLoginHistoryResponse, error) {
	out := new(UserLoginHistoryResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UserLoginHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserByIP(ctx context.Context, in *GetUserByIPRequest, opts ...grpc.CallOption) (*GetUserByIPResponse, error) {
	out := new(GetUserByIPResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserByIP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetReferralDataById(ctx context.Context, in *GetUserReferralByIdRequest, opts ...grpc.CallOption) (*GetUserReferralByIdResponse, error) {
	out := new(GetUserReferralByIdResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetReferralDataById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserChildReferralById(ctx context.Context, in *GetUserReferralByIdRequest, opts ...grpc.CallOption) (*ReferralUserResponse, error) {
	out := new(ReferralUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserChildReferralById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetListOfUserDevicesByAdmin(ctx context.Context, in *GetListOfUserDevicesByAdminRequest, opts ...grpc.CallOption) (*GetListOfUserDevicesByAdminResponse, error) {
	out := new(GetListOfUserDevicesByAdminResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetListOfUserDevicesByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetListOfUserDevicesByUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetListOfUserDevicesByUserResponse, error) {
	out := new(GetListOfUserDevicesByUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetListOfUserDevicesByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) RevokeUser(ctx context.Context, in *RevokeUserRequest, opts ...grpc.CallOption) (*RevokeUserResponse, error) {
	out := new(RevokeUserResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/RevokeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) LogOutByDevice(ctx context.Context, in *LogOutByDeviceRequest, opts ...grpc.CallOption) (*LogOutByDeviceResponse, error) {
	out := new(LogOutByDeviceResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/LogOutByDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) LogOut(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogOutResponse, error) {
	out := new(LogOutResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) EditUserById(ctx context.Context, in *EditUserByIdRequest, opts ...grpc.CallOption) (*GetUserByIdResponse, error) {
	out := new(GetUserByIdResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/EditUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserBankAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserBankAccountResponse, error) {
	out := new(UserBankAccountResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserBankAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyMFA(ctx context.Context, in *VerifyMFARequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error) {
	out := new(VerifyMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyMFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) SendMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/SendMFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ActiveEmailMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error) {
	out := new(ActiveMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ActiveEmailMFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyEmailMFAActivation(ctx context.Context, in *VerifyMFAActivationRequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error) {
	out := new(VerifyMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyEmailMFAActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ActiveSMSMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error) {
	out := new(ActiveMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ActiveSMSMFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifySMSMFAActivation(ctx context.Context, in *VerifyMFAActivationRequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error) {
	out := new(VerifyMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifySMSMFAActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ActiveGAMFA(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error) {
	out := new(ActiveMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ActiveGAMFA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyGAMFAActivation(ctx context.Context, in *VerifyMFAActivationRequest, opts ...grpc.CallOption) (*VerifyMFAResponse, error) {
	out := new(VerifyMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyGAMFAActivation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ResendMFAActivationCode(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ActiveMFAResponse, error) {
	out := new(ActiveMFAResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ResendMFAActivationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) RemoveReferralById(ctx context.Context, in *RemoveParentReferralRequest, opts ...grpc.CallOption) (*RemoveParentReferralResponse, error) {
	out := new(RemoveParentReferralResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/RemoveReferralById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ChangeKycStatus(ctx context.Context, in *ChangeKycStatusRequest, opts ...grpc.CallOption) (*ChangeKycStatusResponse, error) {
	out := new(ChangeKycStatusResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ChangeKycStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetKycList(ctx context.Context, in *GetAllUsersKycRequest, opts ...grpc.CallOption) (*GetAllUsersKycResponse, error) {
	out := new(GetAllUsersKycResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetKycList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AssignKycToAdmin(ctx context.Context, in *AssignKycToAdminRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AssignKycToAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ValidateAddress(ctx context.Context, in *ValidateAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ValidateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ValidateBasicInfo(ctx context.Context, in *ValidateBasicInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ValidateBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetValidatedBasicInfo(ctx context.Context, in *ValidateBasicInfoRequest, opts ...grpc.CallOption) (*GetValidatedBasicInfoResponse, error) {
	out := new(GetValidatedBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetValidatedBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetValidatedCardBank(ctx context.Context, in *ValidateBankCardRequest, opts ...grpc.CallOption) (*ValidatedBankCardResponse, error) {
	out := new(ValidatedBankCardResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetValidatedCardBank", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetValidatedIban(ctx context.Context, in *ValidateBankCardRequest, opts ...grpc.CallOption) (*ValidatedIbanResponse, error) {
	out := new(ValidatedIbanResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetValidatedIban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ResendRegisterSMS(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResendRegisterSMSResponse, error) {
	out := new(ResendRegisterSMSResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ResendRegisterSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ChangeKycAllStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChangeKycAllStatusResponse, error) {
	out := new(ChangeKycAllStatusResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ChangeKycAllStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) CallLandLineNumber(ctx context.Context, in *CallLandLineNumberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/CallLandLineNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyLandLineNumber(ctx context.Context, in *VerifyLandLineNumberRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyLandLineNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) VerifyLandLineNumberByAdmin(ctx context.Context, in *VerifyLandLineNumberByAdminRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/VerifyLandLineNumberByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ChangeKYCStatusAll(ctx context.Context, in *ChangeKYCStatusAllRequest, opts ...grpc.CallOption) (*KYCInfoResponse, error) {
	out := new(KYCInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ChangeKYCStatusAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AssignKycToMe(ctx context.Context, in *AssignKycToMeRequest, opts ...grpc.CallOption) (*AssignKycToMeResponse, error) {
	out := new(AssignKycToMeResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AssignKycToMe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) RevokeAdminKyc(ctx context.Context, in *RevokeAdminKycRequest, opts ...grpc.CallOption) (*RevokeAdminKycResponse, error) {
	out := new(RevokeAdminKycResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/RevokeAdminKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) RetryCheckCardAndIban(ctx context.Context, in *RetryCheckCardAndIbanRequest, opts ...grpc.CallOption) (*RetryCheckCardAndIbanResponse, error) {
	out := new(RetryCheckCardAndIbanResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/RetryCheckCardAndIban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ListCardsAndIban(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListCardsAndIbanResponse, error) {
	out := new(ListCardsAndIbanResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ListCardsAndIban", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateAddress(ctx context.Context, in *UpdateAddressRequest, opts ...grpc.CallOption) (*UpdateAddressResponse, error) {
	out := new(UpdateAddressResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetBasicInfo(ctx context.Context, in *GetBasicInfoRequest, opts ...grpc.CallOption) (*GetBasicInfoResponse, error) {
	out := new(GetBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetBasicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateBasicInfoByAdmin(ctx context.Context, in *UpdateBasicInfoRequest, opts ...grpc.CallOption) (*GetBasicInfoResponse, error) {
	out := new(GetBasicInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateBasicInfoByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) ResendForgetPasswordSMS(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResendForgetPasswordSMSResponse, error) {
	out := new(ResendForgetPasswordSMSResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/ResendForgetPasswordSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) FlagList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*FlagListResponse, error) {
	out := new(FlagListResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/FlagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetRejectionReasons(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRejectionReasonsResponse, error) {
	out := new(GetRejectionReasonsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetRejectionReasons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) AddParentReferralById(ctx context.Context, in *AddParentReferralRequest, opts ...grpc.CallOption) (*AddParentReferralResponse, error) {
	out := new(AddParentReferralResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/AddParentReferralById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetALLAdmin(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetALLAdminResponse, error) {
	out := new(GetALLAdminResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetALLAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) IbanSanity(ctx context.Context, in *IbanSanityRequest, opts ...grpc.CallOption) (*IbanSanityResponse, error) {
	out := new(IbanSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/IbanSanity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) CardSanity(ctx context.Context, in *CardSanityRequest, opts ...grpc.CallOption) (*CardSanityResponse, error) {
	out := new(CardSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/CardSanity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserSanity(ctx context.Context, in *GetUserSanityRequest, opts ...grpc.CallOption) (*GetUserSanityResponse, error) {
	out := new(GetUserSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserSanity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) FilterUserSanity(ctx context.Context, in *FilterUserSanityRequest, opts ...grpc.CallOption) (*FilterUserSanityResponse, error) {
	out := new(FilterUserSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/FilterUserSanity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetRefererInfoSanity(ctx context.Context, in *GetRefererInfoSanityRequest, opts ...grpc.CallOption) (*GetRefererInfoSanityResponse, error) {
	out := new(GetRefererInfoSanityResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetRefererInfoSanity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserByAddress(ctx context.Context, in *GetUserByAddressRequest, opts ...grpc.CallOption) (*GetUserByAddressResponse, error) {
	out := new(GetUserByAddressResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetUserByMemo(ctx context.Context, in *GetUserByMemoRequest, opts ...grpc.CallOption) (*GetUserByMemoResponse, error) {
	out := new(GetUserByMemoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetUserByMemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*GetAddressResponse, error) {
	out := new(GetAddressResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetAddressByUserID(ctx context.Context, in *GetAddressByUserIDRequest, opts ...grpc.CallOption) (*GetAddressByUserIDResponse, error) {
	out := new(GetAddressByUserIDResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetAddressByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) GetAndroidConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAndroidConfigResponse, error) {
	out := new(GetAndroidConfigResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/GetAndroidConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) UpdateAndroidConfig(ctx context.Context, in *UpdateAndroidConfigRequest, opts ...grpc.CallOption) (*UpdateAndroidConfigResponse, error) {
	out := new(UpdateAndroidConfigResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/UpdateAndroidConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagementClient) DoesAddressBelongsToRabex(ctx context.Context, in *DoesAddressBelongsToRabexRequest, opts ...grpc.CallOption) (*DoesAddressBelongsToRabexResponse, error) {
	out := new(DoesAddressBelongsToRabexResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.usermnm.UserManagement/DoesAddressBelongsToRabex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagementServer is the server API for UserManagement service.
// All implementations must embed UnimplementedUserManagementServer
// for forward compatibility
type UserManagementServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	FilterUser(context.Context, *FilterUserRequest) (*FilterUserResponse, error)
	GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error)
	GetUserSettingsByUserId(context.Context, *GetUserSettingsByUserIdRequest) (*AddUserSettingsResponse, error)
	UpdateUserSettings(context.Context, *UpdateUserSettingsRequest) (*AddUserSettingsResponse, error)
	ChangeUserFlag(context.Context, *UpdateUserFlagRequest) (*AddUserSettingsResponse, error)
	AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error)
	UpdateGroup(context.Context, *UpdateGroupRequest) (*AddGroupResponse, error)
	AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error)
	GetRoleByUserId(context.Context, *GetRoleByUserIdRequest) (*GetRoleByUserIdResponse, error)
	SelectAllRole(context.Context, *emptypb.Empty) (*SelectAllRoleResponse, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	//Permission
	AddPermission(context.Context, *Permission) (*PermissionResponse, error)
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*PermissionResponse, error)
	SelectAllPermission(context.Context, *emptypb.Empty) (*AllPermissionResponse, error)
	DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error)
	FilterPermission(context.Context, *UpdatePermissionRequest) (*AllPermissionResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	ResetToken(context.Context, *ResetTokenRequest) (*ResetTokenResponse, error)
	ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error)
	UserActivityPerDevice(context.Context, *UserActivityPerDeviceRequest) (*UserActivityPerDeviceResponse, error)
	UserActivityPerDeviceUser(context.Context, *UserActivityPerDeviceUserRequest) (*UserActivityPerUserDeviceResponse, error)
	CountOfChildRefferal(context.Context, *emptypb.Empty) (*CountOfChildRefferalResponse, error)
	SendForgetPasswordCode(context.Context, *SendForgetPasswordCodeRequest) (*SendForgetPasswordCodeResponse, error)
	VerifyForgetPasswordCode(context.Context, *VerifyForgetPasswordCodeRequest) (*SendForgetPasswordCodeResponse, error)
	ForgetPassword(context.Context, *ForgetPasswordRequest) (*ForgetPasswordResponse, error)
	VerifyRegister(context.Context, *VerifyRegisterRequest) (*VerifyRegisterResponse, error)
	AddBasicInfo(context.Context, *BasicInfoRequest) (*KYCInfoResponse, error)
	UpdateBasicInfo(context.Context, *BasicInfoRequest) (*KYCInfoResponse, error)
	GetUserKYCData(context.Context, *emptypb.Empty) (*KYCInfoResponse, error)
	ChangeBasicInfoState(context.Context, *ChangeBasicInfoRequest) (*KYCInfoResponse, error)
	//bank account
	AddCardAdmin(context.Context, *AddCardAdminRequest) (*BankAccountResponse, error)
	AddIbanAdmin(context.Context, *AddIbanAdminRequest) (*BankAccountResponse, error)
	AddUserBankAccountCard(context.Context, *AddUserBankAccountCardRequest) (*BankAccountResponse, error)
	GetWatingForAdminBankAccount(context.Context, *emptypb.Empty) (*GetWatingForAdminBankAccountResponse, error)
	UpdateBankAccountStatus(context.Context, *UpdateBankAccountStatusRequest) (*UpdateBankAccountStatusResponse, error)
	UpdateBankAccountByUser(context.Context, *UpdateBankAccountByUserRequest) (*UpdateBankAccountByUserResponse, error)
	UpdateUserBankAccountCard(context.Context, *UpdateUserBankAccountCardRequest) (*BankAccountResponse, error)
	UpdateUserBankAccountIBAN(context.Context, *UpdateUserBankAccountIBANRequest) (*BankAccountResponse, error)
	GetBankAccountByUserId(context.Context, *GetBankAccountByUserIdRequest) (*GetByUserIdBankAccountResponse, error)
	DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error)
	AddUserBankAccountIBAN(context.Context, *AddUserBankAccountIBANRequest) (*BankAccountResponse, error)
	//userComment
	GetUserCommentByUserId(context.Context, *GetUserCommentByUserIdRequest) (*GetUserCommentByUserIdResponse, error)
	AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error)
	DeleteUserComment(context.Context, *DeleteUserCommentRequest) (*DeleteUserCommentResponse, error)
	VerifyDocument(context.Context, *VerifyDocumentRequest) (*KYCInfoResponse, error)
	VerifyIban(context.Context, *VerifyIbanRequest) (*VerifyIbanResponse, error)
	VerifyCardBank(context.Context, *VerifyCardNumberRequest) (*VerifyCardNumberResponse, error)
	AdminLoginHistory(context.Context, *AdminLoginHistoryRequest) (*AdminLoginHistoryResponse, error)
	UserLoginHistory(context.Context, *emptypb.Empty) (*UserLoginHistoryResponse, error)
	GetUserByIP(context.Context, *GetUserByIPRequest) (*GetUserByIPResponse, error)
	GetReferralDataById(context.Context, *GetUserReferralByIdRequest) (*GetUserReferralByIdResponse, error)
	GetUserChildReferralById(context.Context, *GetUserReferralByIdRequest) (*ReferralUserResponse, error)
	GetListOfUserDevicesByAdmin(context.Context, *GetListOfUserDevicesByAdminRequest) (*GetListOfUserDevicesByAdminResponse, error)
	GetListOfUserDevicesByUser(context.Context, *emptypb.Empty) (*GetListOfUserDevicesByUserResponse, error)
	RevokeUser(context.Context, *RevokeUserRequest) (*RevokeUserResponse, error)
	LogOutByDevice(context.Context, *LogOutByDeviceRequest) (*LogOutByDeviceResponse, error)
	LogOut(context.Context, *emptypb.Empty) (*LogOutResponse, error)
	EditUserById(context.Context, *EditUserByIdRequest) (*GetUserByIdResponse, error)
	GetUserBankAccount(context.Context, *emptypb.Empty) (*UserBankAccountResponse, error)
	VerifyMFA(context.Context, *VerifyMFARequest) (*VerifyMFAResponse, error)
	SendMFA(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ActiveEmailMFA(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error)
	VerifyEmailMFAActivation(context.Context, *VerifyMFAActivationRequest) (*VerifyMFAResponse, error)
	ActiveSMSMFA(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error)
	VerifySMSMFAActivation(context.Context, *VerifyMFAActivationRequest) (*VerifyMFAResponse, error)
	ActiveGAMFA(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error)
	VerifyGAMFAActivation(context.Context, *VerifyMFAActivationRequest) (*VerifyMFAResponse, error)
	ResendMFAActivationCode(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error)
	RemoveReferralById(context.Context, *RemoveParentReferralRequest) (*RemoveParentReferralResponse, error)
	ChangeKycStatus(context.Context, *ChangeKycStatusRequest) (*ChangeKycStatusResponse, error)
	GetKycList(context.Context, *GetAllUsersKycRequest) (*GetAllUsersKycResponse, error)
	AssignKycToAdmin(context.Context, *AssignKycToAdminRequest) (*emptypb.Empty, error)
	ValidateAddress(context.Context, *ValidateAddressRequest) (*emptypb.Empty, error)
	ValidateBasicInfo(context.Context, *ValidateBasicInfoRequest) (*emptypb.Empty, error)
	GetValidatedBasicInfo(context.Context, *ValidateBasicInfoRequest) (*GetValidatedBasicInfoResponse, error)
	GetValidatedCardBank(context.Context, *ValidateBankCardRequest) (*ValidatedBankCardResponse, error)
	GetValidatedIban(context.Context, *ValidateBankCardRequest) (*ValidatedIbanResponse, error)
	ResendRegisterSMS(context.Context, *emptypb.Empty) (*ResendRegisterSMSResponse, error)
	ChangeKycAllStatus(context.Context, *emptypb.Empty) (*ChangeKycAllStatusResponse, error)
	CallLandLineNumber(context.Context, *CallLandLineNumberRequest) (*emptypb.Empty, error)
	VerifyLandLineNumber(context.Context, *VerifyLandLineNumberRequest) (*KYCInfoResponse, error)
	VerifyLandLineNumberByAdmin(context.Context, *VerifyLandLineNumberByAdminRequest) (*KYCInfoResponse, error)
	ChangeKYCStatusAll(context.Context, *ChangeKYCStatusAllRequest) (*KYCInfoResponse, error)
	AssignKycToMe(context.Context, *AssignKycToMeRequest) (*AssignKycToMeResponse, error)
	RevokeAdminKyc(context.Context, *RevokeAdminKycRequest) (*RevokeAdminKycResponse, error)
	RetryCheckCardAndIban(context.Context, *RetryCheckCardAndIbanRequest) (*RetryCheckCardAndIbanResponse, error)
	ListCardsAndIban(context.Context, *emptypb.Empty) (*ListCardsAndIbanResponse, error)
	UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error)
	GetBasicInfo(context.Context, *GetBasicInfoRequest) (*GetBasicInfoResponse, error)
	UpdateBasicInfoByAdmin(context.Context, *UpdateBasicInfoRequest) (*GetBasicInfoResponse, error)
	ResendForgetPasswordSMS(context.Context, *emptypb.Empty) (*ResendForgetPasswordSMSResponse, error)
	FlagList(context.Context, *emptypb.Empty) (*FlagListResponse, error)
	GetRejectionReasons(context.Context, *emptypb.Empty) (*GetRejectionReasonsResponse, error)
	AddParentReferralById(context.Context, *AddParentReferralRequest) (*AddParentReferralResponse, error)
	GetALLAdmin(context.Context, *emptypb.Empty) (*GetALLAdminResponse, error)
	// user management  sanity
	IbanSanity(context.Context, *IbanSanityRequest) (*IbanSanityResponse, error)
	CardSanity(context.Context, *CardSanityRequest) (*CardSanityResponse, error)
	GetUserSanity(context.Context, *GetUserSanityRequest) (*GetUserSanityResponse, error)
	FilterUserSanity(context.Context, *FilterUserSanityRequest) (*FilterUserSanityResponse, error)
	GetRefererInfoSanity(context.Context, *GetRefererInfoSanityRequest) (*GetRefererInfoSanityResponse, error)
	// (SYSTEM) get address returns user data
	GetUserByAddress(context.Context, *GetUserByAddressRequest) (*GetUserByAddressResponse, error)
	// (SYSTEM) get memo returns user data
	GetUserByMemo(context.Context, *GetUserByMemoRequest) (*GetUserByMemoResponse, error)
	// (USER) get asset va network returns address va memo
	GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error)
	// (ADMIN) get user id  returns users address and memo
	GetAddressByUserID(context.Context, *GetAddressByUserIDRequest) (*GetAddressByUserIDResponse, error)
	// (ADMIN) GetAndroidConfig returns force_update  and  optional_update
	GetAndroidConfig(context.Context, *emptypb.Empty) (*GetAndroidConfigResponse, error)
	// (ADMIN) UpdateAndroidConfig set force_update  and  optional_update returns force_update  and  optional_update
	UpdateAndroidConfig(context.Context, *UpdateAndroidConfigRequest) (*UpdateAndroidConfigResponse, error)
	// (SYSTEM) DoesAddressBelongsToRabex get address  returns error if address does not belong to rabex
	DoesAddressBelongsToRabex(context.Context, *DoesAddressBelongsToRabexRequest) (*DoesAddressBelongsToRabexResponse, error)
	mustEmbedUnimplementedUserManagementServer()
}

// UnimplementedUserManagementServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagementServer struct {
}

func (UnimplementedUserManagementServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserManagementServer) FilterUser(context.Context, *FilterUserRequest) (*FilterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterUser not implemented")
}
func (UnimplementedUserManagementServer) GetUserById(context.Context, *GetUserByIdRequest) (*GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserManagementServer) GetUserSettingsByUserId(context.Context, *GetUserSettingsByUserIdRequest) (*AddUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSettingsByUserId not implemented")
}
func (UnimplementedUserManagementServer) UpdateUserSettings(context.Context, *UpdateUserSettingsRequest) (*AddUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSettings not implemented")
}
func (UnimplementedUserManagementServer) ChangeUserFlag(context.Context, *UpdateUserFlagRequest) (*AddUserSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUserFlag not implemented")
}
func (UnimplementedUserManagementServer) AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedUserManagementServer) UpdateGroup(context.Context, *UpdateGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGroup not implemented")
}
func (UnimplementedUserManagementServer) AddRole(context.Context, *AddRoleRequest) (*AddRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedUserManagementServer) UpdateRole(context.Context, *UpdateRoleRequest) (*UpdateRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedUserManagementServer) GetRoleByUserId(context.Context, *GetRoleByUserIdRequest) (*GetRoleByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleByUserId not implemented")
}
func (UnimplementedUserManagementServer) SelectAllRole(context.Context, *emptypb.Empty) (*SelectAllRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllRole not implemented")
}
func (UnimplementedUserManagementServer) DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedUserManagementServer) AddPermission(context.Context, *Permission) (*PermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPermission not implemented")
}
func (UnimplementedUserManagementServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*PermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedUserManagementServer) SelectAllPermission(context.Context, *emptypb.Empty) (*AllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectAllPermission not implemented")
}
func (UnimplementedUserManagementServer) DeletePermission(context.Context, *DeletePermissionRequest) (*DeletePermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedUserManagementServer) FilterPermission(context.Context, *UpdatePermissionRequest) (*AllPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterPermission not implemented")
}
func (UnimplementedUserManagementServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserManagementServer) ResetToken(context.Context, *ResetTokenRequest) (*ResetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetToken not implemented")
}
func (UnimplementedUserManagementServer) ResetPassword(context.Context, *ResetPasswordRequest) (*ResetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedUserManagementServer) UserActivityPerDevice(context.Context, *UserActivityPerDeviceRequest) (*UserActivityPerDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivityPerDevice not implemented")
}
func (UnimplementedUserManagementServer) UserActivityPerDeviceUser(context.Context, *UserActivityPerDeviceUserRequest) (*UserActivityPerUserDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserActivityPerDeviceUser not implemented")
}
func (UnimplementedUserManagementServer) CountOfChildRefferal(context.Context, *emptypb.Empty) (*CountOfChildRefferalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOfChildRefferal not implemented")
}
func (UnimplementedUserManagementServer) SendForgetPasswordCode(context.Context, *SendForgetPasswordCodeRequest) (*SendForgetPasswordCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgetPasswordCode not implemented")
}
func (UnimplementedUserManagementServer) VerifyForgetPasswordCode(context.Context, *VerifyForgetPasswordCodeRequest) (*SendForgetPasswordCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyForgetPasswordCode not implemented")
}
func (UnimplementedUserManagementServer) ForgetPassword(context.Context, *ForgetPasswordRequest) (*ForgetPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgetPassword not implemented")
}
func (UnimplementedUserManagementServer) VerifyRegister(context.Context, *VerifyRegisterRequest) (*VerifyRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyRegister not implemented")
}
func (UnimplementedUserManagementServer) AddBasicInfo(context.Context, *BasicInfoRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBasicInfo not implemented")
}
func (UnimplementedUserManagementServer) UpdateBasicInfo(context.Context, *BasicInfoRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicInfo not implemented")
}
func (UnimplementedUserManagementServer) GetUserKYCData(context.Context, *emptypb.Empty) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserKYCData not implemented")
}
func (UnimplementedUserManagementServer) ChangeBasicInfoState(context.Context, *ChangeBasicInfoRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeBasicInfoState not implemented")
}
func (UnimplementedUserManagementServer) AddCardAdmin(context.Context, *AddCardAdminRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardAdmin not implemented")
}
func (UnimplementedUserManagementServer) AddIbanAdmin(context.Context, *AddIbanAdminRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIbanAdmin not implemented")
}
func (UnimplementedUserManagementServer) AddUserBankAccountCard(context.Context, *AddUserBankAccountCardRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserBankAccountCard not implemented")
}
func (UnimplementedUserManagementServer) GetWatingForAdminBankAccount(context.Context, *emptypb.Empty) (*GetWatingForAdminBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWatingForAdminBankAccount not implemented")
}
func (UnimplementedUserManagementServer) UpdateBankAccountStatus(context.Context, *UpdateBankAccountStatusRequest) (*UpdateBankAccountStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccountStatus not implemented")
}
func (UnimplementedUserManagementServer) UpdateBankAccountByUser(context.Context, *UpdateBankAccountByUserRequest) (*UpdateBankAccountByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBankAccountByUser not implemented")
}
func (UnimplementedUserManagementServer) UpdateUserBankAccountCard(context.Context, *UpdateUserBankAccountCardRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBankAccountCard not implemented")
}
func (UnimplementedUserManagementServer) UpdateUserBankAccountIBAN(context.Context, *UpdateUserBankAccountIBANRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserBankAccountIBAN not implemented")
}
func (UnimplementedUserManagementServer) GetBankAccountByUserId(context.Context, *GetBankAccountByUserIdRequest) (*GetByUserIdBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankAccountByUserId not implemented")
}
func (UnimplementedUserManagementServer) DeleteBankAccount(context.Context, *DeleteBankAccountRequest) (*DeleteBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBankAccount not implemented")
}
func (UnimplementedUserManagementServer) AddUserBankAccountIBAN(context.Context, *AddUserBankAccountIBANRequest) (*BankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserBankAccountIBAN not implemented")
}
func (UnimplementedUserManagementServer) GetUserCommentByUserId(context.Context, *GetUserCommentByUserIdRequest) (*GetUserCommentByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCommentByUserId not implemented")
}
func (UnimplementedUserManagementServer) AddUserComment(context.Context, *AddUserCommentRequest) (*AddUserCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserComment not implemented")
}
func (UnimplementedUserManagementServer) DeleteUserComment(context.Context, *DeleteUserCommentRequest) (*DeleteUserCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserComment not implemented")
}
func (UnimplementedUserManagementServer) VerifyDocument(context.Context, *VerifyDocumentRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDocument not implemented")
}
func (UnimplementedUserManagementServer) VerifyIban(context.Context, *VerifyIbanRequest) (*VerifyIbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyIban not implemented")
}
func (UnimplementedUserManagementServer) VerifyCardBank(context.Context, *VerifyCardNumberRequest) (*VerifyCardNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCardBank not implemented")
}
func (UnimplementedUserManagementServer) AdminLoginHistory(context.Context, *AdminLoginHistoryRequest) (*AdminLoginHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminLoginHistory not implemented")
}
func (UnimplementedUserManagementServer) UserLoginHistory(context.Context, *emptypb.Empty) (*UserLoginHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginHistory not implemented")
}
func (UnimplementedUserManagementServer) GetUserByIP(context.Context, *GetUserByIPRequest) (*GetUserByIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByIP not implemented")
}
func (UnimplementedUserManagementServer) GetReferralDataById(context.Context, *GetUserReferralByIdRequest) (*GetUserReferralByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferralDataById not implemented")
}
func (UnimplementedUserManagementServer) GetUserChildReferralById(context.Context, *GetUserReferralByIdRequest) (*ReferralUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserChildReferralById not implemented")
}
func (UnimplementedUserManagementServer) GetListOfUserDevicesByAdmin(context.Context, *GetListOfUserDevicesByAdminRequest) (*GetListOfUserDevicesByAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfUserDevicesByAdmin not implemented")
}
func (UnimplementedUserManagementServer) GetListOfUserDevicesByUser(context.Context, *emptypb.Empty) (*GetListOfUserDevicesByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListOfUserDevicesByUser not implemented")
}
func (UnimplementedUserManagementServer) RevokeUser(context.Context, *RevokeUserRequest) (*RevokeUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeUser not implemented")
}
func (UnimplementedUserManagementServer) LogOutByDevice(context.Context, *LogOutByDeviceRequest) (*LogOutByDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOutByDevice not implemented")
}
func (UnimplementedUserManagementServer) LogOut(context.Context, *emptypb.Empty) (*LogOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedUserManagementServer) EditUserById(context.Context, *EditUserByIdRequest) (*GetUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserById not implemented")
}
func (UnimplementedUserManagementServer) GetUserBankAccount(context.Context, *emptypb.Empty) (*UserBankAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBankAccount not implemented")
}
func (UnimplementedUserManagementServer) VerifyMFA(context.Context, *VerifyMFARequest) (*VerifyMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyMFA not implemented")
}
func (UnimplementedUserManagementServer) SendMFA(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMFA not implemented")
}
func (UnimplementedUserManagementServer) ActiveEmailMFA(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveEmailMFA not implemented")
}
func (UnimplementedUserManagementServer) VerifyEmailMFAActivation(context.Context, *VerifyMFAActivationRequest) (*VerifyMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailMFAActivation not implemented")
}
func (UnimplementedUserManagementServer) ActiveSMSMFA(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveSMSMFA not implemented")
}
func (UnimplementedUserManagementServer) VerifySMSMFAActivation(context.Context, *VerifyMFAActivationRequest) (*VerifyMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySMSMFAActivation not implemented")
}
func (UnimplementedUserManagementServer) ActiveGAMFA(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveGAMFA not implemented")
}
func (UnimplementedUserManagementServer) VerifyGAMFAActivation(context.Context, *VerifyMFAActivationRequest) (*VerifyMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyGAMFAActivation not implemented")
}
func (UnimplementedUserManagementServer) ResendMFAActivationCode(context.Context, *emptypb.Empty) (*ActiveMFAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendMFAActivationCode not implemented")
}
func (UnimplementedUserManagementServer) RemoveReferralById(context.Context, *RemoveParentReferralRequest) (*RemoveParentReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveReferralById not implemented")
}
func (UnimplementedUserManagementServer) ChangeKycStatus(context.Context, *ChangeKycStatusRequest) (*ChangeKycStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeKycStatus not implemented")
}
func (UnimplementedUserManagementServer) GetKycList(context.Context, *GetAllUsersKycRequest) (*GetAllUsersKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycList not implemented")
}
func (UnimplementedUserManagementServer) AssignKycToAdmin(context.Context, *AssignKycToAdminRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignKycToAdmin not implemented")
}
func (UnimplementedUserManagementServer) ValidateAddress(context.Context, *ValidateAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateAddress not implemented")
}
func (UnimplementedUserManagementServer) ValidateBasicInfo(context.Context, *ValidateBasicInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateBasicInfo not implemented")
}
func (UnimplementedUserManagementServer) GetValidatedBasicInfo(context.Context, *ValidateBasicInfoRequest) (*GetValidatedBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatedBasicInfo not implemented")
}
func (UnimplementedUserManagementServer) GetValidatedCardBank(context.Context, *ValidateBankCardRequest) (*ValidatedBankCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatedCardBank not implemented")
}
func (UnimplementedUserManagementServer) GetValidatedIban(context.Context, *ValidateBankCardRequest) (*ValidatedIbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatedIban not implemented")
}
func (UnimplementedUserManagementServer) ResendRegisterSMS(context.Context, *emptypb.Empty) (*ResendRegisterSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendRegisterSMS not implemented")
}
func (UnimplementedUserManagementServer) ChangeKycAllStatus(context.Context, *emptypb.Empty) (*ChangeKycAllStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeKycAllStatus not implemented")
}
func (UnimplementedUserManagementServer) CallLandLineNumber(context.Context, *CallLandLineNumberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallLandLineNumber not implemented")
}
func (UnimplementedUserManagementServer) VerifyLandLineNumber(context.Context, *VerifyLandLineNumberRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyLandLineNumber not implemented")
}
func (UnimplementedUserManagementServer) VerifyLandLineNumberByAdmin(context.Context, *VerifyLandLineNumberByAdminRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyLandLineNumberByAdmin not implemented")
}
func (UnimplementedUserManagementServer) ChangeKYCStatusAll(context.Context, *ChangeKYCStatusAllRequest) (*KYCInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeKYCStatusAll not implemented")
}
func (UnimplementedUserManagementServer) AssignKycToMe(context.Context, *AssignKycToMeRequest) (*AssignKycToMeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignKycToMe not implemented")
}
func (UnimplementedUserManagementServer) RevokeAdminKyc(context.Context, *RevokeAdminKycRequest) (*RevokeAdminKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAdminKyc not implemented")
}
func (UnimplementedUserManagementServer) RetryCheckCardAndIban(context.Context, *RetryCheckCardAndIbanRequest) (*RetryCheckCardAndIbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryCheckCardAndIban not implemented")
}
func (UnimplementedUserManagementServer) ListCardsAndIban(context.Context, *emptypb.Empty) (*ListCardsAndIbanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCardsAndIban not implemented")
}
func (UnimplementedUserManagementServer) UpdateAddress(context.Context, *UpdateAddressRequest) (*UpdateAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedUserManagementServer) GetBasicInfo(context.Context, *GetBasicInfoRequest) (*GetBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBasicInfo not implemented")
}
func (UnimplementedUserManagementServer) UpdateBasicInfoByAdmin(context.Context, *UpdateBasicInfoRequest) (*GetBasicInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBasicInfoByAdmin not implemented")
}
func (UnimplementedUserManagementServer) ResendForgetPasswordSMS(context.Context, *emptypb.Empty) (*ResendForgetPasswordSMSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendForgetPasswordSMS not implemented")
}
func (UnimplementedUserManagementServer) FlagList(context.Context, *emptypb.Empty) (*FlagListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlagList not implemented")
}
func (UnimplementedUserManagementServer) GetRejectionReasons(context.Context, *emptypb.Empty) (*GetRejectionReasonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRejectionReasons not implemented")
}
func (UnimplementedUserManagementServer) AddParentReferralById(context.Context, *AddParentReferralRequest) (*AddParentReferralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddParentReferralById not implemented")
}
func (UnimplementedUserManagementServer) GetALLAdmin(context.Context, *emptypb.Empty) (*GetALLAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetALLAdmin not implemented")
}
func (UnimplementedUserManagementServer) IbanSanity(context.Context, *IbanSanityRequest) (*IbanSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IbanSanity not implemented")
}
func (UnimplementedUserManagementServer) CardSanity(context.Context, *CardSanityRequest) (*CardSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CardSanity not implemented")
}
func (UnimplementedUserManagementServer) GetUserSanity(context.Context, *GetUserSanityRequest) (*GetUserSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSanity not implemented")
}
func (UnimplementedUserManagementServer) FilterUserSanity(context.Context, *FilterUserSanityRequest) (*FilterUserSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterUserSanity not implemented")
}
func (UnimplementedUserManagementServer) GetRefererInfoSanity(context.Context, *GetRefererInfoSanityRequest) (*GetRefererInfoSanityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefererInfoSanity not implemented")
}
func (UnimplementedUserManagementServer) GetUserByAddress(context.Context, *GetUserByAddressRequest) (*GetUserByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByAddress not implemented")
}
func (UnimplementedUserManagementServer) GetUserByMemo(context.Context, *GetUserByMemoRequest) (*GetUserByMemoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByMemo not implemented")
}
func (UnimplementedUserManagementServer) GetAddress(context.Context, *GetAddressRequest) (*GetAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedUserManagementServer) GetAddressByUserID(context.Context, *GetAddressByUserIDRequest) (*GetAddressByUserIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressByUserID not implemented")
}
func (UnimplementedUserManagementServer) GetAndroidConfig(context.Context, *emptypb.Empty) (*GetAndroidConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAndroidConfig not implemented")
}
func (UnimplementedUserManagementServer) UpdateAndroidConfig(context.Context, *UpdateAndroidConfigRequest) (*UpdateAndroidConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAndroidConfig not implemented")
}
func (UnimplementedUserManagementServer) DoesAddressBelongsToRabex(context.Context, *DoesAddressBelongsToRabexRequest) (*DoesAddressBelongsToRabexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoesAddressBelongsToRabex not implemented")
}
func (UnimplementedUserManagementServer) mustEmbedUnimplementedUserManagementServer() {}

// UnsafeUserManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagementServer will
// result in compilation errors.
type UnsafeUserManagementServer interface {
	mustEmbedUnimplementedUserManagementServer()
}

func RegisterUserManagementServer(s grpc.ServiceRegistrar, srv UserManagementServer) {
	s.RegisterService(&UserManagement_ServiceDesc, srv)
}

func _UserManagement_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_FilterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).FilterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/FilterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).FilterUser(ctx, req.(*FilterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserById(ctx, req.(*GetUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserSettingsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSettingsByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserSettingsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserSettingsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserSettingsByUserId(ctx, req.(*GetUserSettingsByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateUserSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateUserSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateUserSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateUserSettings(ctx, req.(*UpdateUserSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ChangeUserFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ChangeUserFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ChangeUserFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ChangeUserFlag(ctx, req.(*UpdateUserFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateGroup(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddRole(ctx, req.(*AddRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetRoleByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetRoleByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetRoleByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetRoleByUserId(ctx, req.(*GetRoleByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_SelectAllRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).SelectAllRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/SelectAllRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).SelectAllRole(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Permission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddPermission(ctx, req.(*Permission))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdatePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_SelectAllPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).SelectAllPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/SelectAllPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).SelectAllPermission(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/DeletePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_FilterPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).FilterPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/FilterPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).FilterPermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ResetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ResetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ResetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ResetToken(ctx, req.(*ResetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ResetPassword(ctx, req.(*ResetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UserActivityPerDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActivityPerDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UserActivityPerDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UserActivityPerDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UserActivityPerDevice(ctx, req.(*UserActivityPerDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UserActivityPerDeviceUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserActivityPerDeviceUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UserActivityPerDeviceUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UserActivityPerDeviceUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UserActivityPerDeviceUser(ctx, req.(*UserActivityPerDeviceUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_CountOfChildRefferal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).CountOfChildRefferal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/CountOfChildRefferal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).CountOfChildRefferal(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_SendForgetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendForgetPasswordCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).SendForgetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/SendForgetPasswordCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).SendForgetPasswordCode(ctx, req.(*SendForgetPasswordCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyForgetPasswordCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyForgetPasswordCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyForgetPasswordCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyForgetPasswordCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyForgetPasswordCode(ctx, req.(*VerifyForgetPasswordCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ForgetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgetPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ForgetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ForgetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ForgetPassword(ctx, req.(*ForgetPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyRegister(ctx, req.(*VerifyRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddBasicInfo(ctx, req.(*BasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateBasicInfo(ctx, req.(*BasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserKYCData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserKYCData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserKYCData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserKYCData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ChangeBasicInfoState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ChangeBasicInfoState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ChangeBasicInfoState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ChangeBasicInfoState(ctx, req.(*ChangeBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddCardAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddCardAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddCardAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddCardAdmin(ctx, req.(*AddCardAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddIbanAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddIbanAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddIbanAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddIbanAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddIbanAdmin(ctx, req.(*AddIbanAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddUserBankAccountCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserBankAccountCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddUserBankAccountCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddUserBankAccountCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddUserBankAccountCard(ctx, req.(*AddUserBankAccountCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetWatingForAdminBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetWatingForAdminBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetWatingForAdminBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetWatingForAdminBankAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateBankAccountStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateBankAccountStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateBankAccountStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateBankAccountStatus(ctx, req.(*UpdateBankAccountStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateBankAccountByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBankAccountByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateBankAccountByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateBankAccountByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateBankAccountByUser(ctx, req.(*UpdateBankAccountByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateUserBankAccountCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBankAccountCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateUserBankAccountCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateUserBankAccountCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateUserBankAccountCard(ctx, req.(*UpdateUserBankAccountCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateUserBankAccountIBAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserBankAccountIBANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateUserBankAccountIBAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateUserBankAccountIBAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateUserBankAccountIBAN(ctx, req.(*UpdateUserBankAccountIBANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetBankAccountByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBankAccountByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetBankAccountByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetBankAccountByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetBankAccountByUserId(ctx, req.(*GetBankAccountByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_DeleteBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBankAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).DeleteBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/DeleteBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).DeleteBankAccount(ctx, req.(*DeleteBankAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddUserBankAccountIBAN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserBankAccountIBANRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddUserBankAccountIBAN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddUserBankAccountIBAN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddUserBankAccountIBAN(ctx, req.(*AddUserBankAccountIBANRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserCommentByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCommentByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserCommentByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserCommentByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserCommentByUserId(ctx, req.(*GetUserCommentByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddUserComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddUserComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddUserComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddUserComment(ctx, req.(*AddUserCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_DeleteUserComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).DeleteUserComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/DeleteUserComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).DeleteUserComment(ctx, req.(*DeleteUserCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyDocument",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyDocument(ctx, req.(*VerifyDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyIban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyIbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyIban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyIban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyIban(ctx, req.(*VerifyIbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyCardBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCardNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyCardBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyCardBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyCardBank(ctx, req.(*VerifyCardNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AdminLoginHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminLoginHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AdminLoginHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AdminLoginHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AdminLoginHistory(ctx, req.(*AdminLoginHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UserLoginHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UserLoginHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UserLoginHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UserLoginHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserByIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserByIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserByIP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserByIP(ctx, req.(*GetUserByIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetReferralDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReferralByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetReferralDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetReferralDataById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetReferralDataById(ctx, req.(*GetUserReferralByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserChildReferralById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReferralByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserChildReferralById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserChildReferralById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserChildReferralById(ctx, req.(*GetUserReferralByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetListOfUserDevicesByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListOfUserDevicesByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetListOfUserDevicesByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetListOfUserDevicesByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetListOfUserDevicesByAdmin(ctx, req.(*GetListOfUserDevicesByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetListOfUserDevicesByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetListOfUserDevicesByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetListOfUserDevicesByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetListOfUserDevicesByUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_RevokeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RevokeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/RevokeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RevokeUser(ctx, req.(*RevokeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_LogOutByDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogOutByDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).LogOutByDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/LogOutByDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).LogOutByDevice(ctx, req.(*LogOutByDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).LogOut(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_EditUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).EditUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/EditUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).EditUserById(ctx, req.(*EditUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserBankAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserBankAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserBankAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserBankAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyMFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyMFA(ctx, req.(*VerifyMFARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_SendMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).SendMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/SendMFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).SendMFA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ActiveEmailMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ActiveEmailMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ActiveEmailMFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ActiveEmailMFA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyEmailMFAActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFAActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyEmailMFAActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyEmailMFAActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyEmailMFAActivation(ctx, req.(*VerifyMFAActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ActiveSMSMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ActiveSMSMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ActiveSMSMFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ActiveSMSMFA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifySMSMFAActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFAActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifySMSMFAActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifySMSMFAActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifySMSMFAActivation(ctx, req.(*VerifyMFAActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ActiveGAMFA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ActiveGAMFA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ActiveGAMFA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ActiveGAMFA(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyGAMFAActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyMFAActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyGAMFAActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyGAMFAActivation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyGAMFAActivation(ctx, req.(*VerifyMFAActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ResendMFAActivationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ResendMFAActivationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ResendMFAActivationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ResendMFAActivationCode(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_RemoveReferralById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveParentReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RemoveReferralById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/RemoveReferralById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RemoveReferralById(ctx, req.(*RemoveParentReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ChangeKycStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeKycStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ChangeKycStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ChangeKycStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ChangeKycStatus(ctx, req.(*ChangeKycStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetKycList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUsersKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetKycList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetKycList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetKycList(ctx, req.(*GetAllUsersKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AssignKycToAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignKycToAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AssignKycToAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AssignKycToAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AssignKycToAdmin(ctx, req.(*AssignKycToAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ValidateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ValidateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ValidateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ValidateAddress(ctx, req.(*ValidateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ValidateBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ValidateBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ValidateBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ValidateBasicInfo(ctx, req.(*ValidateBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetValidatedBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetValidatedBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetValidatedBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetValidatedBasicInfo(ctx, req.(*ValidateBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetValidatedCardBank_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetValidatedCardBank(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetValidatedCardBank",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetValidatedCardBank(ctx, req.(*ValidateBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetValidatedIban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateBankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetValidatedIban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetValidatedIban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetValidatedIban(ctx, req.(*ValidateBankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ResendRegisterSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ResendRegisterSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ResendRegisterSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ResendRegisterSMS(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ChangeKycAllStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ChangeKycAllStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ChangeKycAllStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ChangeKycAllStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_CallLandLineNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallLandLineNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).CallLandLineNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/CallLandLineNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).CallLandLineNumber(ctx, req.(*CallLandLineNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyLandLineNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyLandLineNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyLandLineNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyLandLineNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyLandLineNumber(ctx, req.(*VerifyLandLineNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_VerifyLandLineNumberByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyLandLineNumberByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).VerifyLandLineNumberByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/VerifyLandLineNumberByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).VerifyLandLineNumberByAdmin(ctx, req.(*VerifyLandLineNumberByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ChangeKYCStatusAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeKYCStatusAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ChangeKYCStatusAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ChangeKYCStatusAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ChangeKYCStatusAll(ctx, req.(*ChangeKYCStatusAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AssignKycToMe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignKycToMeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AssignKycToMe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AssignKycToMe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AssignKycToMe(ctx, req.(*AssignKycToMeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_RevokeAdminKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeAdminKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RevokeAdminKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/RevokeAdminKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RevokeAdminKyc(ctx, req.(*RevokeAdminKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_RetryCheckCardAndIban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryCheckCardAndIbanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).RetryCheckCardAndIban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/RetryCheckCardAndIban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).RetryCheckCardAndIban(ctx, req.(*RetryCheckCardAndIbanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ListCardsAndIban_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ListCardsAndIban(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ListCardsAndIban",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ListCardsAndIban(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateAddress(ctx, req.(*UpdateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetBasicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetBasicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetBasicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetBasicInfo(ctx, req.(*GetBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateBasicInfoByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBasicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateBasicInfoByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateBasicInfoByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateBasicInfoByAdmin(ctx, req.(*UpdateBasicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_ResendForgetPasswordSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).ResendForgetPasswordSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/ResendForgetPasswordSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).ResendForgetPasswordSMS(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_FlagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).FlagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/FlagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).FlagList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetRejectionReasons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetRejectionReasons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetRejectionReasons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetRejectionReasons(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_AddParentReferralById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddParentReferralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).AddParentReferralById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/AddParentReferralById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).AddParentReferralById(ctx, req.(*AddParentReferralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetALLAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetALLAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetALLAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetALLAdmin(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_IbanSanity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IbanSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).IbanSanity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/IbanSanity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).IbanSanity(ctx, req.(*IbanSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_CardSanity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).CardSanity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/CardSanity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).CardSanity(ctx, req.(*CardSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserSanity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserSanity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserSanity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserSanity(ctx, req.(*GetUserSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_FilterUserSanity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterUserSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).FilterUserSanity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/FilterUserSanity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).FilterUserSanity(ctx, req.(*FilterUserSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetRefererInfoSanity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefererInfoSanityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetRefererInfoSanity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetRefererInfoSanity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetRefererInfoSanity(ctx, req.(*GetRefererInfoSanityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserByAddress(ctx, req.(*GetUserByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetUserByMemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByMemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetUserByMemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetUserByMemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetUserByMemo(ctx, req.(*GetUserByMemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetAddressByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressByUserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetAddressByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetAddressByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetAddressByUserID(ctx, req.(*GetAddressByUserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_GetAndroidConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).GetAndroidConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/GetAndroidConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).GetAndroidConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_UpdateAndroidConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAndroidConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).UpdateAndroidConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/UpdateAndroidConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).UpdateAndroidConfig(ctx, req.(*UpdateAndroidConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManagement_DoesAddressBelongsToRabex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DoesAddressBelongsToRabexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagementServer).DoesAddressBelongsToRabex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.usermnm.UserManagement/DoesAddressBelongsToRabex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagementServer).DoesAddressBelongsToRabex(ctx, req.(*DoesAddressBelongsToRabexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManagement_ServiceDesc is the grpc.ServiceDesc for UserManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.usermnm.UserManagement",
	HandlerType: (*UserManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserManagement_RegisterUser_Handler,
		},
		{
			MethodName: "FilterUser",
			Handler:    _UserManagement_FilterUser_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _UserManagement_GetUserById_Handler,
		},
		{
			MethodName: "GetUserSettingsByUserId",
			Handler:    _UserManagement_GetUserSettingsByUserId_Handler,
		},
		{
			MethodName: "UpdateUserSettings",
			Handler:    _UserManagement_UpdateUserSettings_Handler,
		},
		{
			MethodName: "ChangeUserFlag",
			Handler:    _UserManagement_ChangeUserFlag_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _UserManagement_AddGroup_Handler,
		},
		{
			MethodName: "UpdateGroup",
			Handler:    _UserManagement_UpdateGroup_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _UserManagement_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _UserManagement_UpdateRole_Handler,
		},
		{
			MethodName: "GetRoleByUserId",
			Handler:    _UserManagement_GetRoleByUserId_Handler,
		},
		{
			MethodName: "SelectAllRole",
			Handler:    _UserManagement_SelectAllRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _UserManagement_DeleteRole_Handler,
		},
		{
			MethodName: "AddPermission",
			Handler:    _UserManagement_AddPermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _UserManagement_UpdatePermission_Handler,
		},
		{
			MethodName: "SelectAllPermission",
			Handler:    _UserManagement_SelectAllPermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _UserManagement_DeletePermission_Handler,
		},
		{
			MethodName: "FilterPermission",
			Handler:    _UserManagement_FilterPermission_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserManagement_Login_Handler,
		},
		{
			MethodName: "ResetToken",
			Handler:    _UserManagement_ResetToken_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _UserManagement_ResetPassword_Handler,
		},
		{
			MethodName: "UserActivityPerDevice",
			Handler:    _UserManagement_UserActivityPerDevice_Handler,
		},
		{
			MethodName: "UserActivityPerDeviceUser",
			Handler:    _UserManagement_UserActivityPerDeviceUser_Handler,
		},
		{
			MethodName: "CountOfChildRefferal",
			Handler:    _UserManagement_CountOfChildRefferal_Handler,
		},
		{
			MethodName: "SendForgetPasswordCode",
			Handler:    _UserManagement_SendForgetPasswordCode_Handler,
		},
		{
			MethodName: "VerifyForgetPasswordCode",
			Handler:    _UserManagement_VerifyForgetPasswordCode_Handler,
		},
		{
			MethodName: "ForgetPassword",
			Handler:    _UserManagement_ForgetPassword_Handler,
		},
		{
			MethodName: "VerifyRegister",
			Handler:    _UserManagement_VerifyRegister_Handler,
		},
		{
			MethodName: "AddBasicInfo",
			Handler:    _UserManagement_AddBasicInfo_Handler,
		},
		{
			MethodName: "UpdateBasicInfo",
			Handler:    _UserManagement_UpdateBasicInfo_Handler,
		},
		{
			MethodName: "GetUserKYCData",
			Handler:    _UserManagement_GetUserKYCData_Handler,
		},
		{
			MethodName: "ChangeBasicInfoState",
			Handler:    _UserManagement_ChangeBasicInfoState_Handler,
		},
		{
			MethodName: "AddCardAdmin",
			Handler:    _UserManagement_AddCardAdmin_Handler,
		},
		{
			MethodName: "AddIbanAdmin",
			Handler:    _UserManagement_AddIbanAdmin_Handler,
		},
		{
			MethodName: "AddUserBankAccountCard",
			Handler:    _UserManagement_AddUserBankAccountCard_Handler,
		},
		{
			MethodName: "GetWatingForAdminBankAccount",
			Handler:    _UserManagement_GetWatingForAdminBankAccount_Handler,
		},
		{
			MethodName: "UpdateBankAccountStatus",
			Handler:    _UserManagement_UpdateBankAccountStatus_Handler,
		},
		{
			MethodName: "UpdateBankAccountByUser",
			Handler:    _UserManagement_UpdateBankAccountByUser_Handler,
		},
		{
			MethodName: "UpdateUserBankAccountCard",
			Handler:    _UserManagement_UpdateUserBankAccountCard_Handler,
		},
		{
			MethodName: "UpdateUserBankAccountIBAN",
			Handler:    _UserManagement_UpdateUserBankAccountIBAN_Handler,
		},
		{
			MethodName: "GetBankAccountByUserId",
			Handler:    _UserManagement_GetBankAccountByUserId_Handler,
		},
		{
			MethodName: "DeleteBankAccount",
			Handler:    _UserManagement_DeleteBankAccount_Handler,
		},
		{
			MethodName: "AddUserBankAccountIBAN",
			Handler:    _UserManagement_AddUserBankAccountIBAN_Handler,
		},
		{
			MethodName: "GetUserCommentByUserId",
			Handler:    _UserManagement_GetUserCommentByUserId_Handler,
		},
		{
			MethodName: "AddUserComment",
			Handler:    _UserManagement_AddUserComment_Handler,
		},
		{
			MethodName: "DeleteUserComment",
			Handler:    _UserManagement_DeleteUserComment_Handler,
		},
		{
			MethodName: "VerifyDocument",
			Handler:    _UserManagement_VerifyDocument_Handler,
		},
		{
			MethodName: "VerifyIban",
			Handler:    _UserManagement_VerifyIban_Handler,
		},
		{
			MethodName: "VerifyCardBank",
			Handler:    _UserManagement_VerifyCardBank_Handler,
		},
		{
			MethodName: "AdminLoginHistory",
			Handler:    _UserManagement_AdminLoginHistory_Handler,
		},
		{
			MethodName: "UserLoginHistory",
			Handler:    _UserManagement_UserLoginHistory_Handler,
		},
		{
			MethodName: "GetUserByIP",
			Handler:    _UserManagement_GetUserByIP_Handler,
		},
		{
			MethodName: "GetReferralDataById",
			Handler:    _UserManagement_GetReferralDataById_Handler,
		},
		{
			MethodName: "GetUserChildReferralById",
			Handler:    _UserManagement_GetUserChildReferralById_Handler,
		},
		{
			MethodName: "GetListOfUserDevicesByAdmin",
			Handler:    _UserManagement_GetListOfUserDevicesByAdmin_Handler,
		},
		{
			MethodName: "GetListOfUserDevicesByUser",
			Handler:    _UserManagement_GetListOfUserDevicesByUser_Handler,
		},
		{
			MethodName: "RevokeUser",
			Handler:    _UserManagement_RevokeUser_Handler,
		},
		{
			MethodName: "LogOutByDevice",
			Handler:    _UserManagement_LogOutByDevice_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _UserManagement_LogOut_Handler,
		},
		{
			MethodName: "EditUserById",
			Handler:    _UserManagement_EditUserById_Handler,
		},
		{
			MethodName: "GetUserBankAccount",
			Handler:    _UserManagement_GetUserBankAccount_Handler,
		},
		{
			MethodName: "VerifyMFA",
			Handler:    _UserManagement_VerifyMFA_Handler,
		},
		{
			MethodName: "SendMFA",
			Handler:    _UserManagement_SendMFA_Handler,
		},
		{
			MethodName: "ActiveEmailMFA",
			Handler:    _UserManagement_ActiveEmailMFA_Handler,
		},
		{
			MethodName: "VerifyEmailMFAActivation",
			Handler:    _UserManagement_VerifyEmailMFAActivation_Handler,
		},
		{
			MethodName: "ActiveSMSMFA",
			Handler:    _UserManagement_ActiveSMSMFA_Handler,
		},
		{
			MethodName: "VerifySMSMFAActivation",
			Handler:    _UserManagement_VerifySMSMFAActivation_Handler,
		},
		{
			MethodName: "ActiveGAMFA",
			Handler:    _UserManagement_ActiveGAMFA_Handler,
		},
		{
			MethodName: "VerifyGAMFAActivation",
			Handler:    _UserManagement_VerifyGAMFAActivation_Handler,
		},
		{
			MethodName: "ResendMFAActivationCode",
			Handler:    _UserManagement_ResendMFAActivationCode_Handler,
		},
		{
			MethodName: "RemoveReferralById",
			Handler:    _UserManagement_RemoveReferralById_Handler,
		},
		{
			MethodName: "ChangeKycStatus",
			Handler:    _UserManagement_ChangeKycStatus_Handler,
		},
		{
			MethodName: "GetKycList",
			Handler:    _UserManagement_GetKycList_Handler,
		},
		{
			MethodName: "AssignKycToAdmin",
			Handler:    _UserManagement_AssignKycToAdmin_Handler,
		},
		{
			MethodName: "ValidateAddress",
			Handler:    _UserManagement_ValidateAddress_Handler,
		},
		{
			MethodName: "ValidateBasicInfo",
			Handler:    _UserManagement_ValidateBasicInfo_Handler,
		},
		{
			MethodName: "GetValidatedBasicInfo",
			Handler:    _UserManagement_GetValidatedBasicInfo_Handler,
		},
		{
			MethodName: "GetValidatedCardBank",
			Handler:    _UserManagement_GetValidatedCardBank_Handler,
		},
		{
			MethodName: "GetValidatedIban",
			Handler:    _UserManagement_GetValidatedIban_Handler,
		},
		{
			MethodName: "ResendRegisterSMS",
			Handler:    _UserManagement_ResendRegisterSMS_Handler,
		},
		{
			MethodName: "ChangeKycAllStatus",
			Handler:    _UserManagement_ChangeKycAllStatus_Handler,
		},
		{
			MethodName: "CallLandLineNumber",
			Handler:    _UserManagement_CallLandLineNumber_Handler,
		},
		{
			MethodName: "VerifyLandLineNumber",
			Handler:    _UserManagement_VerifyLandLineNumber_Handler,
		},
		{
			MethodName: "VerifyLandLineNumberByAdmin",
			Handler:    _UserManagement_VerifyLandLineNumberByAdmin_Handler,
		},
		{
			MethodName: "ChangeKYCStatusAll",
			Handler:    _UserManagement_ChangeKYCStatusAll_Handler,
		},
		{
			MethodName: "AssignKycToMe",
			Handler:    _UserManagement_AssignKycToMe_Handler,
		},
		{
			MethodName: "RevokeAdminKyc",
			Handler:    _UserManagement_RevokeAdminKyc_Handler,
		},
		{
			MethodName: "RetryCheckCardAndIban",
			Handler:    _UserManagement_RetryCheckCardAndIban_Handler,
		},
		{
			MethodName: "ListCardsAndIban",
			Handler:    _UserManagement_ListCardsAndIban_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _UserManagement_UpdateAddress_Handler,
		},
		{
			MethodName: "GetBasicInfo",
			Handler:    _UserManagement_GetBasicInfo_Handler,
		},
		{
			MethodName: "UpdateBasicInfoByAdmin",
			Handler:    _UserManagement_UpdateBasicInfoByAdmin_Handler,
		},
		{
			MethodName: "ResendForgetPasswordSMS",
			Handler:    _UserManagement_ResendForgetPasswordSMS_Handler,
		},
		{
			MethodName: "FlagList",
			Handler:    _UserManagement_FlagList_Handler,
		},
		{
			MethodName: "GetRejectionReasons",
			Handler:    _UserManagement_GetRejectionReasons_Handler,
		},
		{
			MethodName: "AddParentReferralById",
			Handler:    _UserManagement_AddParentReferralById_Handler,
		},
		{
			MethodName: "GetALLAdmin",
			Handler:    _UserManagement_GetALLAdmin_Handler,
		},
		{
			MethodName: "IbanSanity",
			Handler:    _UserManagement_IbanSanity_Handler,
		},
		{
			MethodName: "CardSanity",
			Handler:    _UserManagement_CardSanity_Handler,
		},
		{
			MethodName: "GetUserSanity",
			Handler:    _UserManagement_GetUserSanity_Handler,
		},
		{
			MethodName: "FilterUserSanity",
			Handler:    _UserManagement_FilterUserSanity_Handler,
		},
		{
			MethodName: "GetRefererInfoSanity",
			Handler:    _UserManagement_GetRefererInfoSanity_Handler,
		},
		{
			MethodName: "GetUserByAddress",
			Handler:    _UserManagement_GetUserByAddress_Handler,
		},
		{
			MethodName: "GetUserByMemo",
			Handler:    _UserManagement_GetUserByMemo_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _UserManagement_GetAddress_Handler,
		},
		{
			MethodName: "GetAddressByUserID",
			Handler:    _UserManagement_GetAddressByUserID_Handler,
		},
		{
			MethodName: "GetAndroidConfig",
			Handler:    _UserManagement_GetAndroidConfig_Handler,
		},
		{
			MethodName: "UpdateAndroidConfig",
			Handler:    _UserManagement_UpdateAndroidConfig_Handler,
		},
		{
			MethodName: "DoesAddressBelongsToRabex",
			Handler:    _UserManagement_DoesAddressBelongsToRabex_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "usermnm/services.proto",
}
