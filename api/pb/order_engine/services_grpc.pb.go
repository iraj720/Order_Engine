// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: order_engine/services.proto

package order_engine

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderEngineClient is the client API for OrderEngine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderEngineClient interface {
	// SYSTEM
	//NewOrder puts new order in order-engine if market doesnt exist or its closed you will recieve an error
	//you can follow your order by order_id (subscribe to trades to see the results)
	//in response you recieve the order_status
	NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error)
	// SYSTEM
	//CancelOrder cancels order by order_id
	//it will be faster if you specify the price
	//in response you recieve the order_id(success) or an error
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	// SYSTEM
	//GetAllMarkets returns all of open markets
	//and doesnt need any parameter
	GetAllMarkets(ctx context.Context, in *GetAllMarketsRequest, opts ...grpc.CallOption) (*GetAllMarketsResponse, error)
	// SYSTEM
	//InitiateMarket start new market and make it ready to recieving orders
	InitiateMarket(ctx context.Context, in *InitiateMarketRequest, opts ...grpc.CallOption) (*InitiateMarketResponse, error)
	// SYSTEM
	//GetMarketState returns state of market at this moment
	GetMarketState(ctx context.Context, in *GetMarketStateRequest, opts ...grpc.CallOption) (*GetMarketStateResponse, error)
}

type orderEngineClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderEngineClient(cc grpc.ClientConnInterface) OrderEngineClient {
	return &orderEngineClient{cc}
}

func (c *orderEngineClient) NewOrder(ctx context.Context, in *NewOrderRequest, opts ...grpc.CallOption) (*NewOrderResponse, error) {
	out := new(NewOrderResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.order_engine.OrderEngine/NewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderEngineClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.order_engine.OrderEngine/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderEngineClient) GetAllMarkets(ctx context.Context, in *GetAllMarketsRequest, opts ...grpc.CallOption) (*GetAllMarketsResponse, error) {
	out := new(GetAllMarketsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.order_engine.OrderEngine/GetAllMarkets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderEngineClient) InitiateMarket(ctx context.Context, in *InitiateMarketRequest, opts ...grpc.CallOption) (*InitiateMarketResponse, error) {
	out := new(InitiateMarketResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.order_engine.OrderEngine/InitiateMarket", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderEngineClient) GetMarketState(ctx context.Context, in *GetMarketStateRequest, opts ...grpc.CallOption) (*GetMarketStateResponse, error) {
	out := new(GetMarketStateResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.order_engine.OrderEngine/GetMarketState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderEngineServer is the server API for OrderEngine service.
// All implementations must embed UnimplementedOrderEngineServer
// for forward compatibility
type OrderEngineServer interface {
	// SYSTEM
	//NewOrder puts new order in order-engine if market doesnt exist or its closed you will recieve an error
	//you can follow your order by order_id (subscribe to trades to see the results)
	//in response you recieve the order_status
	NewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error)
	// SYSTEM
	//CancelOrder cancels order by order_id
	//it will be faster if you specify the price
	//in response you recieve the order_id(success) or an error
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	// SYSTEM
	//GetAllMarkets returns all of open markets
	//and doesnt need any parameter
	GetAllMarkets(context.Context, *GetAllMarketsRequest) (*GetAllMarketsResponse, error)
	// SYSTEM
	//InitiateMarket start new market and make it ready to recieving orders
	InitiateMarket(context.Context, *InitiateMarketRequest) (*InitiateMarketResponse, error)
	// SYSTEM
	//GetMarketState returns state of market at this moment
	GetMarketState(context.Context, *GetMarketStateRequest) (*GetMarketStateResponse, error)
	mustEmbedUnimplementedOrderEngineServer()
}

// UnimplementedOrderEngineServer must be embedded to have forward compatible implementations.
type UnimplementedOrderEngineServer struct {
}

func (UnimplementedOrderEngineServer) NewOrder(context.Context, *NewOrderRequest) (*NewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOrder not implemented")
}
func (UnimplementedOrderEngineServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderEngineServer) GetAllMarkets(context.Context, *GetAllMarketsRequest) (*GetAllMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMarkets not implemented")
}
func (UnimplementedOrderEngineServer) InitiateMarket(context.Context, *InitiateMarketRequest) (*InitiateMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateMarket not implemented")
}
func (UnimplementedOrderEngineServer) GetMarketState(context.Context, *GetMarketStateRequest) (*GetMarketStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketState not implemented")
}
func (UnimplementedOrderEngineServer) mustEmbedUnimplementedOrderEngineServer() {}

// UnsafeOrderEngineServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderEngineServer will
// result in compilation errors.
type UnsafeOrderEngineServer interface {
	mustEmbedUnimplementedOrderEngineServer()
}

func RegisterOrderEngineServer(s grpc.ServiceRegistrar, srv OrderEngineServer) {
	s.RegisterService(&OrderEngine_ServiceDesc, srv)
}

func _OrderEngine_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderEngineServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.order_engine.OrderEngine/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderEngineServer).NewOrder(ctx, req.(*NewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderEngine_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderEngineServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.order_engine.OrderEngine/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderEngineServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderEngine_GetAllMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderEngineServer).GetAllMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.order_engine.OrderEngine/GetAllMarkets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderEngineServer).GetAllMarkets(ctx, req.(*GetAllMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderEngine_InitiateMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderEngineServer).InitiateMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.order_engine.OrderEngine/InitiateMarket",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderEngineServer).InitiateMarket(ctx, req.(*InitiateMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderEngine_GetMarketState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderEngineServer).GetMarketState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.order_engine.OrderEngine/GetMarketState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderEngineServer).GetMarketState(ctx, req.(*GetMarketStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderEngine_ServiceDesc is the grpc.ServiceDesc for OrderEngine service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderEngine_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.order_engine.OrderEngine",
	HandlerType: (*OrderEngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewOrder",
			Handler:    _OrderEngine_NewOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderEngine_CancelOrder_Handler,
		},
		{
			MethodName: "GetAllMarkets",
			Handler:    _OrderEngine_GetAllMarkets_Handler,
		},
		{
			MethodName: "InitiateMarket",
			Handler:    _OrderEngine_InitiateMarket_Handler,
		},
		{
			MethodName: "GetMarketState",
			Handler:    _OrderEngine_GetMarketState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "order_engine/services.proto",
}
