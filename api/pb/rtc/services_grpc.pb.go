// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rtc/services.proto

package rtc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RTCClient is the client API for RTC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RTCClient interface {
	// SMS
	SendLoginSMS(ctx context.Context, in *SendLoginSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendLoginSuccessSMS(ctx context.Context, in *SendLoginSuccessSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendRegisterSMS(ctx context.Context, in *SendRegisterSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendRegisterTotpSMS(ctx context.Context, in *SendRegisterTotpSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendForgotPasswordFinalizeSMS(ctx context.Context, in *SendForgotPasswordFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendForgotPasswordTOTPSMS(ctx context.Context, in *SendForgotPasswordTOTPSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendResetPasswordFinalizeSMS(ctx context.Context, in *SendResetPasswordFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendResetPasswordTOTPSMS(ctx context.Context, in *SendResetPasswordTOTPSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCodeTOTPWithdrawalTCSMS(ctx context.Context, in *SendCodeTOTPWithdrawalTCSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCodeTOTPActiveSMS(ctx context.Context, in *SendCodeTOTPActiveSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendDepositDetailsNoticeSMS(ctx context.Context, in *SendDepositDetailsNoticeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendDepositDetailsNoticeMemoSMS(ctx context.Context, in *SendDepositDetailsNoticeMemoSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendWithdrawDetailsNoticeSMS(ctx context.Context, in *SendWithdrawDetailsNoticeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendWithdrawDetailsNoticeMemoSMS(ctx context.Context, in *SendWithdrawDetailsNoticeMemoSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositInquirySubmitSMS(ctx context.Context, in *SendCryptoDepositInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositFinalizeSMS(ctx context.Context, in *SendCryptoDepositFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositFailedSMS(ctx context.Context, in *SendCryptoDepositFailedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositFrozenSMS(ctx context.Context, in *SendCryptoDepositFrozenSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositConfiscateSMS(ctx context.Context, in *SendCryptoDepositConfiscateSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawInquirySubmitSMS(ctx context.Context, in *SendCryptoWithdrawInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawCancelledSMS(ctx context.Context, in *SendCryptoWithdrawCancelledSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawFinalizeSMS(ctx context.Context, in *SendCryptoWithdrawFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawCorrectiveSMS(ctx context.Context, in *SendCryptoWithdrawCorrectiveSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositInquirySubmitSMS(ctx context.Context, in *SendTomanDepositInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositFrozenSMS(ctx context.Context, in *SendTomanDepositFrozenSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositConfiscateSMS(ctx context.Context, in *SendTomanDepositConfiscateSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositFinalizeSMS(ctx context.Context, in *SendTomanDepositFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositFailedSMS(ctx context.Context, in *SendTomanDepositFailedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawInquirySubmitSMS(ctx context.Context, in *SendTomanWithdrawInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawFinalizeSMS(ctx context.Context, in *SendTomanWithdrawFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawFrozenSMS(ctx context.Context, in *SendTomanWithdrawFrozenSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawFailedSMS(ctx context.Context, in *SendTomanWithdrawFailedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawCorrectiveSMS(ctx context.Context, in *SendTomanWithdrawCorrectiveSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendBuyFinalizeSMS(ctx context.Context, in *SendBuyFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendSellFinalizeSMS(ctx context.Context, in *SendSellFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendDistributionFinalizeSMS(ctx context.Context, in *SendDistributionFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTicketCreateSMS(ctx context.Context, in *SendTicketCreateSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTicketRespondedSMS(ctx context.Context, in *SendTicketRespondedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCSubmitSMS(ctx context.Context, in *SendKYCSubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCFinalizeSMS(ctx context.Context, in *SendKYCFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCFinalizeAnnouncementSMS(ctx context.Context, in *SendKYCFinalizeAnnouncementSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCRejectedSMS(ctx context.Context, in *SendKYCRejectedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendActiveGASMS(ctx context.Context, in *SendActiveGASMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendActiveEmailSMS(ctx context.Context, in *SendActiveEmailSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendRefAddSMS(ctx context.Context, in *SendRefAddSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTotpSMS(ctx context.Context, in *SendTotpSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendLoginTotpMainSMS(ctx context.Context, in *SendLoginTotpMainSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendEmailMfaChangeSMS(ctx context.Context, in *SendEmailMfaChangeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendGaMfaChangeSMS(ctx context.Context, in *SendGaMfaChangeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendChangePasswordMfaSMS(ctx context.Context, in *SendChangePasswordMfaSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawMfaSMS(ctx context.Context, in *SendTomanWithdrawMfaSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawMfaSMS(ctx context.Context, in *SendCryptoWithdrawMfaSMSRequest, opts ...grpc.CallOption) (*GenResponse, error)
	// Email
	SendLoginEmail(ctx context.Context, in *SendLoginEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendLoginSuccessEmail(ctx context.Context, in *SendLoginSuccessEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendRegisterEmail(ctx context.Context, in *SendRegisterEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendForgotPasswordFinalizeEmail(ctx context.Context, in *SendForgotPasswordFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendResetPasswordFinalizeEmail(ctx context.Context, in *SendResetPasswordFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCodeTOTPWithdrawalTCEmail(ctx context.Context, in *SendCodeTOTPWithdrawalTCEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCodeTOTPActiveEmail(ctx context.Context, in *SendCodeTOTPActiveEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendDepositDetailsNoticeEmail(ctx context.Context, in *SendDepositDetailsNoticeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendDepositDetailsNoticeMemoEmail(ctx context.Context, in *SendDepositDetailsNoticeMemoEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendWithdrawDetailsNoticeEmail(ctx context.Context, in *SendWithdrawDetailsNoticeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendWithdrawDetailsNoticeMemoEmail(ctx context.Context, in *SendWithdrawDetailsNoticeMemoEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositInquirySubmitEmail(ctx context.Context, in *SendCryptoDepositInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositFinalizeEmail(ctx context.Context, in *SendCryptoDepositFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositFailedEmail(ctx context.Context, in *SendCryptoDepositFailedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositFrozenEmail(ctx context.Context, in *SendCryptoDepositFrozenEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoDepositConfiscateEmail(ctx context.Context, in *SendCryptoDepositConfiscateEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawInquirySubmitEmail(ctx context.Context, in *SendCryptoWithdrawInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawCancelledEmail(ctx context.Context, in *SendCryptoWithdrawCancelledEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawFinalizeEmail(ctx context.Context, in *SendCryptoWithdrawFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendCryptoWithdrawCorrectiveEmail(ctx context.Context, in *SendCryptoWithdrawCorrectiveEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositInquirySubmitEmail(ctx context.Context, in *SendTomanDepositInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositFrozenEmail(ctx context.Context, in *SendTomanDepositFrozenEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositConfiscateEmail(ctx context.Context, in *SendTomanDepositConfiscateEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositFinalizeEmail(ctx context.Context, in *SendTomanDepositFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanDepositFailedEmail(ctx context.Context, in *SendTomanDepositFailedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawInquirySubmitEmail(ctx context.Context, in *SendTomanWithdrawInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawFinalizeEmail(ctx context.Context, in *SendTomanWithdrawFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawFrozenEmail(ctx context.Context, in *SendTomanWithdrawFrozenEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawFailedEmail(ctx context.Context, in *SendTomanWithdrawFailedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTomanWithdrawCorrectiveEmail(ctx context.Context, in *SendTomanWithdrawCorrectiveEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendBuyFinalizeEmail(ctx context.Context, in *SendBuyFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendSellFinalizeEmail(ctx context.Context, in *SendSellFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendDistributionFinalizeEmail(ctx context.Context, in *SendDistributionFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTicketCreateEmail(ctx context.Context, in *SendTicketCreateEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTicketRespondedEmail(ctx context.Context, in *SendTicketRespondedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCSubmitEmail(ctx context.Context, in *SendKYCSubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCFinalizeEmail(ctx context.Context, in *SendKYCFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCFinalizeAnnouncementEmail(ctx context.Context, in *SendKYCFinalizeAnnouncementEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendKYCRejectedEmail(ctx context.Context, in *SendKYCRejectedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendActiveGAEmail(ctx context.Context, in *SendActiveGAEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendActiveEmailEmail(ctx context.Context, in *SendActiveEmailEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendRefAddEmail(ctx context.Context, in *SendRefAddEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTotpEmail(ctx context.Context, in *SendTotpEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendLoginTotpMainEmail(ctx context.Context, in *SendLoginTotpMainEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendGaMfaChangeEmail(ctx context.Context, in *SendGaMfaChangeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendTotpMfaChangeEmail(ctx context.Context, in *SendTotpMfaChangeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	SendChangePasswordMfaEmail(ctx context.Context, in *SendChangePasswordMfaEmailRequest, opts ...grpc.CallOption) (*GenResponse, error)
	// TTS
	SendKYCTts(ctx context.Context, in *SendKYCTtsRequest, opts ...grpc.CallOption) (*GenResponse, error)
	// Combined
	SendAdminNotify(ctx context.Context, in *SendAdminNotifyRequest, opts ...grpc.CallOption) (*GenResponse, error)
}

type rTCClient struct {
	cc grpc.ClientConnInterface
}

func NewRTCClient(cc grpc.ClientConnInterface) RTCClient {
	return &rTCClient{cc}
}

func (c *rTCClient) SendLoginSMS(ctx context.Context, in *SendLoginSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendLoginSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendLoginSuccessSMS(ctx context.Context, in *SendLoginSuccessSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendLoginSuccessSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendRegisterSMS(ctx context.Context, in *SendRegisterSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendRegisterSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendRegisterTotpSMS(ctx context.Context, in *SendRegisterTotpSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendRegisterTotpSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendForgotPasswordFinalizeSMS(ctx context.Context, in *SendForgotPasswordFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendForgotPasswordFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendForgotPasswordTOTPSMS(ctx context.Context, in *SendForgotPasswordTOTPSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendForgotPasswordTOTPSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendResetPasswordFinalizeSMS(ctx context.Context, in *SendResetPasswordFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendResetPasswordFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendResetPasswordTOTPSMS(ctx context.Context, in *SendResetPasswordTOTPSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendResetPasswordTOTPSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCodeTOTPWithdrawalTCSMS(ctx context.Context, in *SendCodeTOTPWithdrawalTCSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCodeTOTPWithdrawalTCSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCodeTOTPActiveSMS(ctx context.Context, in *SendCodeTOTPActiveSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCodeTOTPActiveSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendDepositDetailsNoticeSMS(ctx context.Context, in *SendDepositDetailsNoticeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendDepositDetailsNoticeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendDepositDetailsNoticeMemoSMS(ctx context.Context, in *SendDepositDetailsNoticeMemoSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendDepositDetailsNoticeMemoSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendWithdrawDetailsNoticeSMS(ctx context.Context, in *SendWithdrawDetailsNoticeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendWithdrawDetailsNoticeMemoSMS(ctx context.Context, in *SendWithdrawDetailsNoticeMemoSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeMemoSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositInquirySubmitSMS(ctx context.Context, in *SendCryptoDepositInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositInquirySubmitSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositFinalizeSMS(ctx context.Context, in *SendCryptoDepositFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositFailedSMS(ctx context.Context, in *SendCryptoDepositFailedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositFailedSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositFrozenSMS(ctx context.Context, in *SendCryptoDepositFrozenSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositFrozenSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositConfiscateSMS(ctx context.Context, in *SendCryptoDepositConfiscateSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositConfiscateSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawInquirySubmitSMS(ctx context.Context, in *SendCryptoWithdrawInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawInquirySubmitSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawCancelledSMS(ctx context.Context, in *SendCryptoWithdrawCancelledSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawCancelledSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawFinalizeSMS(ctx context.Context, in *SendCryptoWithdrawFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawCorrectiveSMS(ctx context.Context, in *SendCryptoWithdrawCorrectiveSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawCorrectiveSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositInquirySubmitSMS(ctx context.Context, in *SendTomanDepositInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositInquirySubmitSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositFrozenSMS(ctx context.Context, in *SendTomanDepositFrozenSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositFrozenSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositConfiscateSMS(ctx context.Context, in *SendTomanDepositConfiscateSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositConfiscateSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositFinalizeSMS(ctx context.Context, in *SendTomanDepositFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositFailedSMS(ctx context.Context, in *SendTomanDepositFailedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositFailedSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawInquirySubmitSMS(ctx context.Context, in *SendTomanWithdrawInquirySubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawInquirySubmitSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawFinalizeSMS(ctx context.Context, in *SendTomanWithdrawFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawFrozenSMS(ctx context.Context, in *SendTomanWithdrawFrozenSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawFrozenSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawFailedSMS(ctx context.Context, in *SendTomanWithdrawFailedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawFailedSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawCorrectiveSMS(ctx context.Context, in *SendTomanWithdrawCorrectiveSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawCorrectiveSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendBuyFinalizeSMS(ctx context.Context, in *SendBuyFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendBuyFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendSellFinalizeSMS(ctx context.Context, in *SendSellFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendSellFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendDistributionFinalizeSMS(ctx context.Context, in *SendDistributionFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendDistributionFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTicketCreateSMS(ctx context.Context, in *SendTicketCreateSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTicketCreateSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTicketRespondedSMS(ctx context.Context, in *SendTicketRespondedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTicketRespondedSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCSubmitSMS(ctx context.Context, in *SendKYCSubmitSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCSubmitSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCFinalizeSMS(ctx context.Context, in *SendKYCFinalizeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCFinalizeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCFinalizeAnnouncementSMS(ctx context.Context, in *SendKYCFinalizeAnnouncementSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCFinalizeAnnouncementSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCRejectedSMS(ctx context.Context, in *SendKYCRejectedSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCRejectedSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendActiveGASMS(ctx context.Context, in *SendActiveGASMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendActiveGASMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendActiveEmailSMS(ctx context.Context, in *SendActiveEmailSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendActiveEmailSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendRefAddSMS(ctx context.Context, in *SendRefAddSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendRefAddSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTotpSMS(ctx context.Context, in *SendTotpSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTotpSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendLoginTotpMainSMS(ctx context.Context, in *SendLoginTotpMainSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendLoginTotpMainSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendEmailMfaChangeSMS(ctx context.Context, in *SendEmailMfaChangeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendEmailMfaChangeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendGaMfaChangeSMS(ctx context.Context, in *SendGaMfaChangeSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendGaMfaChangeSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendChangePasswordMfaSMS(ctx context.Context, in *SendChangePasswordMfaSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendChangePasswordMfaSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawMfaSMS(ctx context.Context, in *SendTomanWithdrawMfaSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawMfaSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawMfaSMS(ctx context.Context, in *SendCryptoWithdrawMfaSMSRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawMfaSMS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendLoginEmail(ctx context.Context, in *SendLoginEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendLoginEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendLoginSuccessEmail(ctx context.Context, in *SendLoginSuccessEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendLoginSuccessEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendRegisterEmail(ctx context.Context, in *SendRegisterEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendRegisterEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendForgotPasswordFinalizeEmail(ctx context.Context, in *SendForgotPasswordFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendForgotPasswordFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendResetPasswordFinalizeEmail(ctx context.Context, in *SendResetPasswordFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendResetPasswordFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCodeTOTPWithdrawalTCEmail(ctx context.Context, in *SendCodeTOTPWithdrawalTCEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCodeTOTPWithdrawalTCEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCodeTOTPActiveEmail(ctx context.Context, in *SendCodeTOTPActiveEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCodeTOTPActiveEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendDepositDetailsNoticeEmail(ctx context.Context, in *SendDepositDetailsNoticeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendDepositDetailsNoticeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendDepositDetailsNoticeMemoEmail(ctx context.Context, in *SendDepositDetailsNoticeMemoEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendDepositDetailsNoticeMemoEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendWithdrawDetailsNoticeEmail(ctx context.Context, in *SendWithdrawDetailsNoticeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendWithdrawDetailsNoticeMemoEmail(ctx context.Context, in *SendWithdrawDetailsNoticeMemoEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeMemoEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositInquirySubmitEmail(ctx context.Context, in *SendCryptoDepositInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositInquirySubmitEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositFinalizeEmail(ctx context.Context, in *SendCryptoDepositFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositFailedEmail(ctx context.Context, in *SendCryptoDepositFailedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositFailedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositFrozenEmail(ctx context.Context, in *SendCryptoDepositFrozenEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositFrozenEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoDepositConfiscateEmail(ctx context.Context, in *SendCryptoDepositConfiscateEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoDepositConfiscateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawInquirySubmitEmail(ctx context.Context, in *SendCryptoWithdrawInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawInquirySubmitEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawCancelledEmail(ctx context.Context, in *SendCryptoWithdrawCancelledEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawCancelledEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawFinalizeEmail(ctx context.Context, in *SendCryptoWithdrawFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendCryptoWithdrawCorrectiveEmail(ctx context.Context, in *SendCryptoWithdrawCorrectiveEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendCryptoWithdrawCorrectiveEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositInquirySubmitEmail(ctx context.Context, in *SendTomanDepositInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositInquirySubmitEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositFrozenEmail(ctx context.Context, in *SendTomanDepositFrozenEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositFrozenEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositConfiscateEmail(ctx context.Context, in *SendTomanDepositConfiscateEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositConfiscateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositFinalizeEmail(ctx context.Context, in *SendTomanDepositFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanDepositFailedEmail(ctx context.Context, in *SendTomanDepositFailedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanDepositFailedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawInquirySubmitEmail(ctx context.Context, in *SendTomanWithdrawInquirySubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawInquirySubmitEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawFinalizeEmail(ctx context.Context, in *SendTomanWithdrawFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawFrozenEmail(ctx context.Context, in *SendTomanWithdrawFrozenEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawFrozenEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawFailedEmail(ctx context.Context, in *SendTomanWithdrawFailedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawFailedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTomanWithdrawCorrectiveEmail(ctx context.Context, in *SendTomanWithdrawCorrectiveEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTomanWithdrawCorrectiveEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendBuyFinalizeEmail(ctx context.Context, in *SendBuyFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendBuyFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendSellFinalizeEmail(ctx context.Context, in *SendSellFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendSellFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendDistributionFinalizeEmail(ctx context.Context, in *SendDistributionFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendDistributionFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTicketCreateEmail(ctx context.Context, in *SendTicketCreateEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTicketCreateEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTicketRespondedEmail(ctx context.Context, in *SendTicketRespondedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTicketRespondedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCSubmitEmail(ctx context.Context, in *SendKYCSubmitEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCSubmitEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCFinalizeEmail(ctx context.Context, in *SendKYCFinalizeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCFinalizeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCFinalizeAnnouncementEmail(ctx context.Context, in *SendKYCFinalizeAnnouncementEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCFinalizeAnnouncementEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCRejectedEmail(ctx context.Context, in *SendKYCRejectedEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCRejectedEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendActiveGAEmail(ctx context.Context, in *SendActiveGAEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendActiveGAEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendActiveEmailEmail(ctx context.Context, in *SendActiveEmailEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendActiveEmailEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendRefAddEmail(ctx context.Context, in *SendRefAddEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendRefAddEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTotpEmail(ctx context.Context, in *SendTotpEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTotpEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendLoginTotpMainEmail(ctx context.Context, in *SendLoginTotpMainEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendLoginTotpMainEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendGaMfaChangeEmail(ctx context.Context, in *SendGaMfaChangeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendGaMfaChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendTotpMfaChangeEmail(ctx context.Context, in *SendTotpMfaChangeEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendTotpMfaChangeEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendChangePasswordMfaEmail(ctx context.Context, in *SendChangePasswordMfaEmailRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendChangePasswordMfaEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendKYCTts(ctx context.Context, in *SendKYCTtsRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendKYCTts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rTCClient) SendAdminNotify(ctx context.Context, in *SendAdminNotifyRequest, opts ...grpc.CallOption) (*GenResponse, error) {
	out := new(GenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rtc.RTC/SendAdminNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RTCServer is the server API for RTC service.
// All implementations must embed UnimplementedRTCServer
// for forward compatibility
type RTCServer interface {
	// SMS
	SendLoginSMS(context.Context, *SendLoginSMSRequest) (*GenResponse, error)
	SendLoginSuccessSMS(context.Context, *SendLoginSuccessSMSRequest) (*GenResponse, error)
	SendRegisterSMS(context.Context, *SendRegisterSMSRequest) (*GenResponse, error)
	SendRegisterTotpSMS(context.Context, *SendRegisterTotpSMSRequest) (*GenResponse, error)
	SendForgotPasswordFinalizeSMS(context.Context, *SendForgotPasswordFinalizeSMSRequest) (*GenResponse, error)
	SendForgotPasswordTOTPSMS(context.Context, *SendForgotPasswordTOTPSMSRequest) (*GenResponse, error)
	SendResetPasswordFinalizeSMS(context.Context, *SendResetPasswordFinalizeSMSRequest) (*GenResponse, error)
	SendResetPasswordTOTPSMS(context.Context, *SendResetPasswordTOTPSMSRequest) (*GenResponse, error)
	SendCodeTOTPWithdrawalTCSMS(context.Context, *SendCodeTOTPWithdrawalTCSMSRequest) (*GenResponse, error)
	SendCodeTOTPActiveSMS(context.Context, *SendCodeTOTPActiveSMSRequest) (*GenResponse, error)
	SendDepositDetailsNoticeSMS(context.Context, *SendDepositDetailsNoticeSMSRequest) (*GenResponse, error)
	SendDepositDetailsNoticeMemoSMS(context.Context, *SendDepositDetailsNoticeMemoSMSRequest) (*GenResponse, error)
	SendWithdrawDetailsNoticeSMS(context.Context, *SendWithdrawDetailsNoticeSMSRequest) (*GenResponse, error)
	SendWithdrawDetailsNoticeMemoSMS(context.Context, *SendWithdrawDetailsNoticeMemoSMSRequest) (*GenResponse, error)
	SendCryptoDepositInquirySubmitSMS(context.Context, *SendCryptoDepositInquirySubmitSMSRequest) (*GenResponse, error)
	SendCryptoDepositFinalizeSMS(context.Context, *SendCryptoDepositFinalizeSMSRequest) (*GenResponse, error)
	SendCryptoDepositFailedSMS(context.Context, *SendCryptoDepositFailedSMSRequest) (*GenResponse, error)
	SendCryptoDepositFrozenSMS(context.Context, *SendCryptoDepositFrozenSMSRequest) (*GenResponse, error)
	SendCryptoDepositConfiscateSMS(context.Context, *SendCryptoDepositConfiscateSMSRequest) (*GenResponse, error)
	SendCryptoWithdrawInquirySubmitSMS(context.Context, *SendCryptoWithdrawInquirySubmitSMSRequest) (*GenResponse, error)
	SendCryptoWithdrawCancelledSMS(context.Context, *SendCryptoWithdrawCancelledSMSRequest) (*GenResponse, error)
	SendCryptoWithdrawFinalizeSMS(context.Context, *SendCryptoWithdrawFinalizeSMSRequest) (*GenResponse, error)
	SendCryptoWithdrawCorrectiveSMS(context.Context, *SendCryptoWithdrawCorrectiveSMSRequest) (*GenResponse, error)
	SendTomanDepositInquirySubmitSMS(context.Context, *SendTomanDepositInquirySubmitSMSRequest) (*GenResponse, error)
	SendTomanDepositFrozenSMS(context.Context, *SendTomanDepositFrozenSMSRequest) (*GenResponse, error)
	SendTomanDepositConfiscateSMS(context.Context, *SendTomanDepositConfiscateSMSRequest) (*GenResponse, error)
	SendTomanDepositFinalizeSMS(context.Context, *SendTomanDepositFinalizeSMSRequest) (*GenResponse, error)
	SendTomanDepositFailedSMS(context.Context, *SendTomanDepositFailedSMSRequest) (*GenResponse, error)
	SendTomanWithdrawInquirySubmitSMS(context.Context, *SendTomanWithdrawInquirySubmitSMSRequest) (*GenResponse, error)
	SendTomanWithdrawFinalizeSMS(context.Context, *SendTomanWithdrawFinalizeSMSRequest) (*GenResponse, error)
	SendTomanWithdrawFrozenSMS(context.Context, *SendTomanWithdrawFrozenSMSRequest) (*GenResponse, error)
	SendTomanWithdrawFailedSMS(context.Context, *SendTomanWithdrawFailedSMSRequest) (*GenResponse, error)
	SendTomanWithdrawCorrectiveSMS(context.Context, *SendTomanWithdrawCorrectiveSMSRequest) (*GenResponse, error)
	SendBuyFinalizeSMS(context.Context, *SendBuyFinalizeSMSRequest) (*GenResponse, error)
	SendSellFinalizeSMS(context.Context, *SendSellFinalizeSMSRequest) (*GenResponse, error)
	SendDistributionFinalizeSMS(context.Context, *SendDistributionFinalizeSMSRequest) (*GenResponse, error)
	SendTicketCreateSMS(context.Context, *SendTicketCreateSMSRequest) (*GenResponse, error)
	SendTicketRespondedSMS(context.Context, *SendTicketRespondedSMSRequest) (*GenResponse, error)
	SendKYCSubmitSMS(context.Context, *SendKYCSubmitSMSRequest) (*GenResponse, error)
	SendKYCFinalizeSMS(context.Context, *SendKYCFinalizeSMSRequest) (*GenResponse, error)
	SendKYCFinalizeAnnouncementSMS(context.Context, *SendKYCFinalizeAnnouncementSMSRequest) (*GenResponse, error)
	SendKYCRejectedSMS(context.Context, *SendKYCRejectedSMSRequest) (*GenResponse, error)
	SendActiveGASMS(context.Context, *SendActiveGASMSRequest) (*GenResponse, error)
	SendActiveEmailSMS(context.Context, *SendActiveEmailSMSRequest) (*GenResponse, error)
	SendRefAddSMS(context.Context, *SendRefAddSMSRequest) (*GenResponse, error)
	SendTotpSMS(context.Context, *SendTotpSMSRequest) (*GenResponse, error)
	SendLoginTotpMainSMS(context.Context, *SendLoginTotpMainSMSRequest) (*GenResponse, error)
	SendEmailMfaChangeSMS(context.Context, *SendEmailMfaChangeSMSRequest) (*GenResponse, error)
	SendGaMfaChangeSMS(context.Context, *SendGaMfaChangeSMSRequest) (*GenResponse, error)
	SendChangePasswordMfaSMS(context.Context, *SendChangePasswordMfaSMSRequest) (*GenResponse, error)
	SendTomanWithdrawMfaSMS(context.Context, *SendTomanWithdrawMfaSMSRequest) (*GenResponse, error)
	SendCryptoWithdrawMfaSMS(context.Context, *SendCryptoWithdrawMfaSMSRequest) (*GenResponse, error)
	// Email
	SendLoginEmail(context.Context, *SendLoginEmailRequest) (*GenResponse, error)
	SendLoginSuccessEmail(context.Context, *SendLoginSuccessEmailRequest) (*GenResponse, error)
	SendRegisterEmail(context.Context, *SendRegisterEmailRequest) (*GenResponse, error)
	SendForgotPasswordFinalizeEmail(context.Context, *SendForgotPasswordFinalizeEmailRequest) (*GenResponse, error)
	SendResetPasswordFinalizeEmail(context.Context, *SendResetPasswordFinalizeEmailRequest) (*GenResponse, error)
	SendCodeTOTPWithdrawalTCEmail(context.Context, *SendCodeTOTPWithdrawalTCEmailRequest) (*GenResponse, error)
	SendCodeTOTPActiveEmail(context.Context, *SendCodeTOTPActiveEmailRequest) (*GenResponse, error)
	SendDepositDetailsNoticeEmail(context.Context, *SendDepositDetailsNoticeEmailRequest) (*GenResponse, error)
	SendDepositDetailsNoticeMemoEmail(context.Context, *SendDepositDetailsNoticeMemoEmailRequest) (*GenResponse, error)
	SendWithdrawDetailsNoticeEmail(context.Context, *SendWithdrawDetailsNoticeEmailRequest) (*GenResponse, error)
	SendWithdrawDetailsNoticeMemoEmail(context.Context, *SendWithdrawDetailsNoticeMemoEmailRequest) (*GenResponse, error)
	SendCryptoDepositInquirySubmitEmail(context.Context, *SendCryptoDepositInquirySubmitEmailRequest) (*GenResponse, error)
	SendCryptoDepositFinalizeEmail(context.Context, *SendCryptoDepositFinalizeEmailRequest) (*GenResponse, error)
	SendCryptoDepositFailedEmail(context.Context, *SendCryptoDepositFailedEmailRequest) (*GenResponse, error)
	SendCryptoDepositFrozenEmail(context.Context, *SendCryptoDepositFrozenEmailRequest) (*GenResponse, error)
	SendCryptoDepositConfiscateEmail(context.Context, *SendCryptoDepositConfiscateEmailRequest) (*GenResponse, error)
	SendCryptoWithdrawInquirySubmitEmail(context.Context, *SendCryptoWithdrawInquirySubmitEmailRequest) (*GenResponse, error)
	SendCryptoWithdrawCancelledEmail(context.Context, *SendCryptoWithdrawCancelledEmailRequest) (*GenResponse, error)
	SendCryptoWithdrawFinalizeEmail(context.Context, *SendCryptoWithdrawFinalizeEmailRequest) (*GenResponse, error)
	SendCryptoWithdrawCorrectiveEmail(context.Context, *SendCryptoWithdrawCorrectiveEmailRequest) (*GenResponse, error)
	SendTomanDepositInquirySubmitEmail(context.Context, *SendTomanDepositInquirySubmitEmailRequest) (*GenResponse, error)
	SendTomanDepositFrozenEmail(context.Context, *SendTomanDepositFrozenEmailRequest) (*GenResponse, error)
	SendTomanDepositConfiscateEmail(context.Context, *SendTomanDepositConfiscateEmailRequest) (*GenResponse, error)
	SendTomanDepositFinalizeEmail(context.Context, *SendTomanDepositFinalizeEmailRequest) (*GenResponse, error)
	SendTomanDepositFailedEmail(context.Context, *SendTomanDepositFailedEmailRequest) (*GenResponse, error)
	SendTomanWithdrawInquirySubmitEmail(context.Context, *SendTomanWithdrawInquirySubmitEmailRequest) (*GenResponse, error)
	SendTomanWithdrawFinalizeEmail(context.Context, *SendTomanWithdrawFinalizeEmailRequest) (*GenResponse, error)
	SendTomanWithdrawFrozenEmail(context.Context, *SendTomanWithdrawFrozenEmailRequest) (*GenResponse, error)
	SendTomanWithdrawFailedEmail(context.Context, *SendTomanWithdrawFailedEmailRequest) (*GenResponse, error)
	SendTomanWithdrawCorrectiveEmail(context.Context, *SendTomanWithdrawCorrectiveEmailRequest) (*GenResponse, error)
	SendBuyFinalizeEmail(context.Context, *SendBuyFinalizeEmailRequest) (*GenResponse, error)
	SendSellFinalizeEmail(context.Context, *SendSellFinalizeEmailRequest) (*GenResponse, error)
	SendDistributionFinalizeEmail(context.Context, *SendDistributionFinalizeEmailRequest) (*GenResponse, error)
	SendTicketCreateEmail(context.Context, *SendTicketCreateEmailRequest) (*GenResponse, error)
	SendTicketRespondedEmail(context.Context, *SendTicketRespondedEmailRequest) (*GenResponse, error)
	SendKYCSubmitEmail(context.Context, *SendKYCSubmitEmailRequest) (*GenResponse, error)
	SendKYCFinalizeEmail(context.Context, *SendKYCFinalizeEmailRequest) (*GenResponse, error)
	SendKYCFinalizeAnnouncementEmail(context.Context, *SendKYCFinalizeAnnouncementEmailRequest) (*GenResponse, error)
	SendKYCRejectedEmail(context.Context, *SendKYCRejectedEmailRequest) (*GenResponse, error)
	SendActiveGAEmail(context.Context, *SendActiveGAEmailRequest) (*GenResponse, error)
	SendActiveEmailEmail(context.Context, *SendActiveEmailEmailRequest) (*GenResponse, error)
	SendRefAddEmail(context.Context, *SendRefAddEmailRequest) (*GenResponse, error)
	SendTotpEmail(context.Context, *SendTotpEmailRequest) (*GenResponse, error)
	SendLoginTotpMainEmail(context.Context, *SendLoginTotpMainEmailRequest) (*GenResponse, error)
	SendGaMfaChangeEmail(context.Context, *SendGaMfaChangeEmailRequest) (*GenResponse, error)
	SendTotpMfaChangeEmail(context.Context, *SendTotpMfaChangeEmailRequest) (*GenResponse, error)
	SendChangePasswordMfaEmail(context.Context, *SendChangePasswordMfaEmailRequest) (*GenResponse, error)
	// TTS
	SendKYCTts(context.Context, *SendKYCTtsRequest) (*GenResponse, error)
	// Combined
	SendAdminNotify(context.Context, *SendAdminNotifyRequest) (*GenResponse, error)
	mustEmbedUnimplementedRTCServer()
}

// UnimplementedRTCServer must be embedded to have forward compatible implementations.
type UnimplementedRTCServer struct {
}

func (UnimplementedRTCServer) SendLoginSMS(context.Context, *SendLoginSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginSMS not implemented")
}
func (UnimplementedRTCServer) SendLoginSuccessSMS(context.Context, *SendLoginSuccessSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginSuccessSMS not implemented")
}
func (UnimplementedRTCServer) SendRegisterSMS(context.Context, *SendRegisterSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterSMS not implemented")
}
func (UnimplementedRTCServer) SendRegisterTotpSMS(context.Context, *SendRegisterTotpSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterTotpSMS not implemented")
}
func (UnimplementedRTCServer) SendForgotPasswordFinalizeSMS(context.Context, *SendForgotPasswordFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendForgotPasswordTOTPSMS(context.Context, *SendForgotPasswordTOTPSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordTOTPSMS not implemented")
}
func (UnimplementedRTCServer) SendResetPasswordFinalizeSMS(context.Context, *SendResetPasswordFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendResetPasswordTOTPSMS(context.Context, *SendResetPasswordTOTPSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordTOTPSMS not implemented")
}
func (UnimplementedRTCServer) SendCodeTOTPWithdrawalTCSMS(context.Context, *SendCodeTOTPWithdrawalTCSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeTOTPWithdrawalTCSMS not implemented")
}
func (UnimplementedRTCServer) SendCodeTOTPActiveSMS(context.Context, *SendCodeTOTPActiveSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeTOTPActiveSMS not implemented")
}
func (UnimplementedRTCServer) SendDepositDetailsNoticeSMS(context.Context, *SendDepositDetailsNoticeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDepositDetailsNoticeSMS not implemented")
}
func (UnimplementedRTCServer) SendDepositDetailsNoticeMemoSMS(context.Context, *SendDepositDetailsNoticeMemoSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDepositDetailsNoticeMemoSMS not implemented")
}
func (UnimplementedRTCServer) SendWithdrawDetailsNoticeSMS(context.Context, *SendWithdrawDetailsNoticeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWithdrawDetailsNoticeSMS not implemented")
}
func (UnimplementedRTCServer) SendWithdrawDetailsNoticeMemoSMS(context.Context, *SendWithdrawDetailsNoticeMemoSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWithdrawDetailsNoticeMemoSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositInquirySubmitSMS(context.Context, *SendCryptoDepositInquirySubmitSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositInquirySubmitSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositFinalizeSMS(context.Context, *SendCryptoDepositFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositFailedSMS(context.Context, *SendCryptoDepositFailedSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositFailedSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositFrozenSMS(context.Context, *SendCryptoDepositFrozenSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositFrozenSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositConfiscateSMS(context.Context, *SendCryptoDepositConfiscateSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositConfiscateSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawInquirySubmitSMS(context.Context, *SendCryptoWithdrawInquirySubmitSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawInquirySubmitSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawCancelledSMS(context.Context, *SendCryptoWithdrawCancelledSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawCancelledSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawFinalizeSMS(context.Context, *SendCryptoWithdrawFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawCorrectiveSMS(context.Context, *SendCryptoWithdrawCorrectiveSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawCorrectiveSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositInquirySubmitSMS(context.Context, *SendTomanDepositInquirySubmitSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositInquirySubmitSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositFrozenSMS(context.Context, *SendTomanDepositFrozenSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositFrozenSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositConfiscateSMS(context.Context, *SendTomanDepositConfiscateSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositConfiscateSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositFinalizeSMS(context.Context, *SendTomanDepositFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositFailedSMS(context.Context, *SendTomanDepositFailedSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositFailedSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawInquirySubmitSMS(context.Context, *SendTomanWithdrawInquirySubmitSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawInquirySubmitSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawFinalizeSMS(context.Context, *SendTomanWithdrawFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawFrozenSMS(context.Context, *SendTomanWithdrawFrozenSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawFrozenSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawFailedSMS(context.Context, *SendTomanWithdrawFailedSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawFailedSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawCorrectiveSMS(context.Context, *SendTomanWithdrawCorrectiveSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawCorrectiveSMS not implemented")
}
func (UnimplementedRTCServer) SendBuyFinalizeSMS(context.Context, *SendBuyFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBuyFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendSellFinalizeSMS(context.Context, *SendSellFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSellFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendDistributionFinalizeSMS(context.Context, *SendDistributionFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDistributionFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendTicketCreateSMS(context.Context, *SendTicketCreateSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicketCreateSMS not implemented")
}
func (UnimplementedRTCServer) SendTicketRespondedSMS(context.Context, *SendTicketRespondedSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicketRespondedSMS not implemented")
}
func (UnimplementedRTCServer) SendKYCSubmitSMS(context.Context, *SendKYCSubmitSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCSubmitSMS not implemented")
}
func (UnimplementedRTCServer) SendKYCFinalizeSMS(context.Context, *SendKYCFinalizeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCFinalizeSMS not implemented")
}
func (UnimplementedRTCServer) SendKYCFinalizeAnnouncementSMS(context.Context, *SendKYCFinalizeAnnouncementSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCFinalizeAnnouncementSMS not implemented")
}
func (UnimplementedRTCServer) SendKYCRejectedSMS(context.Context, *SendKYCRejectedSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCRejectedSMS not implemented")
}
func (UnimplementedRTCServer) SendActiveGASMS(context.Context, *SendActiveGASMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActiveGASMS not implemented")
}
func (UnimplementedRTCServer) SendActiveEmailSMS(context.Context, *SendActiveEmailSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActiveEmailSMS not implemented")
}
func (UnimplementedRTCServer) SendRefAddSMS(context.Context, *SendRefAddSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRefAddSMS not implemented")
}
func (UnimplementedRTCServer) SendTotpSMS(context.Context, *SendTotpSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTotpSMS not implemented")
}
func (UnimplementedRTCServer) SendLoginTotpMainSMS(context.Context, *SendLoginTotpMainSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginTotpMainSMS not implemented")
}
func (UnimplementedRTCServer) SendEmailMfaChangeSMS(context.Context, *SendEmailMfaChangeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailMfaChangeSMS not implemented")
}
func (UnimplementedRTCServer) SendGaMfaChangeSMS(context.Context, *SendGaMfaChangeSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGaMfaChangeSMS not implemented")
}
func (UnimplementedRTCServer) SendChangePasswordMfaSMS(context.Context, *SendChangePasswordMfaSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChangePasswordMfaSMS not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawMfaSMS(context.Context, *SendTomanWithdrawMfaSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawMfaSMS not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawMfaSMS(context.Context, *SendCryptoWithdrawMfaSMSRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawMfaSMS not implemented")
}
func (UnimplementedRTCServer) SendLoginEmail(context.Context, *SendLoginEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginEmail not implemented")
}
func (UnimplementedRTCServer) SendLoginSuccessEmail(context.Context, *SendLoginSuccessEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginSuccessEmail not implemented")
}
func (UnimplementedRTCServer) SendRegisterEmail(context.Context, *SendRegisterEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRegisterEmail not implemented")
}
func (UnimplementedRTCServer) SendForgotPasswordFinalizeEmail(context.Context, *SendForgotPasswordFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPasswordFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendResetPasswordFinalizeEmail(context.Context, *SendResetPasswordFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendResetPasswordFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendCodeTOTPWithdrawalTCEmail(context.Context, *SendCodeTOTPWithdrawalTCEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeTOTPWithdrawalTCEmail not implemented")
}
func (UnimplementedRTCServer) SendCodeTOTPActiveEmail(context.Context, *SendCodeTOTPActiveEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCodeTOTPActiveEmail not implemented")
}
func (UnimplementedRTCServer) SendDepositDetailsNoticeEmail(context.Context, *SendDepositDetailsNoticeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDepositDetailsNoticeEmail not implemented")
}
func (UnimplementedRTCServer) SendDepositDetailsNoticeMemoEmail(context.Context, *SendDepositDetailsNoticeMemoEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDepositDetailsNoticeMemoEmail not implemented")
}
func (UnimplementedRTCServer) SendWithdrawDetailsNoticeEmail(context.Context, *SendWithdrawDetailsNoticeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWithdrawDetailsNoticeEmail not implemented")
}
func (UnimplementedRTCServer) SendWithdrawDetailsNoticeMemoEmail(context.Context, *SendWithdrawDetailsNoticeMemoEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWithdrawDetailsNoticeMemoEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositInquirySubmitEmail(context.Context, *SendCryptoDepositInquirySubmitEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositInquirySubmitEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositFinalizeEmail(context.Context, *SendCryptoDepositFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositFailedEmail(context.Context, *SendCryptoDepositFailedEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositFailedEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositFrozenEmail(context.Context, *SendCryptoDepositFrozenEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositFrozenEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoDepositConfiscateEmail(context.Context, *SendCryptoDepositConfiscateEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoDepositConfiscateEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawInquirySubmitEmail(context.Context, *SendCryptoWithdrawInquirySubmitEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawInquirySubmitEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawCancelledEmail(context.Context, *SendCryptoWithdrawCancelledEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawCancelledEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawFinalizeEmail(context.Context, *SendCryptoWithdrawFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendCryptoWithdrawCorrectiveEmail(context.Context, *SendCryptoWithdrawCorrectiveEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCryptoWithdrawCorrectiveEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositInquirySubmitEmail(context.Context, *SendTomanDepositInquirySubmitEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositInquirySubmitEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositFrozenEmail(context.Context, *SendTomanDepositFrozenEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositFrozenEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositConfiscateEmail(context.Context, *SendTomanDepositConfiscateEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositConfiscateEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositFinalizeEmail(context.Context, *SendTomanDepositFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanDepositFailedEmail(context.Context, *SendTomanDepositFailedEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanDepositFailedEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawInquirySubmitEmail(context.Context, *SendTomanWithdrawInquirySubmitEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawInquirySubmitEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawFinalizeEmail(context.Context, *SendTomanWithdrawFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawFrozenEmail(context.Context, *SendTomanWithdrawFrozenEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawFrozenEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawFailedEmail(context.Context, *SendTomanWithdrawFailedEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawFailedEmail not implemented")
}
func (UnimplementedRTCServer) SendTomanWithdrawCorrectiveEmail(context.Context, *SendTomanWithdrawCorrectiveEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTomanWithdrawCorrectiveEmail not implemented")
}
func (UnimplementedRTCServer) SendBuyFinalizeEmail(context.Context, *SendBuyFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBuyFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendSellFinalizeEmail(context.Context, *SendSellFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSellFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendDistributionFinalizeEmail(context.Context, *SendDistributionFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDistributionFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendTicketCreateEmail(context.Context, *SendTicketCreateEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicketCreateEmail not implemented")
}
func (UnimplementedRTCServer) SendTicketRespondedEmail(context.Context, *SendTicketRespondedEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTicketRespondedEmail not implemented")
}
func (UnimplementedRTCServer) SendKYCSubmitEmail(context.Context, *SendKYCSubmitEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCSubmitEmail not implemented")
}
func (UnimplementedRTCServer) SendKYCFinalizeEmail(context.Context, *SendKYCFinalizeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCFinalizeEmail not implemented")
}
func (UnimplementedRTCServer) SendKYCFinalizeAnnouncementEmail(context.Context, *SendKYCFinalizeAnnouncementEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCFinalizeAnnouncementEmail not implemented")
}
func (UnimplementedRTCServer) SendKYCRejectedEmail(context.Context, *SendKYCRejectedEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCRejectedEmail not implemented")
}
func (UnimplementedRTCServer) SendActiveGAEmail(context.Context, *SendActiveGAEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActiveGAEmail not implemented")
}
func (UnimplementedRTCServer) SendActiveEmailEmail(context.Context, *SendActiveEmailEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendActiveEmailEmail not implemented")
}
func (UnimplementedRTCServer) SendRefAddEmail(context.Context, *SendRefAddEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRefAddEmail not implemented")
}
func (UnimplementedRTCServer) SendTotpEmail(context.Context, *SendTotpEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTotpEmail not implemented")
}
func (UnimplementedRTCServer) SendLoginTotpMainEmail(context.Context, *SendLoginTotpMainEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendLoginTotpMainEmail not implemented")
}
func (UnimplementedRTCServer) SendGaMfaChangeEmail(context.Context, *SendGaMfaChangeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendGaMfaChangeEmail not implemented")
}
func (UnimplementedRTCServer) SendTotpMfaChangeEmail(context.Context, *SendTotpMfaChangeEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTotpMfaChangeEmail not implemented")
}
func (UnimplementedRTCServer) SendChangePasswordMfaEmail(context.Context, *SendChangePasswordMfaEmailRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendChangePasswordMfaEmail not implemented")
}
func (UnimplementedRTCServer) SendKYCTts(context.Context, *SendKYCTtsRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendKYCTts not implemented")
}
func (UnimplementedRTCServer) SendAdminNotify(context.Context, *SendAdminNotifyRequest) (*GenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAdminNotify not implemented")
}
func (UnimplementedRTCServer) mustEmbedUnimplementedRTCServer() {}

// UnsafeRTCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RTCServer will
// result in compilation errors.
type UnsafeRTCServer interface {
	mustEmbedUnimplementedRTCServer()
}

func RegisterRTCServer(s grpc.ServiceRegistrar, srv RTCServer) {
	s.RegisterService(&RTC_ServiceDesc, srv)
}

func _RTC_SendLoginSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLoginSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendLoginSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendLoginSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendLoginSMS(ctx, req.(*SendLoginSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendLoginSuccessSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLoginSuccessSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendLoginSuccessSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendLoginSuccessSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendLoginSuccessSMS(ctx, req.(*SendLoginSuccessSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendRegisterSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegisterSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendRegisterSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendRegisterSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendRegisterSMS(ctx, req.(*SendRegisterSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendRegisterTotpSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegisterTotpSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendRegisterTotpSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendRegisterTotpSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendRegisterTotpSMS(ctx, req.(*SendRegisterTotpSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendForgotPasswordFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendForgotPasswordFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendForgotPasswordFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendForgotPasswordFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendForgotPasswordFinalizeSMS(ctx, req.(*SendForgotPasswordFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendForgotPasswordTOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendForgotPasswordTOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendForgotPasswordTOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendForgotPasswordTOTPSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendForgotPasswordTOTPSMS(ctx, req.(*SendForgotPasswordTOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendResetPasswordFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetPasswordFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendResetPasswordFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendResetPasswordFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendResetPasswordFinalizeSMS(ctx, req.(*SendResetPasswordFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendResetPasswordTOTPSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetPasswordTOTPSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendResetPasswordTOTPSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendResetPasswordTOTPSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendResetPasswordTOTPSMS(ctx, req.(*SendResetPasswordTOTPSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCodeTOTPWithdrawalTCSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeTOTPWithdrawalTCSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCodeTOTPWithdrawalTCSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCodeTOTPWithdrawalTCSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCodeTOTPWithdrawalTCSMS(ctx, req.(*SendCodeTOTPWithdrawalTCSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCodeTOTPActiveSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeTOTPActiveSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCodeTOTPActiveSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCodeTOTPActiveSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCodeTOTPActiveSMS(ctx, req.(*SendCodeTOTPActiveSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendDepositDetailsNoticeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDepositDetailsNoticeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendDepositDetailsNoticeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendDepositDetailsNoticeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendDepositDetailsNoticeSMS(ctx, req.(*SendDepositDetailsNoticeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendDepositDetailsNoticeMemoSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDepositDetailsNoticeMemoSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendDepositDetailsNoticeMemoSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendDepositDetailsNoticeMemoSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendDepositDetailsNoticeMemoSMS(ctx, req.(*SendDepositDetailsNoticeMemoSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendWithdrawDetailsNoticeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWithdrawDetailsNoticeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendWithdrawDetailsNoticeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendWithdrawDetailsNoticeSMS(ctx, req.(*SendWithdrawDetailsNoticeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendWithdrawDetailsNoticeMemoSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWithdrawDetailsNoticeMemoSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendWithdrawDetailsNoticeMemoSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeMemoSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendWithdrawDetailsNoticeMemoSMS(ctx, req.(*SendWithdrawDetailsNoticeMemoSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositInquirySubmitSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositInquirySubmitSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositInquirySubmitSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositInquirySubmitSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositInquirySubmitSMS(ctx, req.(*SendCryptoDepositInquirySubmitSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositFinalizeSMS(ctx, req.(*SendCryptoDepositFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositFailedSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositFailedSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositFailedSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositFailedSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositFailedSMS(ctx, req.(*SendCryptoDepositFailedSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositFrozenSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositFrozenSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositFrozenSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositFrozenSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositFrozenSMS(ctx, req.(*SendCryptoDepositFrozenSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositConfiscateSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositConfiscateSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositConfiscateSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositConfiscateSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositConfiscateSMS(ctx, req.(*SendCryptoDepositConfiscateSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawInquirySubmitSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawInquirySubmitSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawInquirySubmitSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawInquirySubmitSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawInquirySubmitSMS(ctx, req.(*SendCryptoWithdrawInquirySubmitSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawCancelledSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawCancelledSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawCancelledSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawCancelledSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawCancelledSMS(ctx, req.(*SendCryptoWithdrawCancelledSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawFinalizeSMS(ctx, req.(*SendCryptoWithdrawFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawCorrectiveSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawCorrectiveSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawCorrectiveSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawCorrectiveSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawCorrectiveSMS(ctx, req.(*SendCryptoWithdrawCorrectiveSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositInquirySubmitSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositInquirySubmitSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositInquirySubmitSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositInquirySubmitSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositInquirySubmitSMS(ctx, req.(*SendTomanDepositInquirySubmitSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositFrozenSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositFrozenSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositFrozenSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositFrozenSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositFrozenSMS(ctx, req.(*SendTomanDepositFrozenSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositConfiscateSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositConfiscateSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositConfiscateSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositConfiscateSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositConfiscateSMS(ctx, req.(*SendTomanDepositConfiscateSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositFinalizeSMS(ctx, req.(*SendTomanDepositFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositFailedSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositFailedSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositFailedSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositFailedSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositFailedSMS(ctx, req.(*SendTomanDepositFailedSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawInquirySubmitSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawInquirySubmitSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawInquirySubmitSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawInquirySubmitSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawInquirySubmitSMS(ctx, req.(*SendTomanWithdrawInquirySubmitSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawFinalizeSMS(ctx, req.(*SendTomanWithdrawFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawFrozenSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawFrozenSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawFrozenSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawFrozenSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawFrozenSMS(ctx, req.(*SendTomanWithdrawFrozenSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawFailedSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawFailedSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawFailedSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawFailedSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawFailedSMS(ctx, req.(*SendTomanWithdrawFailedSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawCorrectiveSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawCorrectiveSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawCorrectiveSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawCorrectiveSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawCorrectiveSMS(ctx, req.(*SendTomanWithdrawCorrectiveSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendBuyFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBuyFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendBuyFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendBuyFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendBuyFinalizeSMS(ctx, req.(*SendBuyFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendSellFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSellFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendSellFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendSellFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendSellFinalizeSMS(ctx, req.(*SendSellFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendDistributionFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDistributionFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendDistributionFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendDistributionFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendDistributionFinalizeSMS(ctx, req.(*SendDistributionFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTicketCreateSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketCreateSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTicketCreateSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTicketCreateSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTicketCreateSMS(ctx, req.(*SendTicketCreateSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTicketRespondedSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketRespondedSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTicketRespondedSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTicketRespondedSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTicketRespondedSMS(ctx, req.(*SendTicketRespondedSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCSubmitSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCSubmitSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCSubmitSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCSubmitSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCSubmitSMS(ctx, req.(*SendKYCSubmitSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCFinalizeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCFinalizeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCFinalizeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCFinalizeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCFinalizeSMS(ctx, req.(*SendKYCFinalizeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCFinalizeAnnouncementSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCFinalizeAnnouncementSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCFinalizeAnnouncementSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCFinalizeAnnouncementSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCFinalizeAnnouncementSMS(ctx, req.(*SendKYCFinalizeAnnouncementSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCRejectedSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCRejectedSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCRejectedSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCRejectedSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCRejectedSMS(ctx, req.(*SendKYCRejectedSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendActiveGASMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActiveGASMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendActiveGASMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendActiveGASMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendActiveGASMS(ctx, req.(*SendActiveGASMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendActiveEmailSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActiveEmailSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendActiveEmailSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendActiveEmailSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendActiveEmailSMS(ctx, req.(*SendActiveEmailSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendRefAddSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRefAddSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendRefAddSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendRefAddSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendRefAddSMS(ctx, req.(*SendRefAddSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTotpSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTotpSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTotpSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTotpSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTotpSMS(ctx, req.(*SendTotpSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendLoginTotpMainSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLoginTotpMainSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendLoginTotpMainSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendLoginTotpMainSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendLoginTotpMainSMS(ctx, req.(*SendLoginTotpMainSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendEmailMfaChangeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailMfaChangeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendEmailMfaChangeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendEmailMfaChangeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendEmailMfaChangeSMS(ctx, req.(*SendEmailMfaChangeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendGaMfaChangeSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGaMfaChangeSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendGaMfaChangeSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendGaMfaChangeSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendGaMfaChangeSMS(ctx, req.(*SendGaMfaChangeSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendChangePasswordMfaSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChangePasswordMfaSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendChangePasswordMfaSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendChangePasswordMfaSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendChangePasswordMfaSMS(ctx, req.(*SendChangePasswordMfaSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawMfaSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawMfaSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawMfaSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawMfaSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawMfaSMS(ctx, req.(*SendTomanWithdrawMfaSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawMfaSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawMfaSMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawMfaSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawMfaSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawMfaSMS(ctx, req.(*SendCryptoWithdrawMfaSMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendLoginEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLoginEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendLoginEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendLoginEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendLoginEmail(ctx, req.(*SendLoginEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendLoginSuccessEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLoginSuccessEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendLoginSuccessEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendLoginSuccessEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendLoginSuccessEmail(ctx, req.(*SendLoginSuccessEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendRegisterEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRegisterEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendRegisterEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendRegisterEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendRegisterEmail(ctx, req.(*SendRegisterEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendForgotPasswordFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendForgotPasswordFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendForgotPasswordFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendForgotPasswordFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendForgotPasswordFinalizeEmail(ctx, req.(*SendForgotPasswordFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendResetPasswordFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendResetPasswordFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendResetPasswordFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendResetPasswordFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendResetPasswordFinalizeEmail(ctx, req.(*SendResetPasswordFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCodeTOTPWithdrawalTCEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeTOTPWithdrawalTCEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCodeTOTPWithdrawalTCEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCodeTOTPWithdrawalTCEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCodeTOTPWithdrawalTCEmail(ctx, req.(*SendCodeTOTPWithdrawalTCEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCodeTOTPActiveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeTOTPActiveEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCodeTOTPActiveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCodeTOTPActiveEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCodeTOTPActiveEmail(ctx, req.(*SendCodeTOTPActiveEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendDepositDetailsNoticeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDepositDetailsNoticeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendDepositDetailsNoticeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendDepositDetailsNoticeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendDepositDetailsNoticeEmail(ctx, req.(*SendDepositDetailsNoticeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendDepositDetailsNoticeMemoEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDepositDetailsNoticeMemoEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendDepositDetailsNoticeMemoEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendDepositDetailsNoticeMemoEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendDepositDetailsNoticeMemoEmail(ctx, req.(*SendDepositDetailsNoticeMemoEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendWithdrawDetailsNoticeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWithdrawDetailsNoticeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendWithdrawDetailsNoticeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendWithdrawDetailsNoticeEmail(ctx, req.(*SendWithdrawDetailsNoticeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendWithdrawDetailsNoticeMemoEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWithdrawDetailsNoticeMemoEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendWithdrawDetailsNoticeMemoEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendWithdrawDetailsNoticeMemoEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendWithdrawDetailsNoticeMemoEmail(ctx, req.(*SendWithdrawDetailsNoticeMemoEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositInquirySubmitEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositInquirySubmitEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositInquirySubmitEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositInquirySubmitEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositInquirySubmitEmail(ctx, req.(*SendCryptoDepositInquirySubmitEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositFinalizeEmail(ctx, req.(*SendCryptoDepositFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositFailedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositFailedEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositFailedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositFailedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositFailedEmail(ctx, req.(*SendCryptoDepositFailedEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositFrozenEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositFrozenEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositFrozenEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositFrozenEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositFrozenEmail(ctx, req.(*SendCryptoDepositFrozenEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoDepositConfiscateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoDepositConfiscateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoDepositConfiscateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoDepositConfiscateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoDepositConfiscateEmail(ctx, req.(*SendCryptoDepositConfiscateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawInquirySubmitEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawInquirySubmitEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawInquirySubmitEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawInquirySubmitEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawInquirySubmitEmail(ctx, req.(*SendCryptoWithdrawInquirySubmitEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawCancelledEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawCancelledEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawCancelledEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawCancelledEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawCancelledEmail(ctx, req.(*SendCryptoWithdrawCancelledEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawFinalizeEmail(ctx, req.(*SendCryptoWithdrawFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendCryptoWithdrawCorrectiveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCryptoWithdrawCorrectiveEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendCryptoWithdrawCorrectiveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendCryptoWithdrawCorrectiveEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendCryptoWithdrawCorrectiveEmail(ctx, req.(*SendCryptoWithdrawCorrectiveEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositInquirySubmitEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositInquirySubmitEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositInquirySubmitEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositInquirySubmitEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositInquirySubmitEmail(ctx, req.(*SendTomanDepositInquirySubmitEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositFrozenEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositFrozenEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositFrozenEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositFrozenEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositFrozenEmail(ctx, req.(*SendTomanDepositFrozenEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositConfiscateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositConfiscateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositConfiscateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositConfiscateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositConfiscateEmail(ctx, req.(*SendTomanDepositConfiscateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositFinalizeEmail(ctx, req.(*SendTomanDepositFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanDepositFailedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanDepositFailedEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanDepositFailedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanDepositFailedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanDepositFailedEmail(ctx, req.(*SendTomanDepositFailedEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawInquirySubmitEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawInquirySubmitEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawInquirySubmitEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawInquirySubmitEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawInquirySubmitEmail(ctx, req.(*SendTomanWithdrawInquirySubmitEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawFinalizeEmail(ctx, req.(*SendTomanWithdrawFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawFrozenEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawFrozenEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawFrozenEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawFrozenEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawFrozenEmail(ctx, req.(*SendTomanWithdrawFrozenEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawFailedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawFailedEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawFailedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawFailedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawFailedEmail(ctx, req.(*SendTomanWithdrawFailedEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTomanWithdrawCorrectiveEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTomanWithdrawCorrectiveEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTomanWithdrawCorrectiveEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTomanWithdrawCorrectiveEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTomanWithdrawCorrectiveEmail(ctx, req.(*SendTomanWithdrawCorrectiveEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendBuyFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBuyFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendBuyFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendBuyFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendBuyFinalizeEmail(ctx, req.(*SendBuyFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendSellFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSellFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendSellFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendSellFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendSellFinalizeEmail(ctx, req.(*SendSellFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendDistributionFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDistributionFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendDistributionFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendDistributionFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendDistributionFinalizeEmail(ctx, req.(*SendDistributionFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTicketCreateEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketCreateEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTicketCreateEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTicketCreateEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTicketCreateEmail(ctx, req.(*SendTicketCreateEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTicketRespondedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTicketRespondedEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTicketRespondedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTicketRespondedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTicketRespondedEmail(ctx, req.(*SendTicketRespondedEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCSubmitEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCSubmitEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCSubmitEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCSubmitEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCSubmitEmail(ctx, req.(*SendKYCSubmitEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCFinalizeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCFinalizeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCFinalizeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCFinalizeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCFinalizeEmail(ctx, req.(*SendKYCFinalizeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCFinalizeAnnouncementEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCFinalizeAnnouncementEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCFinalizeAnnouncementEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCFinalizeAnnouncementEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCFinalizeAnnouncementEmail(ctx, req.(*SendKYCFinalizeAnnouncementEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCRejectedEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCRejectedEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCRejectedEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCRejectedEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCRejectedEmail(ctx, req.(*SendKYCRejectedEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendActiveGAEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActiveGAEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendActiveGAEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendActiveGAEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendActiveGAEmail(ctx, req.(*SendActiveGAEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendActiveEmailEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendActiveEmailEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendActiveEmailEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendActiveEmailEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendActiveEmailEmail(ctx, req.(*SendActiveEmailEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendRefAddEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRefAddEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendRefAddEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendRefAddEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendRefAddEmail(ctx, req.(*SendRefAddEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTotpEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTotpEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTotpEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTotpEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTotpEmail(ctx, req.(*SendTotpEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendLoginTotpMainEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendLoginTotpMainEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendLoginTotpMainEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendLoginTotpMainEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendLoginTotpMainEmail(ctx, req.(*SendLoginTotpMainEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendGaMfaChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendGaMfaChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendGaMfaChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendGaMfaChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendGaMfaChangeEmail(ctx, req.(*SendGaMfaChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendTotpMfaChangeEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTotpMfaChangeEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendTotpMfaChangeEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendTotpMfaChangeEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendTotpMfaChangeEmail(ctx, req.(*SendTotpMfaChangeEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendChangePasswordMfaEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendChangePasswordMfaEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendChangePasswordMfaEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendChangePasswordMfaEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendChangePasswordMfaEmail(ctx, req.(*SendChangePasswordMfaEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendKYCTts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendKYCTtsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendKYCTts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendKYCTts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendKYCTts(ctx, req.(*SendKYCTtsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RTC_SendAdminNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendAdminNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RTCServer).SendAdminNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rtc.RTC/SendAdminNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RTCServer).SendAdminNotify(ctx, req.(*SendAdminNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RTC_ServiceDesc is the grpc.ServiceDesc for RTC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RTC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.rtc.RTC",
	HandlerType: (*RTCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendLoginSMS",
			Handler:    _RTC_SendLoginSMS_Handler,
		},
		{
			MethodName: "SendLoginSuccessSMS",
			Handler:    _RTC_SendLoginSuccessSMS_Handler,
		},
		{
			MethodName: "SendRegisterSMS",
			Handler:    _RTC_SendRegisterSMS_Handler,
		},
		{
			MethodName: "SendRegisterTotpSMS",
			Handler:    _RTC_SendRegisterTotpSMS_Handler,
		},
		{
			MethodName: "SendForgotPasswordFinalizeSMS",
			Handler:    _RTC_SendForgotPasswordFinalizeSMS_Handler,
		},
		{
			MethodName: "SendForgotPasswordTOTPSMS",
			Handler:    _RTC_SendForgotPasswordTOTPSMS_Handler,
		},
		{
			MethodName: "SendResetPasswordFinalizeSMS",
			Handler:    _RTC_SendResetPasswordFinalizeSMS_Handler,
		},
		{
			MethodName: "SendResetPasswordTOTPSMS",
			Handler:    _RTC_SendResetPasswordTOTPSMS_Handler,
		},
		{
			MethodName: "SendCodeTOTPWithdrawalTCSMS",
			Handler:    _RTC_SendCodeTOTPWithdrawalTCSMS_Handler,
		},
		{
			MethodName: "SendCodeTOTPActiveSMS",
			Handler:    _RTC_SendCodeTOTPActiveSMS_Handler,
		},
		{
			MethodName: "SendDepositDetailsNoticeSMS",
			Handler:    _RTC_SendDepositDetailsNoticeSMS_Handler,
		},
		{
			MethodName: "SendDepositDetailsNoticeMemoSMS",
			Handler:    _RTC_SendDepositDetailsNoticeMemoSMS_Handler,
		},
		{
			MethodName: "SendWithdrawDetailsNoticeSMS",
			Handler:    _RTC_SendWithdrawDetailsNoticeSMS_Handler,
		},
		{
			MethodName: "SendWithdrawDetailsNoticeMemoSMS",
			Handler:    _RTC_SendWithdrawDetailsNoticeMemoSMS_Handler,
		},
		{
			MethodName: "SendCryptoDepositInquirySubmitSMS",
			Handler:    _RTC_SendCryptoDepositInquirySubmitSMS_Handler,
		},
		{
			MethodName: "SendCryptoDepositFinalizeSMS",
			Handler:    _RTC_SendCryptoDepositFinalizeSMS_Handler,
		},
		{
			MethodName: "SendCryptoDepositFailedSMS",
			Handler:    _RTC_SendCryptoDepositFailedSMS_Handler,
		},
		{
			MethodName: "SendCryptoDepositFrozenSMS",
			Handler:    _RTC_SendCryptoDepositFrozenSMS_Handler,
		},
		{
			MethodName: "SendCryptoDepositConfiscateSMS",
			Handler:    _RTC_SendCryptoDepositConfiscateSMS_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawInquirySubmitSMS",
			Handler:    _RTC_SendCryptoWithdrawInquirySubmitSMS_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawCancelledSMS",
			Handler:    _RTC_SendCryptoWithdrawCancelledSMS_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawFinalizeSMS",
			Handler:    _RTC_SendCryptoWithdrawFinalizeSMS_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawCorrectiveSMS",
			Handler:    _RTC_SendCryptoWithdrawCorrectiveSMS_Handler,
		},
		{
			MethodName: "SendTomanDepositInquirySubmitSMS",
			Handler:    _RTC_SendTomanDepositInquirySubmitSMS_Handler,
		},
		{
			MethodName: "SendTomanDepositFrozenSMS",
			Handler:    _RTC_SendTomanDepositFrozenSMS_Handler,
		},
		{
			MethodName: "SendTomanDepositConfiscateSMS",
			Handler:    _RTC_SendTomanDepositConfiscateSMS_Handler,
		},
		{
			MethodName: "SendTomanDepositFinalizeSMS",
			Handler:    _RTC_SendTomanDepositFinalizeSMS_Handler,
		},
		{
			MethodName: "SendTomanDepositFailedSMS",
			Handler:    _RTC_SendTomanDepositFailedSMS_Handler,
		},
		{
			MethodName: "SendTomanWithdrawInquirySubmitSMS",
			Handler:    _RTC_SendTomanWithdrawInquirySubmitSMS_Handler,
		},
		{
			MethodName: "SendTomanWithdrawFinalizeSMS",
			Handler:    _RTC_SendTomanWithdrawFinalizeSMS_Handler,
		},
		{
			MethodName: "SendTomanWithdrawFrozenSMS",
			Handler:    _RTC_SendTomanWithdrawFrozenSMS_Handler,
		},
		{
			MethodName: "SendTomanWithdrawFailedSMS",
			Handler:    _RTC_SendTomanWithdrawFailedSMS_Handler,
		},
		{
			MethodName: "SendTomanWithdrawCorrectiveSMS",
			Handler:    _RTC_SendTomanWithdrawCorrectiveSMS_Handler,
		},
		{
			MethodName: "SendBuyFinalizeSMS",
			Handler:    _RTC_SendBuyFinalizeSMS_Handler,
		},
		{
			MethodName: "SendSellFinalizeSMS",
			Handler:    _RTC_SendSellFinalizeSMS_Handler,
		},
		{
			MethodName: "SendDistributionFinalizeSMS",
			Handler:    _RTC_SendDistributionFinalizeSMS_Handler,
		},
		{
			MethodName: "SendTicketCreateSMS",
			Handler:    _RTC_SendTicketCreateSMS_Handler,
		},
		{
			MethodName: "SendTicketRespondedSMS",
			Handler:    _RTC_SendTicketRespondedSMS_Handler,
		},
		{
			MethodName: "SendKYCSubmitSMS",
			Handler:    _RTC_SendKYCSubmitSMS_Handler,
		},
		{
			MethodName: "SendKYCFinalizeSMS",
			Handler:    _RTC_SendKYCFinalizeSMS_Handler,
		},
		{
			MethodName: "SendKYCFinalizeAnnouncementSMS",
			Handler:    _RTC_SendKYCFinalizeAnnouncementSMS_Handler,
		},
		{
			MethodName: "SendKYCRejectedSMS",
			Handler:    _RTC_SendKYCRejectedSMS_Handler,
		},
		{
			MethodName: "SendActiveGASMS",
			Handler:    _RTC_SendActiveGASMS_Handler,
		},
		{
			MethodName: "SendActiveEmailSMS",
			Handler:    _RTC_SendActiveEmailSMS_Handler,
		},
		{
			MethodName: "SendRefAddSMS",
			Handler:    _RTC_SendRefAddSMS_Handler,
		},
		{
			MethodName: "SendTotpSMS",
			Handler:    _RTC_SendTotpSMS_Handler,
		},
		{
			MethodName: "SendLoginTotpMainSMS",
			Handler:    _RTC_SendLoginTotpMainSMS_Handler,
		},
		{
			MethodName: "SendEmailMfaChangeSMS",
			Handler:    _RTC_SendEmailMfaChangeSMS_Handler,
		},
		{
			MethodName: "SendGaMfaChangeSMS",
			Handler:    _RTC_SendGaMfaChangeSMS_Handler,
		},
		{
			MethodName: "SendChangePasswordMfaSMS",
			Handler:    _RTC_SendChangePasswordMfaSMS_Handler,
		},
		{
			MethodName: "SendTomanWithdrawMfaSMS",
			Handler:    _RTC_SendTomanWithdrawMfaSMS_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawMfaSMS",
			Handler:    _RTC_SendCryptoWithdrawMfaSMS_Handler,
		},
		{
			MethodName: "SendLoginEmail",
			Handler:    _RTC_SendLoginEmail_Handler,
		},
		{
			MethodName: "SendLoginSuccessEmail",
			Handler:    _RTC_SendLoginSuccessEmail_Handler,
		},
		{
			MethodName: "SendRegisterEmail",
			Handler:    _RTC_SendRegisterEmail_Handler,
		},
		{
			MethodName: "SendForgotPasswordFinalizeEmail",
			Handler:    _RTC_SendForgotPasswordFinalizeEmail_Handler,
		},
		{
			MethodName: "SendResetPasswordFinalizeEmail",
			Handler:    _RTC_SendResetPasswordFinalizeEmail_Handler,
		},
		{
			MethodName: "SendCodeTOTPWithdrawalTCEmail",
			Handler:    _RTC_SendCodeTOTPWithdrawalTCEmail_Handler,
		},
		{
			MethodName: "SendCodeTOTPActiveEmail",
			Handler:    _RTC_SendCodeTOTPActiveEmail_Handler,
		},
		{
			MethodName: "SendDepositDetailsNoticeEmail",
			Handler:    _RTC_SendDepositDetailsNoticeEmail_Handler,
		},
		{
			MethodName: "SendDepositDetailsNoticeMemoEmail",
			Handler:    _RTC_SendDepositDetailsNoticeMemoEmail_Handler,
		},
		{
			MethodName: "SendWithdrawDetailsNoticeEmail",
			Handler:    _RTC_SendWithdrawDetailsNoticeEmail_Handler,
		},
		{
			MethodName: "SendWithdrawDetailsNoticeMemoEmail",
			Handler:    _RTC_SendWithdrawDetailsNoticeMemoEmail_Handler,
		},
		{
			MethodName: "SendCryptoDepositInquirySubmitEmail",
			Handler:    _RTC_SendCryptoDepositInquirySubmitEmail_Handler,
		},
		{
			MethodName: "SendCryptoDepositFinalizeEmail",
			Handler:    _RTC_SendCryptoDepositFinalizeEmail_Handler,
		},
		{
			MethodName: "SendCryptoDepositFailedEmail",
			Handler:    _RTC_SendCryptoDepositFailedEmail_Handler,
		},
		{
			MethodName: "SendCryptoDepositFrozenEmail",
			Handler:    _RTC_SendCryptoDepositFrozenEmail_Handler,
		},
		{
			MethodName: "SendCryptoDepositConfiscateEmail",
			Handler:    _RTC_SendCryptoDepositConfiscateEmail_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawInquirySubmitEmail",
			Handler:    _RTC_SendCryptoWithdrawInquirySubmitEmail_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawCancelledEmail",
			Handler:    _RTC_SendCryptoWithdrawCancelledEmail_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawFinalizeEmail",
			Handler:    _RTC_SendCryptoWithdrawFinalizeEmail_Handler,
		},
		{
			MethodName: "SendCryptoWithdrawCorrectiveEmail",
			Handler:    _RTC_SendCryptoWithdrawCorrectiveEmail_Handler,
		},
		{
			MethodName: "SendTomanDepositInquirySubmitEmail",
			Handler:    _RTC_SendTomanDepositInquirySubmitEmail_Handler,
		},
		{
			MethodName: "SendTomanDepositFrozenEmail",
			Handler:    _RTC_SendTomanDepositFrozenEmail_Handler,
		},
		{
			MethodName: "SendTomanDepositConfiscateEmail",
			Handler:    _RTC_SendTomanDepositConfiscateEmail_Handler,
		},
		{
			MethodName: "SendTomanDepositFinalizeEmail",
			Handler:    _RTC_SendTomanDepositFinalizeEmail_Handler,
		},
		{
			MethodName: "SendTomanDepositFailedEmail",
			Handler:    _RTC_SendTomanDepositFailedEmail_Handler,
		},
		{
			MethodName: "SendTomanWithdrawInquirySubmitEmail",
			Handler:    _RTC_SendTomanWithdrawInquirySubmitEmail_Handler,
		},
		{
			MethodName: "SendTomanWithdrawFinalizeEmail",
			Handler:    _RTC_SendTomanWithdrawFinalizeEmail_Handler,
		},
		{
			MethodName: "SendTomanWithdrawFrozenEmail",
			Handler:    _RTC_SendTomanWithdrawFrozenEmail_Handler,
		},
		{
			MethodName: "SendTomanWithdrawFailedEmail",
			Handler:    _RTC_SendTomanWithdrawFailedEmail_Handler,
		},
		{
			MethodName: "SendTomanWithdrawCorrectiveEmail",
			Handler:    _RTC_SendTomanWithdrawCorrectiveEmail_Handler,
		},
		{
			MethodName: "SendBuyFinalizeEmail",
			Handler:    _RTC_SendBuyFinalizeEmail_Handler,
		},
		{
			MethodName: "SendSellFinalizeEmail",
			Handler:    _RTC_SendSellFinalizeEmail_Handler,
		},
		{
			MethodName: "SendDistributionFinalizeEmail",
			Handler:    _RTC_SendDistributionFinalizeEmail_Handler,
		},
		{
			MethodName: "SendTicketCreateEmail",
			Handler:    _RTC_SendTicketCreateEmail_Handler,
		},
		{
			MethodName: "SendTicketRespondedEmail",
			Handler:    _RTC_SendTicketRespondedEmail_Handler,
		},
		{
			MethodName: "SendKYCSubmitEmail",
			Handler:    _RTC_SendKYCSubmitEmail_Handler,
		},
		{
			MethodName: "SendKYCFinalizeEmail",
			Handler:    _RTC_SendKYCFinalizeEmail_Handler,
		},
		{
			MethodName: "SendKYCFinalizeAnnouncementEmail",
			Handler:    _RTC_SendKYCFinalizeAnnouncementEmail_Handler,
		},
		{
			MethodName: "SendKYCRejectedEmail",
			Handler:    _RTC_SendKYCRejectedEmail_Handler,
		},
		{
			MethodName: "SendActiveGAEmail",
			Handler:    _RTC_SendActiveGAEmail_Handler,
		},
		{
			MethodName: "SendActiveEmailEmail",
			Handler:    _RTC_SendActiveEmailEmail_Handler,
		},
		{
			MethodName: "SendRefAddEmail",
			Handler:    _RTC_SendRefAddEmail_Handler,
		},
		{
			MethodName: "SendTotpEmail",
			Handler:    _RTC_SendTotpEmail_Handler,
		},
		{
			MethodName: "SendLoginTotpMainEmail",
			Handler:    _RTC_SendLoginTotpMainEmail_Handler,
		},
		{
			MethodName: "SendGaMfaChangeEmail",
			Handler:    _RTC_SendGaMfaChangeEmail_Handler,
		},
		{
			MethodName: "SendTotpMfaChangeEmail",
			Handler:    _RTC_SendTotpMfaChangeEmail_Handler,
		},
		{
			MethodName: "SendChangePasswordMfaEmail",
			Handler:    _RTC_SendChangePasswordMfaEmail_Handler,
		},
		{
			MethodName: "SendKYCTts",
			Handler:    _RTC_SendKYCTts_Handler,
		},
		{
			MethodName: "SendAdminNotify",
			Handler:    _RTC_SendAdminNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rtc/services.proto",
}
