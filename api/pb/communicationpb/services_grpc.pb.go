// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: communicationpb/services.proto

package communicationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommunicationChannelClient is the client API for CommunicationChannel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommunicationChannelClient interface {
	// rpc SendCommunicationRabexDiffRequest(rabex.api.communicationpb.CommunicationRabexDiffRequest) returns (rabex.api.communicationpb.CommunicationResponses) {
	SendRabexDiffRequest(ctx context.Context, in *RabexDiffRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error)
	SendRabexRegisterRequest(ctx context.Context, in *RabexRegisterRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error)
	SendRabexLoginRequest(ctx context.Context, in *RabexLoginRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error)
	SendRabexLoginSuccessRequest(ctx context.Context, in *RabexLoginSuccessRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error)
	SendCommunicationRabexToTpRequest(ctx context.Context, in *CommunicationRabexToTpRequest, opts ...grpc.CallOption) (*CommunicationResponses, error)
}

type communicationChannelClient struct {
	cc grpc.ClientConnInterface
}

func NewCommunicationChannelClient(cc grpc.ClientConnInterface) CommunicationChannelClient {
	return &communicationChannelClient{cc}
}

func (c *communicationChannelClient) SendRabexDiffRequest(ctx context.Context, in *RabexDiffRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error) {
	out := new(CommunicationQuickResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.communicationpb.CommunicationChannel/SendRabexDiffRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationChannelClient) SendRabexRegisterRequest(ctx context.Context, in *RabexRegisterRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error) {
	out := new(CommunicationQuickResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.communicationpb.CommunicationChannel/SendRabexRegisterRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationChannelClient) SendRabexLoginRequest(ctx context.Context, in *RabexLoginRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error) {
	out := new(CommunicationQuickResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.communicationpb.CommunicationChannel/SendRabexLoginRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationChannelClient) SendRabexLoginSuccessRequest(ctx context.Context, in *RabexLoginSuccessRequest, opts ...grpc.CallOption) (*CommunicationQuickResponse, error) {
	out := new(CommunicationQuickResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.communicationpb.CommunicationChannel/SendRabexLoginSuccessRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *communicationChannelClient) SendCommunicationRabexToTpRequest(ctx context.Context, in *CommunicationRabexToTpRequest, opts ...grpc.CallOption) (*CommunicationResponses, error) {
	out := new(CommunicationResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.communicationpb.CommunicationChannel/SendCommunicationRabexToTpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommunicationChannelServer is the server API for CommunicationChannel service.
// All implementations must embed UnimplementedCommunicationChannelServer
// for forward compatibility
type CommunicationChannelServer interface {
	// rpc SendCommunicationRabexDiffRequest(rabex.api.communicationpb.CommunicationRabexDiffRequest) returns (rabex.api.communicationpb.CommunicationResponses) {
	SendRabexDiffRequest(context.Context, *RabexDiffRequest) (*CommunicationQuickResponse, error)
	SendRabexRegisterRequest(context.Context, *RabexRegisterRequest) (*CommunicationQuickResponse, error)
	SendRabexLoginRequest(context.Context, *RabexLoginRequest) (*CommunicationQuickResponse, error)
	SendRabexLoginSuccessRequest(context.Context, *RabexLoginSuccessRequest) (*CommunicationQuickResponse, error)
	SendCommunicationRabexToTpRequest(context.Context, *CommunicationRabexToTpRequest) (*CommunicationResponses, error)
	mustEmbedUnimplementedCommunicationChannelServer()
}

// UnimplementedCommunicationChannelServer must be embedded to have forward compatible implementations.
type UnimplementedCommunicationChannelServer struct {
}

func (UnimplementedCommunicationChannelServer) SendRabexDiffRequest(context.Context, *RabexDiffRequest) (*CommunicationQuickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRabexDiffRequest not implemented")
}
func (UnimplementedCommunicationChannelServer) SendRabexRegisterRequest(context.Context, *RabexRegisterRequest) (*CommunicationQuickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRabexRegisterRequest not implemented")
}
func (UnimplementedCommunicationChannelServer) SendRabexLoginRequest(context.Context, *RabexLoginRequest) (*CommunicationQuickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRabexLoginRequest not implemented")
}
func (UnimplementedCommunicationChannelServer) SendRabexLoginSuccessRequest(context.Context, *RabexLoginSuccessRequest) (*CommunicationQuickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRabexLoginSuccessRequest not implemented")
}
func (UnimplementedCommunicationChannelServer) SendCommunicationRabexToTpRequest(context.Context, *CommunicationRabexToTpRequest) (*CommunicationResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommunicationRabexToTpRequest not implemented")
}
func (UnimplementedCommunicationChannelServer) mustEmbedUnimplementedCommunicationChannelServer() {}

// UnsafeCommunicationChannelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommunicationChannelServer will
// result in compilation errors.
type UnsafeCommunicationChannelServer interface {
	mustEmbedUnimplementedCommunicationChannelServer()
}

func RegisterCommunicationChannelServer(s grpc.ServiceRegistrar, srv CommunicationChannelServer) {
	s.RegisterService(&CommunicationChannel_ServiceDesc, srv)
}

func _CommunicationChannel_SendRabexDiffRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RabexDiffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationChannelServer).SendRabexDiffRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.communicationpb.CommunicationChannel/SendRabexDiffRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationChannelServer).SendRabexDiffRequest(ctx, req.(*RabexDiffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationChannel_SendRabexRegisterRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RabexRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationChannelServer).SendRabexRegisterRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.communicationpb.CommunicationChannel/SendRabexRegisterRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationChannelServer).SendRabexRegisterRequest(ctx, req.(*RabexRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationChannel_SendRabexLoginRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RabexLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationChannelServer).SendRabexLoginRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.communicationpb.CommunicationChannel/SendRabexLoginRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationChannelServer).SendRabexLoginRequest(ctx, req.(*RabexLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationChannel_SendRabexLoginSuccessRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RabexLoginSuccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationChannelServer).SendRabexLoginSuccessRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.communicationpb.CommunicationChannel/SendRabexLoginSuccessRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationChannelServer).SendRabexLoginSuccessRequest(ctx, req.(*RabexLoginSuccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommunicationChannel_SendCommunicationRabexToTpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommunicationRabexToTpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommunicationChannelServer).SendCommunicationRabexToTpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.communicationpb.CommunicationChannel/SendCommunicationRabexToTpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommunicationChannelServer).SendCommunicationRabexToTpRequest(ctx, req.(*CommunicationRabexToTpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommunicationChannel_ServiceDesc is the grpc.ServiceDesc for CommunicationChannel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommunicationChannel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.communicationpb.CommunicationChannel",
	HandlerType: (*CommunicationChannelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRabexDiffRequest",
			Handler:    _CommunicationChannel_SendRabexDiffRequest_Handler,
		},
		{
			MethodName: "SendRabexRegisterRequest",
			Handler:    _CommunicationChannel_SendRabexRegisterRequest_Handler,
		},
		{
			MethodName: "SendRabexLoginRequest",
			Handler:    _CommunicationChannel_SendRabexLoginRequest_Handler,
		},
		{
			MethodName: "SendRabexLoginSuccessRequest",
			Handler:    _CommunicationChannel_SendRabexLoginSuccessRequest_Handler,
		},
		{
			MethodName: "SendCommunicationRabexToTpRequest",
			Handler:    _CommunicationChannel_SendCommunicationRabexToTpRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "communicationpb/services.proto",
}
