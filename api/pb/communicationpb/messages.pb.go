// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: communicationpb/messages.proto

package communicationpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReceptorContacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MobileNumber string `protobuf:"bytes,1,opt,name=mobileNumber,proto3" json:"mobileNumber,omitempty"`
	Email        string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *ReceptorContacts) Reset() {
	*x = ReceptorContacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceptorContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceptorContacts) ProtoMessage() {}

func (x *ReceptorContacts) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceptorContacts.ProtoReflect.Descriptor instead.
func (*ReceptorContacts) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{0}
}

func (x *ReceptorContacts) GetMobileNumber() string {
	if x != nil {
		return x.MobileNumber
	}
	return ""
}

func (x *ReceptorContacts) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type RabexDiffTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderNumber string `protobuf:"bytes,1,opt,name=order_number,json=orderNumber,proto3" json:"order_number,omitempty"`
}

func (x *RabexDiffTokens) Reset() {
	*x = RabexDiffTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexDiffTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexDiffTokens) ProtoMessage() {}

func (x *RabexDiffTokens) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexDiffTokens.ProtoReflect.Descriptor instead.
func (*RabexDiffTokens) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{1}
}

func (x *RabexDiffTokens) GetOrderNumber() string {
	if x != nil {
		return x.OrderNumber
	}
	return ""
}

type RabexToTpTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	ToTpCode string `protobuf:"bytes,2,opt,name=ToTpCode,proto3" json:"ToTpCode,omitempty"`
}

func (x *RabexToTpTokens) Reset() {
	*x = RabexToTpTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexToTpTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexToTpTokens) ProtoMessage() {}

func (x *RabexToTpTokens) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexToTpTokens.ProtoReflect.Descriptor instead.
func (*RabexToTpTokens) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{2}
}

func (x *RabexToTpTokens) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RabexToTpTokens) GetToTpCode() string {
	if x != nil {
		return x.ToTpCode
	}
	return ""
}

type RabexRegisterTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
}

func (x *RabexRegisterTokens) Reset() {
	*x = RabexRegisterTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexRegisterTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexRegisterTokens) ProtoMessage() {}

func (x *RabexRegisterTokens) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexRegisterTokens.ProtoReflect.Descriptor instead.
func (*RabexRegisterTokens) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{3}
}

func (x *RabexRegisterTokens) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

type RabexLoginTOTPTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotpCode string `protobuf:"bytes,1,opt,name=totp_code,json=totpCode,proto3" json:"totp_code,omitempty"`
}

func (x *RabexLoginTOTPTokens) Reset() {
	*x = RabexLoginTOTPTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexLoginTOTPTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexLoginTOTPTokens) ProtoMessage() {}

func (x *RabexLoginTOTPTokens) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexLoginTOTPTokens.ProtoReflect.Descriptor instead.
func (*RabexLoginTOTPTokens) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{4}
}

func (x *RabexLoginTOTPTokens) GetTotpCode() string {
	if x != nil {
		return x.TotpCode
	}
	return ""
}

type RabexLoginSuccessTokens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FullName     string `protobuf:"bytes,1,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	EntranceDate string `protobuf:"bytes,2,opt,name=entrance_date,json=entranceDate,proto3" json:"entrance_date,omitempty"`
}

func (x *RabexLoginSuccessTokens) Reset() {
	*x = RabexLoginSuccessTokens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexLoginSuccessTokens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexLoginSuccessTokens) ProtoMessage() {}

func (x *RabexLoginSuccessTokens) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexLoginSuccessTokens.ProtoReflect.Descriptor instead.
func (*RabexLoginSuccessTokens) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{5}
}

func (x *RabexLoginSuccessTokens) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *RabexLoginSuccessTokens) GetEntranceDate() string {
	if x != nil {
		return x.EntranceDate
	}
	return ""
}

type RabexDiffInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceptorContacts *ReceptorContacts `protobuf:"bytes,1,opt,name=receptor_contacts,json=receptorContacts,proto3" json:"receptor_contacts,omitempty"`
	ReceptorTokens   *RabexDiffTokens  `protobuf:"bytes,2,opt,name=receptor_tokens,json=receptorTokens,proto3" json:"receptor_tokens,omitempty"`
}

func (x *RabexDiffInfo) Reset() {
	*x = RabexDiffInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexDiffInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexDiffInfo) ProtoMessage() {}

func (x *RabexDiffInfo) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexDiffInfo.ProtoReflect.Descriptor instead.
func (*RabexDiffInfo) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{6}
}

func (x *RabexDiffInfo) GetReceptorContacts() *ReceptorContacts {
	if x != nil {
		return x.ReceptorContacts
	}
	return nil
}

func (x *RabexDiffInfo) GetReceptorTokens() *RabexDiffTokens {
	if x != nil {
		return x.ReceptorTokens
	}
	return nil
}

type CommunicationRabexToTpToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceptorContacts *ReceptorContacts `protobuf:"bytes,1,opt,name=receptorContacts,proto3" json:"receptorContacts,omitempty"`
	ReceptorTokens   *RabexToTpTokens  `protobuf:"bytes,2,opt,name=receptorTokens,proto3" json:"receptorTokens,omitempty"`
}

func (x *CommunicationRabexToTpToken) Reset() {
	*x = CommunicationRabexToTpToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRabexToTpToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRabexToTpToken) ProtoMessage() {}

func (x *CommunicationRabexToTpToken) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRabexToTpToken.ProtoReflect.Descriptor instead.
func (*CommunicationRabexToTpToken) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{7}
}

func (x *CommunicationRabexToTpToken) GetReceptorContacts() *ReceptorContacts {
	if x != nil {
		return x.ReceptorContacts
	}
	return nil
}

func (x *CommunicationRabexToTpToken) GetReceptorTokens() *RabexToTpTokens {
	if x != nil {
		return x.ReceptorTokens
	}
	return nil
}

type RabexRegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceptorContacts *ReceptorContacts    `protobuf:"bytes,1,opt,name=receptor_contacts,json=receptorContacts,proto3" json:"receptor_contacts,omitempty"`
	ReceptorTokens   *RabexRegisterTokens `protobuf:"bytes,2,opt,name=receptor_tokens,json=receptorTokens,proto3" json:"receptor_tokens,omitempty"`
}

func (x *RabexRegisterInfo) Reset() {
	*x = RabexRegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexRegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexRegisterInfo) ProtoMessage() {}

func (x *RabexRegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexRegisterInfo.ProtoReflect.Descriptor instead.
func (*RabexRegisterInfo) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{8}
}

func (x *RabexRegisterInfo) GetReceptorContacts() *ReceptorContacts {
	if x != nil {
		return x.ReceptorContacts
	}
	return nil
}

func (x *RabexRegisterInfo) GetReceptorTokens() *RabexRegisterTokens {
	if x != nil {
		return x.ReceptorTokens
	}
	return nil
}

type RabexLoginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceptorContacts *ReceptorContacts     `protobuf:"bytes,1,opt,name=receptor_contacts,json=receptorContacts,proto3" json:"receptor_contacts,omitempty"`
	ReceptorTokens   *RabexLoginTOTPTokens `protobuf:"bytes,2,opt,name=receptor_tokens,json=receptorTokens,proto3" json:"receptor_tokens,omitempty"`
}

func (x *RabexLoginInfo) Reset() {
	*x = RabexLoginInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexLoginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexLoginInfo) ProtoMessage() {}

func (x *RabexLoginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexLoginInfo.ProtoReflect.Descriptor instead.
func (*RabexLoginInfo) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{9}
}

func (x *RabexLoginInfo) GetReceptorContacts() *ReceptorContacts {
	if x != nil {
		return x.ReceptorContacts
	}
	return nil
}

func (x *RabexLoginInfo) GetReceptorTokens() *RabexLoginTOTPTokens {
	if x != nil {
		return x.ReceptorTokens
	}
	return nil
}

type RabexLoginSuccessInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReceptorContacts *ReceptorContacts        `protobuf:"bytes,1,opt,name=receptor_contacts,json=receptorContacts,proto3" json:"receptor_contacts,omitempty"`
	ReceptorTokens   *RabexLoginSuccessTokens `protobuf:"bytes,2,opt,name=receptor_tokens,json=receptorTokens,proto3" json:"receptor_tokens,omitempty"`
}

func (x *RabexLoginSuccessInfo) Reset() {
	*x = RabexLoginSuccessInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexLoginSuccessInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexLoginSuccessInfo) ProtoMessage() {}

func (x *RabexLoginSuccessInfo) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexLoginSuccessInfo.ProtoReflect.Descriptor instead.
func (*RabexLoginSuccessInfo) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{10}
}

func (x *RabexLoginSuccessInfo) GetReceptorContacts() *ReceptorContacts {
	if x != nil {
		return x.ReceptorContacts
	}
	return nil
}

func (x *RabexLoginSuccessInfo) GetReceptorTokens() *RabexLoginSuccessTokens {
	if x != nil {
		return x.ReceptorTokens
	}
	return nil
}

type RabexDiffRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels     []CommunicationChannelType `protobuf:"varint,1,rep,packed,name=channels,proto3,enum=rabex.api.communicationpb.CommunicationChannelType" json:"channels,omitempty"`
	ReceptorInfo []*RabexDiffInfo           `protobuf:"bytes,2,rep,name=receptor_info,json=receptorInfo,proto3" json:"receptor_info,omitempty"`
}

func (x *RabexDiffRequest) Reset() {
	*x = RabexDiffRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexDiffRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexDiffRequest) ProtoMessage() {}

func (x *RabexDiffRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexDiffRequest.ProtoReflect.Descriptor instead.
func (*RabexDiffRequest) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{11}
}

func (x *RabexDiffRequest) GetChannels() []CommunicationChannelType {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *RabexDiffRequest) GetReceptorInfo() []*RabexDiffInfo {
	if x != nil {
		return x.ReceptorInfo
	}
	return nil
}

type CommunicationRabexToTpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels     []CommunicationChannelType     `protobuf:"varint,1,rep,packed,name=channels,proto3,enum=rabex.api.communicationpb.CommunicationChannelType" json:"channels,omitempty"`
	ReceptorInfo []*CommunicationRabexToTpToken `protobuf:"bytes,2,rep,name=receptorInfo,proto3" json:"receptorInfo,omitempty"`
}

func (x *CommunicationRabexToTpRequest) Reset() {
	*x = CommunicationRabexToTpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationRabexToTpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationRabexToTpRequest) ProtoMessage() {}

func (x *CommunicationRabexToTpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationRabexToTpRequest.ProtoReflect.Descriptor instead.
func (*CommunicationRabexToTpRequest) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{12}
}

func (x *CommunicationRabexToTpRequest) GetChannels() []CommunicationChannelType {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *CommunicationRabexToTpRequest) GetReceptorInfo() []*CommunicationRabexToTpToken {
	if x != nil {
		return x.ReceptorInfo
	}
	return nil
}

type RabexRegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels     []CommunicationChannelType `protobuf:"varint,1,rep,packed,name=channels,proto3,enum=rabex.api.communicationpb.CommunicationChannelType" json:"channels,omitempty"`
	ReceptorInfo []*RabexRegisterInfo       `protobuf:"bytes,2,rep,name=receptor_info,json=receptorInfo,proto3" json:"receptor_info,omitempty"`
}

func (x *RabexRegisterRequest) Reset() {
	*x = RabexRegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexRegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexRegisterRequest) ProtoMessage() {}

func (x *RabexRegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexRegisterRequest.ProtoReflect.Descriptor instead.
func (*RabexRegisterRequest) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{13}
}

func (x *RabexRegisterRequest) GetChannels() []CommunicationChannelType {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *RabexRegisterRequest) GetReceptorInfo() []*RabexRegisterInfo {
	if x != nil {
		return x.ReceptorInfo
	}
	return nil
}

type RabexLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels     []CommunicationChannelType `protobuf:"varint,1,rep,packed,name=channels,proto3,enum=rabex.api.communicationpb.CommunicationChannelType" json:"channels,omitempty"`
	ReceptorInfo []*RabexLoginInfo          `protobuf:"bytes,2,rep,name=receptor_info,json=receptorInfo,proto3" json:"receptor_info,omitempty"`
}

func (x *RabexLoginRequest) Reset() {
	*x = RabexLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexLoginRequest) ProtoMessage() {}

func (x *RabexLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexLoginRequest.ProtoReflect.Descriptor instead.
func (*RabexLoginRequest) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{14}
}

func (x *RabexLoginRequest) GetChannels() []CommunicationChannelType {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *RabexLoginRequest) GetReceptorInfo() []*RabexLoginInfo {
	if x != nil {
		return x.ReceptorInfo
	}
	return nil
}

type RabexLoginSuccessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channels     []CommunicationChannelType `protobuf:"varint,1,rep,packed,name=channels,proto3,enum=rabex.api.communicationpb.CommunicationChannelType" json:"channels,omitempty"`
	ReceptorInfo []*RabexLoginSuccessInfo   `protobuf:"bytes,2,rep,name=receptor_info,json=receptorInfo,proto3" json:"receptor_info,omitempty"`
}

func (x *RabexLoginSuccessRequest) Reset() {
	*x = RabexLoginSuccessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RabexLoginSuccessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RabexLoginSuccessRequest) ProtoMessage() {}

func (x *RabexLoginSuccessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RabexLoginSuccessRequest.ProtoReflect.Descriptor instead.
func (*RabexLoginSuccessRequest) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{15}
}

func (x *RabexLoginSuccessRequest) GetChannels() []CommunicationChannelType {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *RabexLoginSuccessRequest) GetReceptorInfo() []*RabexLoginSuccessInfo {
	if x != nil {
		return x.ReceptorInfo
	}
	return nil
}

type CommunicationResponses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Responses []*CommunicationResponse `protobuf:"bytes,1,rep,name=responses,proto3" json:"responses,omitempty"`
}

func (x *CommunicationResponses) Reset() {
	*x = CommunicationResponses{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationResponses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationResponses) ProtoMessage() {}

func (x *CommunicationResponses) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationResponses.ProtoReflect.Descriptor instead.
func (*CommunicationResponses) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{16}
}

func (x *CommunicationResponses) GetResponses() []*CommunicationResponse {
	if x != nil {
		return x.Responses
	}
	return nil
}

type CommunicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelType      CommunicationChannelType `protobuf:"varint,1,opt,name=channelType,proto3,enum=rabex.api.communicationpb.CommunicationChannelType" json:"channelType,omitempty"`
	ReceptorContacts *ReceptorContacts        `protobuf:"bytes,2,opt,name=receptorContacts,proto3" json:"receptorContacts,omitempty"`
	Success          bool                     `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	MessageID        string                   `protobuf:"bytes,4,opt,name=messageID,proto3" json:"messageID,omitempty"`
}

func (x *CommunicationResponse) Reset() {
	*x = CommunicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationResponse) ProtoMessage() {}

func (x *CommunicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationResponse.ProtoReflect.Descriptor instead.
func (*CommunicationResponse) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{17}
}

func (x *CommunicationResponse) GetChannelType() CommunicationChannelType {
	if x != nil {
		return x.ChannelType
	}
	return CommunicationChannelType_Unknown
}

func (x *CommunicationResponse) GetReceptorContacts() *ReceptorContacts {
	if x != nil {
		return x.ReceptorContacts
	}
	return nil
}

func (x *CommunicationResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CommunicationResponse) GetMessageID() string {
	if x != nil {
		return x.MessageID
	}
	return ""
}

type CommunicationQuickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CommunicationQuickResponse) Reset() {
	*x = CommunicationQuickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_communicationpb_messages_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunicationQuickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunicationQuickResponse) ProtoMessage() {}

func (x *CommunicationQuickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_communicationpb_messages_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunicationQuickResponse.ProtoReflect.Descriptor instead.
func (*CommunicationQuickResponse) Descriptor() ([]byte, []int) {
	return file_communicationpb_messages_proto_rawDescGZIP(), []int{18}
}

func (x *CommunicationQuickResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_communicationpb_messages_proto protoreflect.FileDescriptor

var file_communicationpb_messages_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70,
	0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x19, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x1a, 0x1b, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x10, 0x52, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x34, 0x0a, 0x0f, 0x52, 0x61, 0x62, 0x65, 0x78, 0x44,
	0x69, 0x66, 0x66, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x0f,
	0x52, 0x61, 0x62, 0x65, 0x78, 0x54, 0x6f, 0x54, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x6f, 0x54, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x6f, 0x54, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x32, 0x0a, 0x13, 0x52, 0x61, 0x62, 0x65, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x14, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x74, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x5b, 0x0a, 0x17, 0x52, 0x61, 0x62, 0x65,
	0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x62, 0x65, 0x78, 0x44,
	0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x12, 0x53, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x44, 0x69, 0x66, 0x66,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x54, 0x6f, 0x54,
	0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x57, 0x0a, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x10, 0x72,
	0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x52, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x54, 0x6f, 0x54, 0x70, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x62, 0x65, 0x78, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x73, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72,
	0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52, 0x0e, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xc4, 0x01, 0x0a,
	0x0e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x58, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52,
	0x61, 0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x54, 0x4f, 0x54, 0x50, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x22, 0xce, 0x01, 0x0a, 0x15, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x58, 0x0a,
	0x11, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x65, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x62,
	0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x52, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x62, 0x65, 0x78, 0x44, 0x69,
	0x66, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x62, 0x65, 0x78, 0x44, 0x69, 0x66, 0x66, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x1d, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x62, 0x65, 0x78,
	0x54, 0x6f, 0x54, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x5a, 0x0a, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x62, 0x65,
	0x78, 0x54, 0x6f, 0x54, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x14, 0x52, 0x61, 0x62,
	0x65, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x12, 0x51, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x61, 0x62, 0x65,
	0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61, 0x62, 0x65, 0x78, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x11, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e,
	0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x4e, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e,
	0x52, 0x61, 0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c,
	0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc2, 0x01, 0x0a,
	0x18, 0x52, 0x61, 0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x61,
	0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x52, 0x61,
	0x62, 0x65, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x68, 0x0a, 0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x09, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x15,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x72, 0x61, 0x62,
	0x65, 0x78, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x57, 0x0a, 0x10,
	0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x70, 0x62, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x10, 0x72, 0x65, 0x63, 0x65, 0x70, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22, 0x36, 0x0a,
	0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x2e, 0x5a, 0x2c, 0x72, 0x61, 0x62, 0x65, 0x78, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x3b, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_communicationpb_messages_proto_rawDescOnce sync.Once
	file_communicationpb_messages_proto_rawDescData = file_communicationpb_messages_proto_rawDesc
)

func file_communicationpb_messages_proto_rawDescGZIP() []byte {
	file_communicationpb_messages_proto_rawDescOnce.Do(func() {
		file_communicationpb_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_communicationpb_messages_proto_rawDescData)
	})
	return file_communicationpb_messages_proto_rawDescData
}

var file_communicationpb_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_communicationpb_messages_proto_goTypes = []interface{}{
	(*ReceptorContacts)(nil),              // 0: rabex.api.communicationpb.ReceptorContacts
	(*RabexDiffTokens)(nil),               // 1: rabex.api.communicationpb.RabexDiffTokens
	(*RabexToTpTokens)(nil),               // 2: rabex.api.communicationpb.RabexToTpTokens
	(*RabexRegisterTokens)(nil),           // 3: rabex.api.communicationpb.RabexRegisterTokens
	(*RabexLoginTOTPTokens)(nil),          // 4: rabex.api.communicationpb.RabexLoginTOTPTokens
	(*RabexLoginSuccessTokens)(nil),       // 5: rabex.api.communicationpb.RabexLoginSuccessTokens
	(*RabexDiffInfo)(nil),                 // 6: rabex.api.communicationpb.RabexDiffInfo
	(*CommunicationRabexToTpToken)(nil),   // 7: rabex.api.communicationpb.CommunicationRabexToTpToken
	(*RabexRegisterInfo)(nil),             // 8: rabex.api.communicationpb.RabexRegisterInfo
	(*RabexLoginInfo)(nil),                // 9: rabex.api.communicationpb.RabexLoginInfo
	(*RabexLoginSuccessInfo)(nil),         // 10: rabex.api.communicationpb.RabexLoginSuccessInfo
	(*RabexDiffRequest)(nil),              // 11: rabex.api.communicationpb.RabexDiffRequest
	(*CommunicationRabexToTpRequest)(nil), // 12: rabex.api.communicationpb.CommunicationRabexToTpRequest
	(*RabexRegisterRequest)(nil),          // 13: rabex.api.communicationpb.RabexRegisterRequest
	(*RabexLoginRequest)(nil),             // 14: rabex.api.communicationpb.RabexLoginRequest
	(*RabexLoginSuccessRequest)(nil),      // 15: rabex.api.communicationpb.RabexLoginSuccessRequest
	(*CommunicationResponses)(nil),        // 16: rabex.api.communicationpb.CommunicationResponses
	(*CommunicationResponse)(nil),         // 17: rabex.api.communicationpb.CommunicationResponse
	(*CommunicationQuickResponse)(nil),    // 18: rabex.api.communicationpb.CommunicationQuickResponse
	(CommunicationChannelType)(0),         // 19: rabex.api.communicationpb.CommunicationChannelType
}
var file_communicationpb_messages_proto_depIdxs = []int32{
	0,  // 0: rabex.api.communicationpb.RabexDiffInfo.receptor_contacts:type_name -> rabex.api.communicationpb.ReceptorContacts
	1,  // 1: rabex.api.communicationpb.RabexDiffInfo.receptor_tokens:type_name -> rabex.api.communicationpb.RabexDiffTokens
	0,  // 2: rabex.api.communicationpb.CommunicationRabexToTpToken.receptorContacts:type_name -> rabex.api.communicationpb.ReceptorContacts
	2,  // 3: rabex.api.communicationpb.CommunicationRabexToTpToken.receptorTokens:type_name -> rabex.api.communicationpb.RabexToTpTokens
	0,  // 4: rabex.api.communicationpb.RabexRegisterInfo.receptor_contacts:type_name -> rabex.api.communicationpb.ReceptorContacts
	3,  // 5: rabex.api.communicationpb.RabexRegisterInfo.receptor_tokens:type_name -> rabex.api.communicationpb.RabexRegisterTokens
	0,  // 6: rabex.api.communicationpb.RabexLoginInfo.receptor_contacts:type_name -> rabex.api.communicationpb.ReceptorContacts
	4,  // 7: rabex.api.communicationpb.RabexLoginInfo.receptor_tokens:type_name -> rabex.api.communicationpb.RabexLoginTOTPTokens
	0,  // 8: rabex.api.communicationpb.RabexLoginSuccessInfo.receptor_contacts:type_name -> rabex.api.communicationpb.ReceptorContacts
	5,  // 9: rabex.api.communicationpb.RabexLoginSuccessInfo.receptor_tokens:type_name -> rabex.api.communicationpb.RabexLoginSuccessTokens
	19, // 10: rabex.api.communicationpb.RabexDiffRequest.channels:type_name -> rabex.api.communicationpb.CommunicationChannelType
	6,  // 11: rabex.api.communicationpb.RabexDiffRequest.receptor_info:type_name -> rabex.api.communicationpb.RabexDiffInfo
	19, // 12: rabex.api.communicationpb.CommunicationRabexToTpRequest.channels:type_name -> rabex.api.communicationpb.CommunicationChannelType
	7,  // 13: rabex.api.communicationpb.CommunicationRabexToTpRequest.receptorInfo:type_name -> rabex.api.communicationpb.CommunicationRabexToTpToken
	19, // 14: rabex.api.communicationpb.RabexRegisterRequest.channels:type_name -> rabex.api.communicationpb.CommunicationChannelType
	8,  // 15: rabex.api.communicationpb.RabexRegisterRequest.receptor_info:type_name -> rabex.api.communicationpb.RabexRegisterInfo
	19, // 16: rabex.api.communicationpb.RabexLoginRequest.channels:type_name -> rabex.api.communicationpb.CommunicationChannelType
	9,  // 17: rabex.api.communicationpb.RabexLoginRequest.receptor_info:type_name -> rabex.api.communicationpb.RabexLoginInfo
	19, // 18: rabex.api.communicationpb.RabexLoginSuccessRequest.channels:type_name -> rabex.api.communicationpb.CommunicationChannelType
	10, // 19: rabex.api.communicationpb.RabexLoginSuccessRequest.receptor_info:type_name -> rabex.api.communicationpb.RabexLoginSuccessInfo
	17, // 20: rabex.api.communicationpb.CommunicationResponses.responses:type_name -> rabex.api.communicationpb.CommunicationResponse
	19, // 21: rabex.api.communicationpb.CommunicationResponse.channelType:type_name -> rabex.api.communicationpb.CommunicationChannelType
	0,  // 22: rabex.api.communicationpb.CommunicationResponse.receptorContacts:type_name -> rabex.api.communicationpb.ReceptorContacts
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_communicationpb_messages_proto_init() }
func file_communicationpb_messages_proto_init() {
	if File_communicationpb_messages_proto != nil {
		return
	}
	file_communicationpb_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_communicationpb_messages_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceptorContacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexDiffTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexToTpTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexRegisterTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexLoginTOTPTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexLoginSuccessTokens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexDiffInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRabexToTpToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexRegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexLoginInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexLoginSuccessInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexDiffRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationRabexToTpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexRegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RabexLoginSuccessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationResponses); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_communicationpb_messages_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunicationQuickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_communicationpb_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_communicationpb_messages_proto_goTypes,
		DependencyIndexes: file_communicationpb_messages_proto_depIdxs,
		MessageInfos:      file_communicationpb_messages_proto_msgTypes,
	}.Build()
	File_communicationpb_messages_proto = out.File
	file_communicationpb_messages_proto_rawDesc = nil
	file_communicationpb_messages_proto_goTypes = nil
	file_communicationpb_messages_proto_depIdxs = nil
}
