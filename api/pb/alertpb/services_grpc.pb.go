// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: alertpb/services.proto

package alertpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlertClient is the client API for Alert service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlertClient interface {
	CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
	ShowAlertsByAdmin(ctx context.Context, in *ListAlertsByAdminRequest, opts ...grpc.CallOption) (*ListAlertResponses, error)
	RemoveAlert(ctx context.Context, in *RemoveAlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
	UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*AlertResponse, error)
	ShowAlertsByUser(ctx context.Context, in *ListAlertsByUserRequest, opts ...grpc.CallOption) (*ListAlertResponses, error)
	ShowUserGroups(ctx context.Context, in *UserGroupsRequest, opts ...grpc.CallOption) (*UserGroupsResponse, error)
}

type alertClient struct {
	cc grpc.ClientConnInterface
}

func NewAlertClient(cc grpc.ClientConnInterface) AlertClient {
	return &alertClient{cc}
}

func (c *alertClient) CreateAlert(ctx context.Context, in *CreateAlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.alertpb.Alert/CreateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) ShowAlertsByAdmin(ctx context.Context, in *ListAlertsByAdminRequest, opts ...grpc.CallOption) (*ListAlertResponses, error) {
	out := new(ListAlertResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.alertpb.Alert/ShowAlertsByAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) RemoveAlert(ctx context.Context, in *RemoveAlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.alertpb.Alert/RemoveAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) UpdateAlert(ctx context.Context, in *UpdateAlertRequest, opts ...grpc.CallOption) (*AlertResponse, error) {
	out := new(AlertResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.alertpb.Alert/UpdateAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) ShowAlertsByUser(ctx context.Context, in *ListAlertsByUserRequest, opts ...grpc.CallOption) (*ListAlertResponses, error) {
	out := new(ListAlertResponses)
	err := c.cc.Invoke(ctx, "/rabex.api.alertpb.Alert/ShowAlertsByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alertClient) ShowUserGroups(ctx context.Context, in *UserGroupsRequest, opts ...grpc.CallOption) (*UserGroupsResponse, error) {
	out := new(UserGroupsResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.alertpb.Alert/ShowUserGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlertServer is the server API for Alert service.
// All implementations must embed UnimplementedAlertServer
// for forward compatibility
type AlertServer interface {
	CreateAlert(context.Context, *CreateAlertRequest) (*AlertResponse, error)
	ShowAlertsByAdmin(context.Context, *ListAlertsByAdminRequest) (*ListAlertResponses, error)
	RemoveAlert(context.Context, *RemoveAlertRequest) (*AlertResponse, error)
	UpdateAlert(context.Context, *UpdateAlertRequest) (*AlertResponse, error)
	ShowAlertsByUser(context.Context, *ListAlertsByUserRequest) (*ListAlertResponses, error)
	ShowUserGroups(context.Context, *UserGroupsRequest) (*UserGroupsResponse, error)
	mustEmbedUnimplementedAlertServer()
}

// UnimplementedAlertServer must be embedded to have forward compatible implementations.
type UnimplementedAlertServer struct {
}

func (UnimplementedAlertServer) CreateAlert(context.Context, *CreateAlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlert not implemented")
}
func (UnimplementedAlertServer) ShowAlertsByAdmin(context.Context, *ListAlertsByAdminRequest) (*ListAlertResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAlertsByAdmin not implemented")
}
func (UnimplementedAlertServer) RemoveAlert(context.Context, *RemoveAlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAlert not implemented")
}
func (UnimplementedAlertServer) UpdateAlert(context.Context, *UpdateAlertRequest) (*AlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAlert not implemented")
}
func (UnimplementedAlertServer) ShowAlertsByUser(context.Context, *ListAlertsByUserRequest) (*ListAlertResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowAlertsByUser not implemented")
}
func (UnimplementedAlertServer) ShowUserGroups(context.Context, *UserGroupsRequest) (*UserGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowUserGroups not implemented")
}
func (UnimplementedAlertServer) mustEmbedUnimplementedAlertServer() {}

// UnsafeAlertServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlertServer will
// result in compilation errors.
type UnsafeAlertServer interface {
	mustEmbedUnimplementedAlertServer()
}

func RegisterAlertServer(s grpc.ServiceRegistrar, srv AlertServer) {
	s.RegisterService(&Alert_ServiceDesc, srv)
}

func _Alert_CreateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).CreateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.alertpb.Alert/CreateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).CreateAlert(ctx, req.(*CreateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_ShowAlertsByAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsByAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).ShowAlertsByAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.alertpb.Alert/ShowAlertsByAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).ShowAlertsByAdmin(ctx, req.(*ListAlertsByAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_RemoveAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).RemoveAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.alertpb.Alert/RemoveAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).RemoveAlert(ctx, req.(*RemoveAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_UpdateAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).UpdateAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.alertpb.Alert/UpdateAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).UpdateAlert(ctx, req.(*UpdateAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_ShowAlertsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAlertsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).ShowAlertsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.alertpb.Alert/ShowAlertsByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).ShowAlertsByUser(ctx, req.(*ListAlertsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alert_ShowUserGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlertServer).ShowUserGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.alertpb.Alert/ShowUserGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlertServer).ShowUserGroups(ctx, req.(*UserGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Alert_ServiceDesc is the grpc.ServiceDesc for Alert service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Alert_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.alertpb.Alert",
	HandlerType: (*AlertServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAlert",
			Handler:    _Alert_CreateAlert_Handler,
		},
		{
			MethodName: "ShowAlertsByAdmin",
			Handler:    _Alert_ShowAlertsByAdmin_Handler,
		},
		{
			MethodName: "RemoveAlert",
			Handler:    _Alert_RemoveAlert_Handler,
		},
		{
			MethodName: "UpdateAlert",
			Handler:    _Alert_UpdateAlert_Handler,
		},
		{
			MethodName: "ShowAlertsByUser",
			Handler:    _Alert_ShowAlertsByUser_Handler,
		},
		{
			MethodName: "ShowUserGroups",
			Handler:    _Alert_ShowUserGroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alertpb/services.proto",
}
