// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: police/services.proto

package police

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PoliceClient is the client API for Police service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoliceClient interface {
	IssuePass(ctx context.Context, in *PassRequest, opts ...grpc.CallOption) (*PassResponse, error)
	ValidatePass(ctx context.Context, in *ValidatePassRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveService(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServicesResponse, error)
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
}

type policeClient struct {
	cc grpc.ClientConnInterface
}

func NewPoliceClient(cc grpc.ClientConnInterface) PoliceClient {
	return &policeClient{cc}
}

func (c *policeClient) IssuePass(ctx context.Context, in *PassRequest, opts ...grpc.CallOption) (*PassResponse, error) {
	out := new(PassResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.police.Police/IssuePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policeClient) ValidatePass(ctx context.Context, in *ValidatePassRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.police.Police/ValidatePass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policeClient) AddService(ctx context.Context, in *AddServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.police.Police/AddService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policeClient) RemoveService(ctx context.Context, in *RemoveServiceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/rabex.api.police.Police/RemoveService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policeClient) GetServices(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.police.Police/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *policeClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.police.Police/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoliceServer is the server API for Police service.
// All implementations must embed UnimplementedPoliceServer
// for forward compatibility
type PoliceServer interface {
	IssuePass(context.Context, *PassRequest) (*PassResponse, error)
	ValidatePass(context.Context, *ValidatePassRequest) (*emptypb.Empty, error)
	AddService(context.Context, *AddServiceRequest) (*emptypb.Empty, error)
	RemoveService(context.Context, *RemoveServiceRequest) (*emptypb.Empty, error)
	GetServices(context.Context, *emptypb.Empty) (*GetServicesResponse, error)
	GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	mustEmbedUnimplementedPoliceServer()
}

// UnimplementedPoliceServer must be embedded to have forward compatible implementations.
type UnimplementedPoliceServer struct {
}

func (UnimplementedPoliceServer) IssuePass(context.Context, *PassRequest) (*PassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuePass not implemented")
}
func (UnimplementedPoliceServer) ValidatePass(context.Context, *ValidatePassRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePass not implemented")
}
func (UnimplementedPoliceServer) AddService(context.Context, *AddServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddService not implemented")
}
func (UnimplementedPoliceServer) RemoveService(context.Context, *RemoveServiceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveService not implemented")
}
func (UnimplementedPoliceServer) GetServices(context.Context, *emptypb.Empty) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedPoliceServer) GetToken(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedPoliceServer) mustEmbedUnimplementedPoliceServer() {}

// UnsafePoliceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoliceServer will
// result in compilation errors.
type UnsafePoliceServer interface {
	mustEmbedUnimplementedPoliceServer()
}

func RegisterPoliceServer(s grpc.ServiceRegistrar, srv PoliceServer) {
	s.RegisterService(&Police_ServiceDesc, srv)
}

func _Police_IssuePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliceServer).IssuePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.police.Police/IssuePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliceServer).IssuePass(ctx, req.(*PassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Police_ValidatePass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidatePassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliceServer).ValidatePass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.police.Police/ValidatePass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliceServer).ValidatePass(ctx, req.(*ValidatePassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Police_AddService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliceServer).AddService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.police.Police/AddService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliceServer).AddService(ctx, req.(*AddServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Police_RemoveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliceServer).RemoveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.police.Police/RemoveService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliceServer).RemoveService(ctx, req.(*RemoveServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Police_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.police.Police/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliceServer).GetServices(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Police_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoliceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.police.Police/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoliceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Police_ServiceDesc is the grpc.ServiceDesc for Police service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Police_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.police.Police",
	HandlerType: (*PoliceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IssuePass",
			Handler:    _Police_IssuePass_Handler,
		},
		{
			MethodName: "ValidatePass",
			Handler:    _Police_ValidatePass_Handler,
		},
		{
			MethodName: "AddService",
			Handler:    _Police_AddService_Handler,
		},
		{
			MethodName: "RemoveService",
			Handler:    _Police_RemoveService_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _Police_GetServices_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _Police_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "police/services.proto",
}
