// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rabexpb/services.proto

package rabexpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LandingClient is the client API for Landing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LandingClient interface {
	CreateLandingPage(ctx context.Context, in *LandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error)
	GetLandingPage(ctx context.Context, in *LandingPageFilterRequest, opts ...grpc.CallOption) (*LandingPageResponse, error)
	CreateLandingPageInfo(ctx context.Context, in *LandingPageInfoRequest, opts ...grpc.CallOption) (*LandingPageInfoResponse, error)
}

type landingClient struct {
	cc grpc.ClientConnInterface
}

func NewLandingClient(cc grpc.ClientConnInterface) LandingClient {
	return &landingClient{cc}
}

func (c *landingClient) CreateLandingPage(ctx context.Context, in *LandingPageRequest, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	out := new(LandingPageResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rabex.Landing/CreateLandingPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landingClient) GetLandingPage(ctx context.Context, in *LandingPageFilterRequest, opts ...grpc.CallOption) (*LandingPageResponse, error) {
	out := new(LandingPageResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rabex.Landing/GetLandingPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *landingClient) CreateLandingPageInfo(ctx context.Context, in *LandingPageInfoRequest, opts ...grpc.CallOption) (*LandingPageInfoResponse, error) {
	out := new(LandingPageInfoResponse)
	err := c.cc.Invoke(ctx, "/rabex.api.rabex.Landing/CreateLandingPageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LandingServer is the server API for Landing service.
// All implementations must embed UnimplementedLandingServer
// for forward compatibility
type LandingServer interface {
	CreateLandingPage(context.Context, *LandingPageRequest) (*LandingPageResponse, error)
	GetLandingPage(context.Context, *LandingPageFilterRequest) (*LandingPageResponse, error)
	CreateLandingPageInfo(context.Context, *LandingPageInfoRequest) (*LandingPageInfoResponse, error)
	mustEmbedUnimplementedLandingServer()
}

// UnimplementedLandingServer must be embedded to have forward compatible implementations.
type UnimplementedLandingServer struct {
}

func (UnimplementedLandingServer) CreateLandingPage(context.Context, *LandingPageRequest) (*LandingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLandingPage not implemented")
}
func (UnimplementedLandingServer) GetLandingPage(context.Context, *LandingPageFilterRequest) (*LandingPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLandingPage not implemented")
}
func (UnimplementedLandingServer) CreateLandingPageInfo(context.Context, *LandingPageInfoRequest) (*LandingPageInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLandingPageInfo not implemented")
}
func (UnimplementedLandingServer) mustEmbedUnimplementedLandingServer() {}

// UnsafeLandingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LandingServer will
// result in compilation errors.
type UnsafeLandingServer interface {
	mustEmbedUnimplementedLandingServer()
}

func RegisterLandingServer(s grpc.ServiceRegistrar, srv LandingServer) {
	s.RegisterService(&Landing_ServiceDesc, srv)
}

func _Landing_CreateLandingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandingPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandingServer).CreateLandingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rabex.Landing/CreateLandingPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandingServer).CreateLandingPage(ctx, req.(*LandingPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Landing_GetLandingPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandingPageFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandingServer).GetLandingPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rabex.Landing/GetLandingPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandingServer).GetLandingPage(ctx, req.(*LandingPageFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Landing_CreateLandingPageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LandingPageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LandingServer).CreateLandingPageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rabex.api.rabex.Landing/CreateLandingPageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LandingServer).CreateLandingPageInfo(ctx, req.(*LandingPageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Landing_ServiceDesc is the grpc.ServiceDesc for Landing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Landing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rabex.api.rabex.Landing",
	HandlerType: (*LandingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLandingPage",
			Handler:    _Landing_CreateLandingPage_Handler,
		},
		{
			MethodName: "GetLandingPage",
			Handler:    _Landing_GetLandingPage_Handler,
		},
		{
			MethodName: "CreateLandingPageInfo",
			Handler:    _Landing_CreateLandingPageInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rabexpb/services.proto",
}
